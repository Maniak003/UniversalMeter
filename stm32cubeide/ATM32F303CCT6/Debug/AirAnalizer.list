
AirAnalizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d14  0800d370  0800d370  0001d370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e084  0800e084  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e084  0800e084  0001e084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e08c  0800e08c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e08c  0800e08c  0001e08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e090  0800e090  0001e090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          0000037c  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000568  20000568  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8a3  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003732  00000000  00000000  0003babf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001528  00000000  00000000  000408b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a4b  00000000  00000000  00041dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e09b  00000000  00000000  00063823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6ced  00000000  00000000  000818be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001485ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000725c  00000000  00000000  001485fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d354 	.word	0x0800d354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800d354 	.word	0x0800d354

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c66:	f000 b9a7 	b.w	8000fb8 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f835 	bl	8000ce8 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f828 	bl	8000ce8 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f817 	bl	8000ce8 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f809 	bl	8000ce8 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <AGS02MA_getFirmwareVersion>:
#include "stm32f3xx_hal.h"
#include <AGS02MA.h>

uint32_t AGS02MA_getFirmwareVersion(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  uint32_t vers = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  if (! AGS02MA_readReg(_AGS02MA_VERSION_REG, 30, &vers)) {
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	461a      	mov	r2, r3
 8000fca:	211e      	movs	r1, #30
 8000fcc:	2011      	movs	r0, #17
 8000fce:	f000 f829 	bl	8001024 <AGS02MA_readReg>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f083 0301 	eor.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <AGS02MA_getFirmwareVersion+0x26>
    return 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <AGS02MA_getFirmwareVersion+0x28>
  }
  return vers;
 8000fe2:	687b      	ldr	r3, [r7, #4]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <AGS02MA_getTVOC>:


uint32_t AGS02MA_getTVOC(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  uint32_t tvoc = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  if (! AGS02MA_readReg(_AGS02MA_TVOCSTAT_REG, 1500, &tvoc)) {
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f810 	bl	8001024 <AGS02MA_readReg>
 8001004:	4603      	mov	r3, r0
 8001006:	f083 0301 	eor.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <AGS02MA_getTVOC+0x28>
    return 0;
 8001010:	2300      	movs	r3, #0
 8001012:	e002      	b.n	800101a <AGS02MA_getTVOC+0x2e>
  }
  return tvoc & 0xFFFFFF;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <AGS02MA_readReg>:
//    }
//  }
//  return crc;
//}

bool AGS02MA_readReg(uint8_t addr, uint16_t delayms, uint32_t *value) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	603a      	str	r2, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	460b      	mov	r3, r1
 8001032:	80bb      	strh	r3, [r7, #4]
	uint8_t buf[5];
	buf[0] = addr;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&SCD4X_I2C_PORT, AGS02MA_I2CADDR_DEFAULT, buf, 1, 100);
 8001038:	f107 020c 	add.w	r2, r7, #12
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2134      	movs	r1, #52	; 0x34
 8001044:	4818      	ldr	r0, [pc, #96]	; (80010a8 <AGS02MA_readReg+0x84>)
 8001046:	f004 fc0f 	bl	8005868 <HAL_I2C_Master_Transmit>

	//if (!i2c_dev->write(buf, 1)) {
	//return false;
	//}
	HAL_Delay(delayms);
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fd65 	bl	8003b1c <HAL_Delay>

	HAL_I2C_Master_Receive(&SCD4X_I2C_PORT, AGS02MA_I2CADDR_DEFAULT, buf, 5, 100);
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2305      	movs	r3, #5
 800105c:	2134      	movs	r1, #52	; 0x34
 800105e:	4812      	ldr	r0, [pc, #72]	; (80010a8 <AGS02MA_readReg+0x84>)
 8001060:	f004 fcf6 	bl	8005a50 <HAL_I2C_Master_Receive>

	//if (crc8(buf, 4) != buf[4]) {
	//return false;
	//}

	uint32_t temp = buf[0];
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	617b      	str	r3, [r7, #20]
	temp <<= 8;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	617b      	str	r3, [r7, #20]
	temp |= buf[1];
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	461a      	mov	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	4313      	orrs	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
	temp <<= 8;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	617b      	str	r3, [r7, #20]
	temp |= buf[2];
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	461a      	mov	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	4313      	orrs	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
	temp <<= 8;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	617b      	str	r3, [r7, #20]
	temp |= buf[3];
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	461a      	mov	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
	*value = temp;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]
	return true;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000338 	.word	0x20000338

080010ac <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t t_fine;
//------------------------------------------------
void Error(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
 80010c6:	460b      	mov	r3, r1
 80010c8:	717b      	strb	r3, [r7, #5]
 80010ca:	4613      	mov	r3, r2
 80010cc:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80010d2:	797b      	ldrb	r3, [r7, #5]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	88f9      	ldrh	r1, [r7, #6]
 80010d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <I2Cx_WriteData+0x48>)
 80010ea:	f004 fda7 	bl	8005c3c <HAL_I2C_Mem_Write>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <I2Cx_WriteData+0x40>
 80010f8:	f7ff ffd8 	bl	80010ac <Error>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000338 	.word	0x20000338

08001108 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af04      	add	r7, sp, #16
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	80fb      	strh	r3, [r7, #6]
 8001114:	4613      	mov	r3, r2
 8001116:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001120:	797b      	ldrb	r3, [r7, #5]
 8001122:	b29a      	uxth	r2, r3
 8001124:	88f9      	ldrh	r1, [r7, #6]
 8001126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 030e 	add.w	r3, r7, #14
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <I2Cx_ReadData+0x50>)
 800113a:	f004 fe93 	bl	8005e64 <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <I2Cx_ReadData+0x44>
 8001148:	f7ff ffb0 	bl	80010ac <Error>
  return value;
 800114c:	7bbb      	ldrb	r3, [r7, #14]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000338 	.word	0x20000338

0800115c <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af04      	add	r7, sp, #16
 8001162:	4603      	mov	r3, r0
 8001164:	603a      	str	r2, [r7, #0]
 8001166:	80fb      	strh	r3, [r7, #6]
 8001168:	460b      	mov	r3, r1
 800116a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001170:	797b      	ldrb	r3, [r7, #5]
 8001172:	b29a      	uxth	r2, r3
 8001174:	88f9      	ldrh	r1, [r7, #6]
 8001176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2302      	movs	r3, #2
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <I2Cx_ReadData16+0x48>)
 8001188:	f004 fe6c 	bl	8005e64 <HAL_I2C_Mem_Read>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <I2Cx_ReadData16+0x3e>
 8001196:	f7ff ff89 	bl	80010ac <Error>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000338 	.word	0x20000338

080011a8 <BME280_WriteReg>:
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
  if(status != HAL_OK) Error();
}
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	460a      	mov	r2, r1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4619      	mov	r1, r3
 80011be:	20ec      	movs	r0, #236	; 0xec
 80011c0:	f7ff ff7c 	bl	80010bc <I2Cx_WriteData>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4619      	mov	r1, r3
 80011da:	20ec      	movs	r0, #236	; 0xec
 80011dc:	f7ff ff94 	bl	8001108 <I2Cx_ReadData>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  return res;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	6039      	str	r1, [r7, #0]
 80011f8:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	20ec      	movs	r0, #236	; 0xec
 8001202:	f7ff ffab 	bl	800115c <I2Cx_ReadData16>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	6039      	str	r1, [r7, #0]
 8001218:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	20ec      	movs	r0, #236	; 0xec
 8001222:	f7ff ff9b 	bl	800115c <I2Cx_ReadData16>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
uint16_t BME280_ReadReg_BE_S16(uint8_t Reg)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer_8[2];
	HAL_StatusTypeDef status = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, buffer_8, 2, 0x10000);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	b29a      	uxth	r2, r3
 8001242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2302      	movs	r3, #2
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	21ec      	movs	r1, #236	; 0xec
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <BME280_ReadReg_BE_S16+0x54>)
 8001258:	f004 fe04 	bl	8005e64 <HAL_I2C_Mem_Read>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <BME280_ReadReg_BE_S16+0x3a>
		Error();
 8001266:	f7ff ff21 	bl	80010ac <Error>
	}
	return (uint16_t)(buffer_8[0]) << 8 | (uint16_t)(buffer_8[1]);
 800126a:	7b3b      	ldrb	r3, [r7, #12]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7b7b      	ldrb	r3, [r7, #13]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	b29b      	uxth	r3, r3
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000338 	.word	0x20000338

08001288 <BME280_ReadReg_BE_U24>:
{
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
uint32_t BME280_ReadReg_BE_U24(uint8_t Reg) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af04      	add	r7, sp, #16
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer_8[3];
	HAL_StatusTypeDef status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, buffer_8, 3, 0x10000);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	b29a      	uxth	r2, r3
 800129a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2303      	movs	r3, #3
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	21ec      	movs	r1, #236	; 0xec
 80012ae:	480a      	ldr	r0, [pc, #40]	; (80012d8 <BME280_ReadReg_BE_U24+0x50>)
 80012b0:	f004 fdd8 	bl	8005e64 <HAL_I2C_Mem_Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <BME280_ReadReg_BE_U24+0x3a>
		Error();
 80012be:	f7ff fef5 	bl	80010ac <Error>
	}
	return (uint32_t) (buffer_8[0]) << 16 | (uint32_t) (buffer_8[1]) << 8 | (uint32_t) (buffer_8[2]);
 80012c2:	7b3b      	ldrb	r3, [r7, #12]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	7b7b      	ldrb	r3, [r7, #13]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	4313      	orrs	r3, r2
 80012cc:	7bba      	ldrb	r2, [r7, #14]
 80012ce:	4313      	orrs	r3, r2
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000338 	.word	0x20000338

080012dc <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
	int32_t var1, var2;
	int32_t adc_T = BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA);
 80012e2:	20fa      	movs	r0, #250	; 0xfa
 80012e4:	f7ff ffd0 	bl	8001288 <BME280_ReadReg_BE_U24>
 80012e8:	4603      	mov	r3, r0
 80012ea:	60fb      	str	r3, [r7, #12]

	if ( adc_T == 0x800000) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80012f2:	d102      	bne.n	80012fa <BME280_ReadTemperature+0x1e>
		return NAN;
 80012f4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80013b0 <BME280_ReadTemperature+0xd4>
 80012f8:	e052      	b.n	80013a0 <BME280_ReadTemperature+0xc4>
	}
	adc_T >>= 4;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	111b      	asrs	r3, r3, #4
 80012fe:	60fb      	str	r3, [r7, #12]
	var1 = (int32_t)((adc_T / 8) - ((int32_t)CalibData.dig_T1 * 2));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	da00      	bge.n	8001308 <BME280_ReadTemperature+0x2c>
 8001306:	3307      	adds	r3, #7
 8001308:	10db      	asrs	r3, r3, #3
 800130a:	461a      	mov	r2, r3
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <BME280_ReadTemperature+0xd8>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	60bb      	str	r3, [r7, #8]
  	var1 = (var1 * ((int32_t)CalibData.dig_T2)) / 2048;
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <BME280_ReadTemperature+0xd8>)
 8001318:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800131c:	461a      	mov	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	da01      	bge.n	800132c <BME280_ReadTemperature+0x50>
 8001328:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800132c:	12db      	asrs	r3, r3, #11
 800132e:	60bb      	str	r3, [r7, #8]
  	var2 = (int32_t)((adc_T / 16) - ((int32_t)CalibData.dig_T1));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	da00      	bge.n	8001338 <BME280_ReadTemperature+0x5c>
 8001336:	330f      	adds	r3, #15
 8001338:	111b      	asrs	r3, r3, #4
 800133a:	461a      	mov	r2, r3
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <BME280_ReadTemperature+0xd8>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	607b      	str	r3, [r7, #4]
  	var2 = (((var2 * var2) / 4096) * ((int32_t)CalibData.dig_T3)) / 16384;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	fb03 f303 	mul.w	r3, r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <BME280_ReadTemperature+0x76>
 800134e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001352:	131b      	asrs	r3, r3, #12
 8001354:	461a      	mov	r2, r3
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <BME280_ReadTemperature+0xd8>)
 8001358:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800135c:	fb02 f303 	mul.w	r3, r2, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	da02      	bge.n	800136a <BME280_ReadTemperature+0x8e>
 8001364:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001368:	333f      	adds	r3, #63	; 0x3f
 800136a:	139b      	asrs	r3, r3, #14
 800136c:	607b      	str	r3, [r7, #4]
    t_fine = var1 + var2;
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <BME280_ReadTemperature+0xdc>)
 8001376:	6013      	str	r3, [r2, #0]
	int32_t T = (t_fine * 5 + 128) / 256;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <BME280_ReadTemperature+0xdc>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3380      	adds	r3, #128	; 0x80
 8001384:	2b00      	cmp	r3, #0
 8001386:	da00      	bge.n	800138a <BME280_ReadTemperature+0xae>
 8001388:	33ff      	adds	r3, #255	; 0xff
 800138a:	121b      	asrs	r3, r3, #8
 800138c:	603b      	str	r3, [r7, #0]

	return (float) T / 100;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001398:	eddf 6a08 	vldr	s13, [pc, #32]	; 80013bc <BME280_ReadTemperature+0xe0>
 800139c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 80013a0:	eef0 7a47 	vmov.f32	s15, s14
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	7fc00000 	.word	0x7fc00000
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000022c 	.word	0x2000022c
 80013bc:	42c80000 	.word	0x42c80000

080013c0 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 80013c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c4:	b0da      	sub	sp, #360	; 0x168
 80013c6:	af00      	add	r7, sp, #0
	int64_t var1, var2, var3, var4;
	BME280_ReadTemperature(); // must be done first to get t_fine
 80013c8:	f7ff ff88 	bl	80012dc <BME280_ReadTemperature>
	int32_t adc_P = BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA);
 80013cc:	20f7      	movs	r0, #247	; 0xf7
 80013ce:	f7ff ff5b 	bl	8001288 <BME280_ReadReg_BE_U24>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	adc_P >>= 4;
 80013d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013dc:	111b      	asrs	r3, r3, #4
 80013de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	var1 = ((int64_t)t_fine) - 128000;
 80013e2:	4bbb      	ldr	r3, [pc, #748]	; (80016d0 <BME280_ReadPressure+0x310>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	17da      	asrs	r2, r3, #31
 80013e8:	4698      	mov	r8, r3
 80013ea:	4691      	mov	r9, r2
 80013ec:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 80013f0:	f149 3bff 	adc.w	fp, r9, #4294967295	; 0xffffffff
 80013f4:	e9c7 ab56 	strd	sl, fp, [r7, #344]	; 0x158
	var2 = var1 * var1 * (int64_t)CalibData.dig_P6;
 80013f8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80013fc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001400:	fb03 f102 	mul.w	r1, r3, r2
 8001404:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001408:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	18ca      	adds	r2, r1, r3
 8001412:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001416:	fba3 4503 	umull	r4, r5, r3, r3
 800141a:	1953      	adds	r3, r2, r5
 800141c:	461d      	mov	r5, r3
 800141e:	4bad      	ldr	r3, [pc, #692]	; (80016d4 <BME280_ReadPressure+0x314>)
 8001420:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001424:	b21b      	sxth	r3, r3
 8001426:	17da      	asrs	r2, r3, #31
 8001428:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800142c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001430:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001434:	4603      	mov	r3, r0
 8001436:	fb03 f205 	mul.w	r2, r3, r5
 800143a:	460b      	mov	r3, r1
 800143c:	fb04 f303 	mul.w	r3, r4, r3
 8001440:	4413      	add	r3, r2
 8001442:	4602      	mov	r2, r0
 8001444:	fba4 1202 	umull	r1, r2, r4, r2
 8001448:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800144c:	460a      	mov	r2, r1
 800144e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001452:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001456:	4413      	add	r3, r2
 8001458:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800145c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8001460:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
 8001464:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var2 = var2 + ((var1 * (int64_t)CalibData.dig_P5) * 131072);
 8001468:	4b9a      	ldr	r3, [pc, #616]	; (80016d4 <BME280_ReadPressure+0x314>)
 800146a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800146e:	b21b      	sxth	r3, r3
 8001470:	17da      	asrs	r2, r3, #31
 8001472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001476:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800147a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800147e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001482:	462a      	mov	r2, r5
 8001484:	fb02 f203 	mul.w	r2, r2, r3
 8001488:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800148c:	4621      	mov	r1, r4
 800148e:	fb01 f303 	mul.w	r3, r1, r3
 8001492:	441a      	add	r2, r3
 8001494:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001498:	4621      	mov	r1, r4
 800149a:	fba3 1301 	umull	r1, r3, r3, r1
 800149e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80014a2:	460b      	mov	r3, r1
 80014a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80014a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80014b2:	f04f 0000 	mov.w	r0, #0
 80014b6:	f04f 0100 	mov.w	r1, #0
 80014ba:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80014be:	462b      	mov	r3, r5
 80014c0:	0459      	lsls	r1, r3, #17
 80014c2:	4623      	mov	r3, r4
 80014c4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80014c8:	4623      	mov	r3, r4
 80014ca:	0458      	lsls	r0, r3, #17
 80014cc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80014d0:	1814      	adds	r4, r2, r0
 80014d2:	67bc      	str	r4, [r7, #120]	; 0x78
 80014d4:	414b      	adcs	r3, r1
 80014d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014d8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80014dc:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var2 = var2 + (((int64_t)CalibData.dig_P4) * 34359738368);
 80014e0:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <BME280_ReadPressure+0x314>)
 80014e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	17da      	asrs	r2, r3, #31
 80014ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80014ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f04f 0100 	mov.w	r1, #0
 80014fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014fe:	00d9      	lsls	r1, r3, #3
 8001500:	2000      	movs	r0, #0
 8001502:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001506:	1814      	adds	r4, r2, r0
 8001508:	673c      	str	r4, [r7, #112]	; 0x70
 800150a:	414b      	adcs	r3, r1
 800150c:	677b      	str	r3, [r7, #116]	; 0x74
 800150e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8001512:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var1 = ((var1 * var1 * (int64_t)CalibData.dig_P3) / 256) + ((var1 * ((int64_t)CalibData.dig_P2) * 4096));
 8001516:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800151a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800151e:	fb03 f102 	mul.w	r1, r3, r2
 8001522:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001526:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	18ca      	adds	r2, r1, r3
 8001530:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001534:	fba3 1303 	umull	r1, r3, r3, r3
 8001538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800153c:	460b      	mov	r3, r1
 800153e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001546:	18d3      	adds	r3, r2, r3
 8001548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <BME280_ReadPressure+0x314>)
 800154e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001552:	b21b      	sxth	r3, r3
 8001554:	17da      	asrs	r2, r3, #31
 8001556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800155a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800155e:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8001562:	462b      	mov	r3, r5
 8001564:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001568:	4642      	mov	r2, r8
 800156a:	fb02 f203 	mul.w	r2, r2, r3
 800156e:	464b      	mov	r3, r9
 8001570:	4621      	mov	r1, r4
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	4413      	add	r3, r2
 8001578:	4622      	mov	r2, r4
 800157a:	4641      	mov	r1, r8
 800157c:	fba2 1201 	umull	r1, r2, r2, r1
 8001580:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001584:	460a      	mov	r2, r1
 8001586:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800158a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800158e:	4413      	add	r3, r2
 8001590:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001594:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001598:	2b00      	cmp	r3, #0
 800159a:	da07      	bge.n	80015ac <BME280_ReadPressure+0x1ec>
 800159c:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 80015a0:	66b9      	str	r1, [r7, #104]	; 0x68
 80015a2:	f143 0300 	adc.w	r3, r3, #0
 80015a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	f04f 0100 	mov.w	r1, #0
 80015b4:	0a10      	lsrs	r0, r2, #8
 80015b6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015ba:	1219      	asrs	r1, r3, #8
 80015bc:	4b45      	ldr	r3, [pc, #276]	; (80016d4 <BME280_ReadPressure+0x314>)
 80015be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	17da      	asrs	r2, r3, #31
 80015c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80015ca:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80015ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015d2:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80015d6:	464a      	mov	r2, r9
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015e0:	4644      	mov	r4, r8
 80015e2:	fb04 f303 	mul.w	r3, r4, r3
 80015e6:	441a      	add	r2, r3
 80015e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015ec:	4644      	mov	r4, r8
 80015ee:	fba3 4304 	umull	r4, r3, r3, r4
 80015f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015f6:	4623      	mov	r3, r4
 80015f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80015fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001612:	464c      	mov	r4, r9
 8001614:	0323      	lsls	r3, r4, #12
 8001616:	4644      	mov	r4, r8
 8001618:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800161c:	4644      	mov	r4, r8
 800161e:	0322      	lsls	r2, r4, #12
 8001620:	1884      	adds	r4, r0, r2
 8001622:	663c      	str	r4, [r7, #96]	; 0x60
 8001624:	eb41 0303 	adc.w	r3, r1, r3
 8001628:	667b      	str	r3, [r7, #100]	; 0x64
 800162a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800162e:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
	var3 = ((int64_t)1) * 140737488355328;
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	var1 = (var3 + var1) * ((int64_t)CalibData.dig_P1) / 8589934592;
 800163e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001642:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001646:	1884      	adds	r4, r0, r2
 8001648:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800164c:	eb41 0303 	adc.w	r3, r1, r3
 8001650:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <BME280_ReadPressure+0x314>)
 8001656:	88db      	ldrh	r3, [r3, #6]
 8001658:	b29b      	uxth	r3, r3
 800165a:	2200      	movs	r2, #0
 800165c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001660:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001664:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001668:	462b      	mov	r3, r5
 800166a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800166e:	4642      	mov	r2, r8
 8001670:	fb02 f203 	mul.w	r2, r2, r3
 8001674:	464b      	mov	r3, r9
 8001676:	4621      	mov	r1, r4
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	4622      	mov	r2, r4
 8001680:	4641      	mov	r1, r8
 8001682:	fba2 1201 	umull	r1, r2, r2, r1
 8001686:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800168a:	460a      	mov	r2, r1
 800168c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8001690:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001694:	4413      	add	r3, r2
 8001696:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800169a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da06      	bge.n	80016b0 <BME280_ReadPressure+0x2f0>
 80016a2:	1e51      	subs	r1, r2, #1
 80016a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80016a6:	f143 0301 	adc.w	r3, r3, #1
 80016aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016b0:	f04f 0000 	mov.w	r0, #0
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	1058      	asrs	r0, r3, #1
 80016ba:	17d9      	asrs	r1, r3, #31
 80016bc:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
	if (var1 == 0) {
 80016c0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80016c4:	4313      	orrs	r3, r2
 80016c6:	d107      	bne.n	80016d8 <BME280_ReadPressure+0x318>
		return 0; // avoid exception caused by division by zero
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e196      	b.n	80019fc <BME280_ReadPressure+0x63c>
 80016ce:	bf00      	nop
 80016d0:	2000022c 	.word	0x2000022c
 80016d4:	20000208 	.word	0x20000208
	}
	var4 = 1048576 - adc_P;
 80016d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016dc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016e0:	17da      	asrs	r2, r3, #31
 80016e2:	653b      	str	r3, [r7, #80]	; 0x50
 80016e4:	657a      	str	r2, [r7, #84]	; 0x54
 80016e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80016ea:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 80016ee:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80016f2:	f04f 0000 	mov.w	r0, #0
 80016f6:	f04f 0100 	mov.w	r1, #0
 80016fa:	07d9      	lsls	r1, r3, #31
 80016fc:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001700:	07d0      	lsls	r0, r2, #31
 8001702:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001706:	1a84      	subs	r4, r0, r2
 8001708:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800170c:	eb61 0303 	sbc.w	r3, r1, r3
 8001710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001714:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001718:	4622      	mov	r2, r4
 800171a:	462b      	mov	r3, r5
 800171c:	1891      	adds	r1, r2, r2
 800171e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001720:	415b      	adcs	r3, r3
 8001722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001728:	4621      	mov	r1, r4
 800172a:	1851      	adds	r1, r2, r1
 800172c:	6439      	str	r1, [r7, #64]	; 0x40
 800172e:	4629      	mov	r1, r5
 8001730:	414b      	adcs	r3, r1
 8001732:	647b      	str	r3, [r7, #68]	; 0x44
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001740:	4649      	mov	r1, r9
 8001742:	018b      	lsls	r3, r1, #6
 8001744:	4641      	mov	r1, r8
 8001746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174a:	4641      	mov	r1, r8
 800174c:	018a      	lsls	r2, r1, #6
 800174e:	4641      	mov	r1, r8
 8001750:	1889      	adds	r1, r1, r2
 8001752:	63b9      	str	r1, [r7, #56]	; 0x38
 8001754:	4649      	mov	r1, r9
 8001756:	eb43 0101 	adc.w	r1, r3, r1
 800175a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001768:	4649      	mov	r1, r9
 800176a:	008b      	lsls	r3, r1, #2
 800176c:	4641      	mov	r1, r8
 800176e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001772:	4641      	mov	r1, r8
 8001774:	008a      	lsls	r2, r1, #2
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	4603      	mov	r3, r0
 800177c:	4622      	mov	r2, r4
 800177e:	189b      	adds	r3, r3, r2
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
 8001782:	460b      	mov	r3, r1
 8001784:	462a      	mov	r2, r5
 8001786:	eb42 0303 	adc.w	r3, r2, r3
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8001798:	4649      	mov	r1, r9
 800179a:	008b      	lsls	r3, r1, #2
 800179c:	4641      	mov	r1, r8
 800179e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017a2:	4641      	mov	r1, r8
 80017a4:	008a      	lsls	r2, r1, #2
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	4622      	mov	r2, r4
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017b4:	462b      	mov	r3, r5
 80017b6:	460a      	mov	r2, r1
 80017b8:	eb42 0303 	adc.w	r3, r2, r3
 80017bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80017c0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80017c4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80017c8:	f7ff fa3e 	bl	8000c48 <__aeabi_ldivmod>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	var1 = (((int64_t)CalibData.dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 80017d4:	4b8e      	ldr	r3, [pc, #568]	; (8001a10 <BME280_ReadPressure+0x650>)
 80017d6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	17da      	asrs	r2, r3, #31
 80017de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80017e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80017e6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da08      	bge.n	8001800 <BME280_ReadPressure+0x440>
 80017ee:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80017f2:	1851      	adds	r1, r2, r1
 80017f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80017f6:	f143 0300 	adc.w	r3, r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	0b50      	lsrs	r0, r2, #13
 800180a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800180e:	1359      	asrs	r1, r3, #13
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001818:	4629      	mov	r1, r5
 800181a:	fb02 f001 	mul.w	r0, r2, r1
 800181e:	4621      	mov	r1, r4
 8001820:	fb01 f103 	mul.w	r1, r1, r3
 8001824:	4401      	add	r1, r0
 8001826:	4620      	mov	r0, r4
 8001828:	fba0 2302 	umull	r2, r3, r0, r2
 800182c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001830:	4613      	mov	r3, r2
 8001832:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800183a:	18cb      	adds	r3, r1, r3
 800183c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001840:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001844:	2b00      	cmp	r3, #0
 8001846:	da08      	bge.n	800185a <BME280_ReadPressure+0x49a>
 8001848:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800184c:	1851      	adds	r1, r2, r1
 800184e:	6239      	str	r1, [r7, #32]
 8001850:	f143 0300 	adc.w	r3, r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	0b50      	lsrs	r0, r2, #13
 8001864:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001868:	1359      	asrs	r1, r3, #13
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001872:	4629      	mov	r1, r5
 8001874:	fb02 f001 	mul.w	r0, r2, r1
 8001878:	4621      	mov	r1, r4
 800187a:	fb01 f103 	mul.w	r1, r1, r3
 800187e:	4401      	add	r1, r0
 8001880:	4620      	mov	r0, r4
 8001882:	fba0 2302 	umull	r2, r3, r0, r2
 8001886:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800188a:	4613      	mov	r3, r2
 800188c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001894:	18cb      	adds	r3, r1, r3
 8001896:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800189a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da08      	bge.n	80018b4 <BME280_ReadPressure+0x4f4>
 80018a2:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 80018a6:	1851      	adds	r1, r2, r1
 80018a8:	61b9      	str	r1, [r7, #24]
 80018aa:	f143 0300 	adc.w	r3, r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b4:	f04f 0000 	mov.w	r0, #0
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	0e50      	lsrs	r0, r2, #25
 80018be:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 80018c2:	1659      	asrs	r1, r3, #25
 80018c4:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
	var2 = (((int64_t)CalibData.dig_P8) * var4) / 524288;
 80018c8:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <BME280_ReadPressure+0x650>)
 80018ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	17da      	asrs	r2, r3, #31
 80018d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018d6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80018de:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80018e2:	462a      	mov	r2, r5
 80018e4:	fb02 f203 	mul.w	r2, r2, r3
 80018e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80018ec:	4621      	mov	r1, r4
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	441a      	add	r2, r3
 80018f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80018f8:	4621      	mov	r1, r4
 80018fa:	fba3 1301 	umull	r1, r3, r3, r1
 80018fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001902:	460b      	mov	r3, r1
 8001904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800190c:	18d3      	adds	r3, r2, r3
 800190e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001912:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001916:	2900      	cmp	r1, #0
 8001918:	da07      	bge.n	800192a <BME280_ReadPressure+0x56a>
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <BME280_ReadPressure+0x654>)
 800191c:	18c3      	adds	r3, r0, r3
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	f141 0300 	adc.w	r3, r1, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	0cc2      	lsrs	r2, r0, #19
 8001934:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001938:	14cb      	asrs	r3, r1, #19
 800193a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
	var4 = ((var4 + var1 + var2) / 256) + (((int64_t)CalibData.dig_P7) * 16);
 800193e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001942:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001946:	1884      	adds	r4, r0, r2
 8001948:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800194c:	eb41 0303 	adc.w	r3, r1, r3
 8001950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001954:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001958:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800195c:	4621      	mov	r1, r4
 800195e:	1889      	adds	r1, r1, r2
 8001960:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001964:	4629      	mov	r1, r5
 8001966:	eb43 0101 	adc.w	r1, r3, r1
 800196a:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800196e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001972:	2b00      	cmp	r3, #0
 8001974:	da07      	bge.n	8001986 <BME280_ReadPressure+0x5c6>
 8001976:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	f143 0300 	adc.w	r3, r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0a10      	lsrs	r0, r2, #8
 8001990:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001994:	1219      	asrs	r1, r3, #8
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <BME280_ReadPressure+0x650>)
 8001998:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800199c:	b21b      	sxth	r3, r3
 800199e:	17da      	asrs	r2, r3, #31
 80019a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80019b4:	464c      	mov	r4, r9
 80019b6:	0123      	lsls	r3, r4, #4
 80019b8:	4644      	mov	r4, r8
 80019ba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019be:	4644      	mov	r4, r8
 80019c0:	0122      	lsls	r2, r4, #4
 80019c2:	1884      	adds	r4, r0, r2
 80019c4:	603c      	str	r4, [r7, #0]
 80019c6:	eb41 0303 	adc.w	r3, r1, r3
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019d0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	float P = var4 / 256.0;
 80019d4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80019d8:	f7fe fde0 	bl	800059c <__aeabi_l2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <BME280_ReadPressure+0x658>)
 80019e2:	f7fe ff33 	bl	800084c <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8db 	bl	8000ba8 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return P;
 80019f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
}
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb0 0a67 	vmov.f32	s0, s15
 8001a04:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000208 	.word	0x20000208
 8001a14:	0007ffff 	.word	0x0007ffff
 8001a18:	40700000 	.word	0x40700000

08001a1c <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
  int32_t var1, var2, var3, var4, var5;
	BME280_ReadTemperature(); 	// must be done first to get t_fine
 8001a22:	f7ff fc5b 	bl	80012dc <BME280_ReadTemperature>
	int32_t adc_H = BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA);
 8001a26:	20fd      	movs	r0, #253	; 0xfd
 8001a28:	f7ff fc02 	bl	8001230 <BME280_ReadReg_BE_S16>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	61fb      	str	r3, [r7, #28]
	if (adc_H == 0x8000) {  	// value in case humidity measurement was disabled
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a36:	d102      	bne.n	8001a3e <BME280_ReadHumidity+0x22>
		return NAN;
 8001a38:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b8c <BME280_ReadHumidity+0x170>
 8001a3c:	e09e      	b.n	8001b7c <BME280_ReadHumidity+0x160>
	}
	var1 = t_fine - ((int32_t)76800);
 8001a3e:	4b54      	ldr	r3, [pc, #336]	; (8001b90 <BME280_ReadHumidity+0x174>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a46:	61bb      	str	r3, [r7, #24]
	var2 = (int32_t)(adc_H * 16384);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	039b      	lsls	r3, r3, #14
 8001a4c:	617b      	str	r3, [r7, #20]
	var3 = (int32_t)(((int32_t)CalibData.dig_H4) * 1048576);
 8001a4e:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <BME280_ReadHumidity+0x178>)
 8001a50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a54:	051b      	lsls	r3, r3, #20
 8001a56:	613b      	str	r3, [r7, #16]
	var4 = ((int32_t)CalibData.dig_H5) * var1;
 8001a58:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <BME280_ReadHumidity+0x178>)
 8001a5a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad2      	subs	r2, r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da02      	bge.n	8001a80 <BME280_ReadHumidity+0x64>
 8001a7a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001a7e:	337f      	adds	r3, #127	; 0x7f
 8001a80:	13db      	asrs	r3, r3, #15
 8001a82:	60bb      	str	r3, [r7, #8]
	var2 = (var1 * ((int32_t)CalibData.dig_H6)) / 1024;
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <BME280_ReadHumidity+0x178>)
 8001a86:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da01      	bge.n	8001a9a <BME280_ReadHumidity+0x7e>
 8001a96:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001a9a:	129b      	asrs	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]
	var3 = (var1 * ((int32_t)CalibData.dig_H3)) / 2048;
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <BME280_ReadHumidity+0x178>)
 8001aa0:	7f1b      	ldrb	r3, [r3, #28]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	da01      	bge.n	8001ab2 <BME280_ReadHumidity+0x96>
 8001aae:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001ab2:	12db      	asrs	r3, r3, #11
 8001ab4:	613b      	str	r3, [r7, #16]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <BME280_ReadHumidity+0xae>
 8001ac6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001aca:	129b      	asrs	r3, r3, #10
 8001acc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001ad0:	60fb      	str	r3, [r7, #12]
	var2 = ((var4 * ((int32_t)CalibData.dig_H2)) + 8192) / 16384;
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <BME280_ReadHumidity+0x178>)
 8001ad4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da02      	bge.n	8001aee <BME280_ReadHumidity+0xd2>
 8001ae8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001aec:	333f      	adds	r3, #63	; 0x3f
 8001aee:	139b      	asrs	r3, r3, #14
 8001af0:	617b      	str	r3, [r7, #20]
	var3 = var5 * var2;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	613b      	str	r3, [r7, #16]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da02      	bge.n	8001b08 <BME280_ReadHumidity+0xec>
 8001b02:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001b06:	337f      	adds	r3, #127	; 0x7f
 8001b08:	13db      	asrs	r3, r3, #15
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da02      	bge.n	8001b18 <BME280_ReadHumidity+0xfc>
 8001b12:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001b16:	337f      	adds	r3, #127	; 0x7f
 8001b18:	13db      	asrs	r3, r3, #15
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da00      	bge.n	8001b24 <BME280_ReadHumidity+0x108>
 8001b22:	337f      	adds	r3, #127	; 0x7f
 8001b24:	11db      	asrs	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]
	var5 = var3 - ((var4 * ((int32_t)CalibData.dig_H1)) / 16);
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <BME280_ReadHumidity+0x178>)
 8001b2a:	7e1b      	ldrb	r3, [r3, #24]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	da00      	bge.n	8001b3a <BME280_ReadHumidity+0x11e>
 8001b38:	330f      	adds	r3, #15
 8001b3a:	111b      	asrs	r3, r3, #4
 8001b3c:	425b      	negs	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
 8001b44:	60bb      	str	r3, [r7, #8]
	var5 = (var5 < 0 ? 0 : var5);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b4c:	60bb      	str	r3, [r7, #8]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b54:	bfa8      	it	ge
 8001b56:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b5a:	60bb      	str	r3, [r7, #8]
	uint32_t H = (uint32_t)(var5 / 4096);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da01      	bge.n	8001b66 <BME280_ReadHumidity+0x14a>
 8001b62:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001b66:	131b      	asrs	r3, r3, #12
 8001b68:	607b      	str	r3, [r7, #4]
  return (float)H / 1024.0;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b74:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b98 <BME280_ReadHumidity+0x17c>
 8001b78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8001b7c:	eef0 7a47 	vmov.f32	s15, s14
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	7fc00000 	.word	0x7fc00000
 8001b90:	2000022c 	.word	0x2000022c
 8001b94:	20000208 	.word	0x20000208
 8001b98:	44800000 	.word	0x44800000

08001b9c <BME280_Init>:

//------------------------------------------------
void BME280_Init(void)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
  uint8_t value=0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	71fb      	strb	r3, [r7, #7]
	value = BME280_ReadReg(BME280_REG_ID);
 8001ba6:	20d0      	movs	r0, #208	; 0xd0
 8001ba8:	f7ff fb10 	bl	80011cc <BME280_ReadReg>
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
	if(value != BME280_ID)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b60      	cmp	r3, #96	; 0x60
 8001bb4:	d002      	beq.n	8001bbc <BME280_Init+0x20>
	{
		Error();
 8001bb6:	f7ff fa79 	bl	80010ac <Error>
		return;
 8001bba:	e0e3      	b.n	8001d84 <BME280_Init+0x1e8>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8001bbc:	21b6      	movs	r1, #182	; 0xb6
 8001bbe:	20e0      	movs	r0, #224	; 0xe0
 8001bc0:	f7ff faf2 	bl	80011a8 <BME280_WriteReg>
	while ((BME280_ReadReg(BME280_REGISTER_STATUS) & 0x09) & BME280_STATUS_IM_UPDATE) {} ;
 8001bc4:	bf00      	nop
 8001bc6:	20f3      	movs	r0, #243	; 0xf3
 8001bc8:	f7ff fb00 	bl	80011cc <BME280_ReadReg>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f7      	bne.n	8001bc6 <BME280_Init+0x2a>
	BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001bd6:	496d      	ldr	r1, [pc, #436]	; (8001d8c <BME280_Init+0x1f0>)
 8001bd8:	2088      	movs	r0, #136	; 0x88
 8001bda:	f7ff fb08 	bl	80011ee <BME280_ReadReg_U16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001bde:	496c      	ldr	r1, [pc, #432]	; (8001d90 <BME280_Init+0x1f4>)
 8001be0:	208a      	movs	r0, #138	; 0x8a
 8001be2:	f7ff fb14 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001be6:	496b      	ldr	r1, [pc, #428]	; (8001d94 <BME280_Init+0x1f8>)
 8001be8:	208c      	movs	r0, #140	; 0x8c
 8001bea:	f7ff fb10 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8001bee:	496a      	ldr	r1, [pc, #424]	; (8001d98 <BME280_Init+0x1fc>)
 8001bf0:	208e      	movs	r0, #142	; 0x8e
 8001bf2:	f7ff fafc 	bl	80011ee <BME280_ReadReg_U16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8001bf6:	4969      	ldr	r1, [pc, #420]	; (8001d9c <BME280_Init+0x200>)
 8001bf8:	2090      	movs	r0, #144	; 0x90
 8001bfa:	f7ff fb08 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8001bfe:	4968      	ldr	r1, [pc, #416]	; (8001da0 <BME280_Init+0x204>)
 8001c00:	2092      	movs	r0, #146	; 0x92
 8001c02:	f7ff fb04 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8001c06:	4967      	ldr	r1, [pc, #412]	; (8001da4 <BME280_Init+0x208>)
 8001c08:	2094      	movs	r0, #148	; 0x94
 8001c0a:	f7ff fb00 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8001c0e:	4966      	ldr	r1, [pc, #408]	; (8001da8 <BME280_Init+0x20c>)
 8001c10:	2096      	movs	r0, #150	; 0x96
 8001c12:	f7ff fafc 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8001c16:	4965      	ldr	r1, [pc, #404]	; (8001dac <BME280_Init+0x210>)
 8001c18:	2098      	movs	r0, #152	; 0x98
 8001c1a:	f7ff faf8 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8001c1e:	4964      	ldr	r1, [pc, #400]	; (8001db0 <BME280_Init+0x214>)
 8001c20:	209a      	movs	r0, #154	; 0x9a
 8001c22:	f7ff faf4 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8001c26:	4963      	ldr	r1, [pc, #396]	; (8001db4 <BME280_Init+0x218>)
 8001c28:	209c      	movs	r0, #156	; 0x9c
 8001c2a:	f7ff faf0 	bl	800120e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001c2e:	4962      	ldr	r1, [pc, #392]	; (8001db8 <BME280_Init+0x21c>)
 8001c30:	209e      	movs	r0, #158	; 0x9e
 8001c32:	f7ff faec 	bl	800120e <BME280_ReadReg_S16>
	CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001c36:	20a1      	movs	r0, #161	; 0xa1
 8001c38:	f7ff fac8 	bl	80011cc <BME280_ReadReg>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b52      	ldr	r3, [pc, #328]	; (8001d8c <BME280_Init+0x1f0>)
 8001c42:	761a      	strb	r2, [r3, #24]
	BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001c44:	495d      	ldr	r1, [pc, #372]	; (8001dbc <BME280_Init+0x220>)
 8001c46:	20e1      	movs	r0, #225	; 0xe1
 8001c48:	f7ff fae1 	bl	800120e <BME280_ReadReg_S16>
	CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8001c4c:	20e3      	movs	r0, #227	; 0xe3
 8001c4e:	f7ff fabd 	bl	80011cc <BME280_ReadReg>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b4d      	ldr	r3, [pc, #308]	; (8001d8c <BME280_Init+0x1f0>)
 8001c58:	771a      	strb	r2, [r3, #28]
	CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 8001c5a:	20e4      	movs	r0, #228	; 0xe4
 8001c5c:	f7ff fab6 	bl	80011cc <BME280_ReadReg>
 8001c60:	4603      	mov	r3, r0
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	b21c      	sxth	r4, r3
 8001c66:	20e5      	movs	r0, #229	; 0xe5
 8001c68:	f7ff fab0 	bl	80011cc <BME280_ReadReg>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4323      	orrs	r3, r4
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <BME280_Init+0x1f0>)
 8001c7c:	83da      	strh	r2, [r3, #30]
	CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5 + 1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8001c7e:	20e6      	movs	r0, #230	; 0xe6
 8001c80:	f7ff faa4 	bl	80011cc <BME280_ReadReg>
 8001c84:	4603      	mov	r3, r0
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	b21c      	sxth	r4, r3
 8001c8a:	20e5      	movs	r0, #229	; 0xe5
 8001c8c:	f7ff fa9e 	bl	80011cc <BME280_ReadReg>
 8001c90:	4603      	mov	r3, r0
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4323      	orrs	r3, r4
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <BME280_Init+0x1f0>)
 8001c9e:	841a      	strh	r2, [r3, #32]
	CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001ca0:	20e7      	movs	r0, #231	; 0xe7
 8001ca2:	f7ff fa93 	bl	80011cc <BME280_ReadReg>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b25a      	sxtb	r2, r3
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <BME280_Init+0x1f0>)
 8001cac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001cb0:	20f5      	movs	r0, #245	; 0xf5
 8001cb2:	f7ff fa8b 	bl	80011cc <BME280_ReadReg>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_STBY_1000 & BME280_STBY_MSK;
 8001cbe:	79bb      	ldrb	r3, [r7, #6]
 8001cc0:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001cc4:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CONFIG, reg);
 8001cc6:	79bb      	ldrb	r3, [r7, #6]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	20f5      	movs	r0, #245	; 0xf5
 8001ccc:	f7ff fa6c 	bl	80011a8 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001cd0:	20f5      	movs	r0, #245	; 0xf5
 8001cd2:	f7ff fa7b 	bl	80011cc <BME280_ReadReg>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f023 031c 	bic.w	r3, r3, #28
 8001cdc:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_FILTER_4 & BME280_FILTER_MSK;
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CONFIG, reg);
 8001ce6:	79bb      	ldrb	r3, [r7, #6]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	20f5      	movs	r0, #245	; 0xf5
 8001cec:	f7ff fa5c 	bl	80011a8 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001cf0:	20f4      	movs	r0, #244	; 0xf4
 8001cf2:	f7ff fa6b 	bl	80011cc <BME280_ReadReg>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_T_x4 & BME280_OSRS_T_MSK;
 8001cfe:	79bb      	ldrb	r3, [r7, #6]
 8001d00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d04:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	20f4      	movs	r0, #244	; 0xf4
 8001d0c:	f7ff fa4c 	bl	80011a8 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001d10:	20f4      	movs	r0, #244	; 0xf4
 8001d12:	f7ff fa5b 	bl	80011cc <BME280_ReadReg>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f023 031c 	bic.w	r3, r3, #28
 8001d1c:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_P_x4 & BME280_OSRS_P_MSK;
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	f043 030c 	orr.w	r3, r3, #12
 8001d24:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS, reg);
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	20f4      	movs	r0, #244	; 0xf4
 8001d2c:	f7ff fa3c 	bl	80011a8 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8001d30:	20f2      	movs	r0, #242	; 0xf2
 8001d32:	f7ff fa4b 	bl	80011cc <BME280_ReadReg>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f023 0307 	bic.w	r3, r3, #7
 8001d3c:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_H_x4 & BME280_OSRS_H_MSK;
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	f043 0303 	orr.w	r3, r3, #3
 8001d44:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	20f2      	movs	r0, #242	; 0xf2
 8001d4c:	f7ff fa2c 	bl	80011a8 <BME280_WriteReg>
	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001d50:	20f4      	movs	r0, #244	; 0xf4
 8001d52:	f7ff fa3b 	bl	80011cc <BME280_ReadReg>
 8001d56:	4603      	mov	r3, r0
 8001d58:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	20f4      	movs	r0, #244	; 0xf4
 8001d60:	f7ff fa22 	bl	80011a8 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001d64:	20f4      	movs	r0, #244	; 0xf4
 8001d66:	f7ff fa31 	bl	80011cc <BME280_ReadReg>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f023 0303 	bic.w	r3, r3, #3
 8001d70:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_MODE_NORMAL & BME280_MODE_MSK;
 8001d72:	79bb      	ldrb	r3, [r7, #6]
 8001d74:	f043 0303 	orr.w	r3, r3, #3
 8001d78:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	20f4      	movs	r0, #244	; 0xf4
 8001d80:	f7ff fa12 	bl	80011a8 <BME280_WriteReg>
}
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000208 	.word	0x20000208
 8001d90:	2000020a 	.word	0x2000020a
 8001d94:	2000020c 	.word	0x2000020c
 8001d98:	2000020e 	.word	0x2000020e
 8001d9c:	20000210 	.word	0x20000210
 8001da0:	20000212 	.word	0x20000212
 8001da4:	20000214 	.word	0x20000214
 8001da8:	20000216 	.word	0x20000216
 8001dac:	20000218 	.word	0x20000218
 8001db0:	2000021a 	.word	0x2000021a
 8001db4:	2000021c 	.word	0x2000021c
 8001db8:	2000021e 	.word	0x2000021e
 8001dbc:	20000222 	.word	0x20000222

08001dc0 <PM25_GetData>:
#include "PM25.h"
/*
   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31
  S0  S1  L0  L1  D1  D1  D2  D2  D3  D3  D4  D4  D5  D5  D6  D6  D7  D7  D8  D8  D9  D9 D10 D10 D11 D11 D12 D12 D13 D13  CS  CS
*/
uint16_t PM25_GetData(uint8_t *Data_Buffer, uint16_t Size) {
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
	for (int ii = 0; ii < Size; ii++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e007      	b.n	8001de2 <PM25_GetData+0x22>
		Data_Buffer[ii] = 0;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
	for (int ii = 0; ii < Size; ii++) {
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3301      	adds	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dbf3      	blt.n	8001dd2 <PM25_GetData+0x12>
	}
	uint32_t uart_tm_out = HAL_GetTick();
 8001dea:	f001 fe8b 	bl	8003b04 <HAL_GetTick>
 8001dee:	60b8      	str	r0, [r7, #8]
	while ((uart_tm_out + 2000) > HAL_GetTick()) {
 8001df0:	e02b      	b.n	8001e4a <PM25_GetData+0x8a>
		if ((HAL_UART_Receive(&PM25_UART_PORT, Data_Buffer, 4, 20) == HAL_OK)
 8001df2:	2314      	movs	r3, #20
 8001df4:	2204      	movs	r2, #4
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	481a      	ldr	r0, [pc, #104]	; (8001e64 <PM25_GetData+0xa4>)
 8001dfa:	f007 fe17 	bl	8009a2c <HAL_UART_Receive>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d122      	bne.n	8001e4a <PM25_GetData+0x8a>
						&& (Data_Buffer[0] == 0x42 && Data_Buffer[1] == 0x4d && Data_Buffer[2] == 0x00 && Data_Buffer[3] == 0x1c )) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b42      	cmp	r3, #66	; 0x42
 8001e0a:	d11e      	bne.n	8001e4a <PM25_GetData+0x8a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b4d      	cmp	r3, #77	; 0x4d
 8001e14:	d119      	bne.n	8001e4a <PM25_GetData+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d114      	bne.n	8001e4a <PM25_GetData+0x8a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3303      	adds	r3, #3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b1c      	cmp	r3, #28
 8001e28:	d10f      	bne.n	8001e4a <PM25_GetData+0x8a>
			if (HAL_UART_Receive(&PM25_UART_PORT, Data_Buffer + 4, Size - 4, 30) == HAL_OK) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	1d19      	adds	r1, r3, #4
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	3b04      	subs	r3, #4
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	231e      	movs	r3, #30
 8001e36:	480b      	ldr	r0, [pc, #44]	; (8001e64 <PM25_GetData+0xa4>)
 8001e38:	f007 fdf8 	bl	8009a2c <HAL_UART_Receive>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <PM25_GetData+0x86>
				return 1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00a      	b.n	8001e5c <PM25_GetData+0x9c>
			}
			return 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e008      	b.n	8001e5c <PM25_GetData+0x9c>
	while ((uart_tm_out + 2000) > HAL_GetTick()) {
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8001e50:	f001 fe58 	bl	8003b04 <HAL_GetTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	429c      	cmp	r4, r3
 8001e58:	d8cb      	bhi.n	8001df2 <PM25_GetData+0x32>
		}
	}
	return 0;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}
 8001e64:	2000043c 	.word	0x2000043c

08001e68 <moduleReinit>:
  HAL_Delay(10000);
  uint8_t buf[3] = {0};
  return SCD4X_CONCAT_BYTES(buf[0], buf[1]);
}

void moduleReinit(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  SCDwriteData(SCD4X_REINIT, NULL, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f243 6046 	movw	r0, #13894	; 0x3646
 8001e74:	f000 f86c 	bl	8001f50 <SCDwriteData>
  HAL_Delay(20);
 8001e78:	2014      	movs	r0, #20
 8001e7a:	f001 fe4f 	bl	8003b1c <HAL_Delay>
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <enablePeriodMeasure>:
  } else if(SCD4X_MEASURE_SINGLE_SHOT_RHT_ONLY == mode) {
	  HAL_Delay(50);
  }
}

void enablePeriodMeasure(uint16_t mode) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
	uint8_t trData[2];
	trData[1] = mode & 0xFF;
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	737b      	strb	r3, [r7, #13]
	trData[0] = (mode >> 8) & 0xFF;
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&SCD4X_I2C_PORT, SCD4X_I2C_ADDR, trData, 2, 100);
 8001e9e:	f107 020c 	add.w	r2, r7, #12
 8001ea2:	2364      	movs	r3, #100	; 0x64
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	21c4      	movs	r1, #196	; 0xc4
 8001eaa:	4808      	ldr	r0, [pc, #32]	; (8001ecc <enablePeriodMeasure+0x48>)
 8001eac:	f003 fcdc 	bl	8005868 <HAL_I2C_Master_Transmit>
  //SCDwriteData(mode, NULL, 0);
  if(SCD4X_STOP_PERIODIC_MEASURE == mode)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	f643 7286 	movw	r2, #16262	; 0x3f86
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d103      	bne.n	8001ec2 <enablePeriodMeasure+0x3e>
	HAL_Delay(500);   // Give it some time to switch mode
 8001eba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ebe:	f001 fe2d 	bl	8003b1c <HAL_Delay>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000338 	.word	0x20000338

08001ed0 <getSerialNumber>:
void persistSettings(void) {
  SCDwriteData(SCD4X_PERSIST_SETTINGS, NULL, 0);
  HAL_Delay(800);
}

bool getSerialNumber(uint16_t * wordBuf) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  bool ret = true;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	75fb      	strb	r3, [r7, #23]
  uint8_t buf[9] = {0};
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	711a      	strb	r2, [r3, #4]
  if(sizeof(buf) != SCDreadData(SCD4X_GET_SERIAL_NUMBER, buf, sizeof(buf))) {
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	2209      	movs	r2, #9
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f243 6082 	movw	r0, #13954	; 0x3682
 8001ef6:	f000 f845 	bl	8001f84 <SCDreadData>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b09      	cmp	r3, #9
 8001efe:	d001      	beq.n	8001f04 <getSerialNumber+0x34>
    ret = false;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75fb      	strb	r3, [r7, #23]
  }
  wordBuf[0] = SCD4X_CONCAT_BYTES(buf[0], buf[1]);
 8001f04:	7b3b      	ldrb	r3, [r7, #12]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	7b7b      	ldrb	r3, [r7, #13]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	801a      	strh	r2, [r3, #0]
  wordBuf[1] = SCD4X_CONCAT_BYTES(buf[3], buf[4]);
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	7c3b      	ldrb	r3, [r7, #16]
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	801a      	strh	r2, [r3, #0]
  wordBuf[2] = SCD4X_CONCAT_BYTES(buf[6], buf[7]);
 8001f2e:	7cbb      	ldrb	r3, [r7, #18]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	b292      	uxth	r2, r2
 8001f42:	801a      	strh	r2, [r3, #0]
  return ret;
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <SCDwriteData>:

/****************************** Read/Write Command Function ********************************/

void SCDwriteData(uint16_t cmd, uint8_t *pBuf, size_t size) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af04      	add	r7, sp, #16
 8001f56:	4603      	mov	r3, r0
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	81fb      	strh	r3, [r7, #14]
  HAL_I2C_Mem_Write(&SCD4X_I2C_PORT, SCD4X_I2C_ADDR, cmd, 2, NULL, 0, 100);
 8001f5e:	89fa      	ldrh	r2, [r7, #14]
 8001f60:	2364      	movs	r3, #100	; 0x64
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	2300      	movs	r3, #0
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	21c4      	movs	r1, #196	; 0xc4
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <SCDwriteData+0x30>)
 8001f72:	f003 fe63 	bl	8005c3c <HAL_I2C_Mem_Write>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000338 	.word	0x20000338

08001f84 <SCDreadData>:

size_t SCDreadData(uint16_t cmd, uint8_t *pBuf, size_t size) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af04      	add	r7, sp, #16
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	81fb      	strh	r3, [r7, #14]
  HAL_I2C_Mem_Write(&SCD4X_I2C_PORT, SCD4X_I2C_ADDR, cmd, 2, NULL, 0, 100);
 8001f92:	89fa      	ldrh	r2, [r7, #14]
 8001f94:	2364      	movs	r3, #100	; 0x64
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	21c4      	movs	r1, #196	; 0xc4
 8001fa4:	4808      	ldr	r0, [pc, #32]	; (8001fc8 <SCDreadData+0x44>)
 8001fa6:	f003 fe49 	bl	8005c3c <HAL_I2C_Mem_Write>
  HAL_I2C_Master_Receive(&SCD4X_I2C_PORT, SCD4X_I2C_ADDR, pBuf, size, 100);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2264      	movs	r2, #100	; 0x64
 8001fb0:	9200      	str	r2, [sp, #0]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	21c4      	movs	r1, #196	; 0xc4
 8001fb6:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <SCDreadData+0x44>)
 8001fb8:	f003 fd4a 	bl	8005a50 <HAL_I2C_Master_Receive>
  return size;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000338 	.word	0x20000338

08001fcc <readMeasurement>:

void readMeasurement(sSensorMeasurement_t * data) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint8_t buf[9] = {0};
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	711a      	strb	r2, [r3, #4]
  SCDreadData(SCD4X_READ_MEASUREMENT, buf, sizeof(buf));
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2209      	movs	r2, #9
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f64e 4005 	movw	r0, #60421	; 0xec05
 8001fee:	f7ff ffc9 	bl	8001f84 <SCDreadData>
  data->CO2ppm = SCD4X_CONCAT_BYTES(buf[0], buf[1]);
 8001ff2:	7b3b      	ldrb	r3, [r7, #12]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	7b7b      	ldrb	r3, [r7, #13]
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	801a      	strh	r2, [r3, #0]
  data->temp = -45 + 175 * (float)(SCD4X_CONCAT_BYTES(buf[3], buf[4])) / ((uint32_t)1 << 16);
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	7c3a      	ldrb	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002016:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002064 <readMeasurement+0x98>
 800201a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800201e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002068 <readMeasurement+0x9c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800206c <readMeasurement+0xa0>
 800202a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	edc3 7a01 	vstr	s15, [r3, #4]
  data->humidity = 100 * (float)(SCD4X_CONCAT_BYTES(buf[6], buf[7])) / ((uint32_t)1 << 16);
 8002034:	7cbb      	ldrb	r3, [r7, #18]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	7cfa      	ldrb	r2, [r7, #19]
 800203a:	4313      	orrs	r3, r2
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002044:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002070 <readMeasurement+0xa4>
 8002048:	ee27 7a87 	vmul.f32	s14, s15, s14
 800204c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002068 <readMeasurement+0x9c>
 8002050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	432f0000 	.word	0x432f0000
 8002068:	47800000 	.word	0x47800000
 800206c:	42340000 	.word	0x42340000
 8002070:	42c80000 	.word	0x42c80000

08002074 <ZE08_readData>:
#include "ZE08.h"

uint8_t ZE08_Buffer[9];

//uint16_t ZE08_readData(uint8_t *ZE08_Buffer, uint16_t Size) {
uint16_t ZE08_readData() {
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
	int Size = sizeof(ZE08_Buffer);
 800207a:	2309      	movs	r3, #9
 800207c:	60bb      	str	r3, [r7, #8]
	for (int ii = 0; ii < Size; ii++) {
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e007      	b.n	8002094 <ZE08_readData+0x20>
		ZE08_Buffer[ii] = 0;
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <ZE08_readData+0xac>)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
	for (int ii = 0; ii < Size; ii++) {
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3301      	adds	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	dbf3      	blt.n	8002084 <ZE08_readData+0x10>
	}
	uint32_t uart_tm_out = HAL_GetTick();
 800209c:	f001 fd32 	bl	8003b04 <HAL_GetTick>
 80020a0:	6078      	str	r0, [r7, #4]
	while ((uart_tm_out + 2000) > HAL_GetTick()) {
 80020a2:	e02e      	b.n	8002102 <ZE08_readData+0x8e>
		if ((HAL_UART_Receive(&ZE08_UART_PORT, ZE08_Buffer, 3, 20) == HAL_OK)
 80020a4:	2314      	movs	r3, #20
 80020a6:	2203      	movs	r2, #3
 80020a8:	491d      	ldr	r1, [pc, #116]	; (8002120 <ZE08_readData+0xac>)
 80020aa:	481e      	ldr	r0, [pc, #120]	; (8002124 <ZE08_readData+0xb0>)
 80020ac:	f007 fcbe 	bl	8009a2c <HAL_UART_Receive>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d124      	bne.n	8002100 <ZE08_readData+0x8c>
				&& (ZE08_Buffer[0] == 0xff && ZE08_Buffer[1] == 0x17 && ZE08_Buffer[2] == 0x04)) {
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <ZE08_readData+0xac>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2bff      	cmp	r3, #255	; 0xff
 80020bc:	d120      	bne.n	8002100 <ZE08_readData+0x8c>
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <ZE08_readData+0xac>)
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	2b17      	cmp	r3, #23
 80020c4:	d11c      	bne.n	8002100 <ZE08_readData+0x8c>
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <ZE08_readData+0xac>)
 80020c8:	789b      	ldrb	r3, [r3, #2]
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d118      	bne.n	8002100 <ZE08_readData+0x8c>
			if (HAL_UART_Receive(&ZE08_UART_PORT, ZE08_Buffer + 3, Size - 3, 30) == HAL_OK) {
 80020ce:	4916      	ldr	r1, [pc, #88]	; (8002128 <ZE08_readData+0xb4>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b03      	subs	r3, #3
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	231e      	movs	r3, #30
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <ZE08_readData+0xb0>)
 80020dc:	f007 fca6 	bl	8009a2c <HAL_UART_Receive>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <ZE08_readData+0x88>
				return  ZE08_Buffer[4] << 8 | ZE08_Buffer[5];
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <ZE08_readData+0xac>)
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	b21a      	sxth	r2, r3
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <ZE08_readData+0xac>)
 80020f0:	795b      	ldrb	r3, [r3, #5]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	e00c      	b.n	8002116 <ZE08_readData+0xa2>
			} else {
				return 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e00a      	b.n	8002116 <ZE08_readData+0xa2>
			}
		} else {
			continue;
 8002100:	bf00      	nop
	while ((uart_tm_out + 2000) > HAL_GetTick()) {
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8002108:	f001 fcfc 	bl	8003b04 <HAL_GetTick>
 800210c:	4603      	mov	r3, r0
 800210e:	429c      	cmp	r4, r3
 8002110:	d8c8      	bhi.n	80020a4 <ZE08_readData+0x30>
		}
	}
	return 0xFFFF;
 8002112:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop
 8002120:	20000230 	.word	0x20000230
 8002124:	200004c4 	.word	0x200004c4
 8002128:	20000233 	.word	0x20000233
 800212c:	00000000 	.word	0x00000000

08002130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002130:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002134:	ed2d 8b02 	vpush	{d8}
 8002138:	b08e      	sub	sp, #56	; 0x38
 800213a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213c:	f001 fc88 	bl	8003a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002140:	f000 fc5a 	bl	80029f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002144:	f000 fea4 	bl	8002e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8002148:	f000 fe84 	bl	8002e54 <MX_DMA_Init>
  MX_SPI1_Init();
 800214c:	f000 fd66 	bl	8002c1c <MX_SPI1_Init>
  MX_I2C1_Init();
 8002150:	f000 fd24 	bl	8002b9c <MX_I2C1_Init>
  MX_TIM4_Init();
 8002154:	f000 fda0 	bl	8002c98 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002158:	f000 fe4c 	bl	8002df4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800215c:	f000 fe1a 	bl	8002d94 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8002160:	f000 fcac 	bl	8002abc <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8002164:	4880      	ldr	r0, [pc, #512]	; (8002368 <main+0x238>)
 8002166:	f006 fb8b 	bl	8008880 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	2104      	movs	r1, #4
 800216e:	487f      	ldr	r0, [pc, #508]	; (800236c <main+0x23c>)
 8002170:	f003 fab0 	bl	80056d4 <HAL_GPIO_WritePin>
	//HAL_Delay(10);
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  uint16_t serialBufer[3];
  serialBufer[0] = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	80bb      	strh	r3, [r7, #4]
  serialBufer[1] = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	80fb      	strh	r3, [r7, #6]
  serialBufer[2] = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	813b      	strh	r3, [r7, #8]

  ST7735_Init();
 8002180:	f000 ffd6 	bl	8003130 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8002184:	2000      	movs	r0, #0
 8002186:	f001 f921 	bl	80033cc <ST7735_FillScreen>

  ST7735_WriteString(0, 0, "SCD41 init  ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800218a:	4b79      	ldr	r3, [pc, #484]	; (8002370 <main+0x240>)
 800218c:	2200      	movs	r2, #0
 800218e:	9202      	str	r2, [sp, #8]
 8002190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002194:	9201      	str	r2, [sp, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	9200      	str	r2, [sp, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a75      	ldr	r2, [pc, #468]	; (8002374 <main+0x244>)
 800219e:	2100      	movs	r1, #0
 80021a0:	2000      	movs	r0, #0
 80021a2:	f001 f856 	bl	8003252 <ST7735_WriteString>
  moduleReinit();
 80021a6:	f7ff fe5f 	bl	8001e68 <moduleReinit>
  enablePeriodMeasure(SCD4X_STOP_PERIODIC_MEASURE);  // Write: C4 0 D:3F 0 D:86 0
 80021aa:	f643 7086 	movw	r0, #16262	; 0x3f86
 80021ae:	f7ff fe69 	bl	8001e84 <enablePeriodMeasure>
  HAL_Delay(500);
 80021b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021b6:	f001 fcb1 	bl	8003b1c <HAL_Delay>
  if (getSerialNumber(serialBufer)) { // Write: C4 0 D:36 0 D:82 0 Read: C5 0 D:EA 0 D:AE 0 D:FA 0 D:B7 0 D:07 0 D:29 0 D:3B 0 D:BF Write: C4 0 D:21 0 D:B1 0
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fe87 	bl	8001ed0 <getSerialNumber>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00e      	beq.n	80021e6 <main+0xb6>
	ST7735_WriteString(96, 0, "Ok", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80021c8:	4b69      	ldr	r3, [pc, #420]	; (8002370 <main+0x240>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	9202      	str	r2, [sp, #8]
 80021ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80021d2:	9201      	str	r2, [sp, #4]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	9200      	str	r2, [sp, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a67      	ldr	r2, [pc, #412]	; (8002378 <main+0x248>)
 80021dc:	2100      	movs	r1, #0
 80021de:	2060      	movs	r0, #96	; 0x60
 80021e0:	f001 f837 	bl	8003252 <ST7735_WriteString>
 80021e4:	e00d      	b.n	8002202 <main+0xd2>
  } else {
	ST7735_WriteString(96, 0, "Fail", Font_7x10, ST7735_RED, ST7735_BLACK);
 80021e6:	4b62      	ldr	r3, [pc, #392]	; (8002370 <main+0x240>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	9202      	str	r2, [sp, #8]
 80021ec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80021f0:	9201      	str	r2, [sp, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	9200      	str	r2, [sp, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a60      	ldr	r2, [pc, #384]	; (800237c <main+0x24c>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	2060      	movs	r0, #96	; 0x60
 80021fe:	f001 f828 	bl	8003252 <ST7735_WriteString>
  }
  enablePeriodMeasure(SCD4X_START_PERIODIC_MEASURE);
 8002202:	f242 10b1 	movw	r0, #8625	; 0x21b1
 8002206:	f7ff fe3d 	bl	8001e84 <enablePeriodMeasure>

  ST7735_WriteString(0, 11, "BME280 init ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800220a:	4b59      	ldr	r3, [pc, #356]	; (8002370 <main+0x240>)
 800220c:	2200      	movs	r2, #0
 800220e:	9202      	str	r2, [sp, #8]
 8002210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002214:	9201      	str	r2, [sp, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	9200      	str	r2, [sp, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a58      	ldr	r2, [pc, #352]	; (8002380 <main+0x250>)
 800221e:	210b      	movs	r1, #11
 8002220:	2000      	movs	r0, #0
 8002222:	f001 f816 	bl	8003252 <ST7735_WriteString>
  BME280_Init();
 8002226:	f7ff fcb9 	bl	8001b9c <BME280_Init>
  ST7735_WriteString(96, 11, "Ok", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800222a:	4b51      	ldr	r3, [pc, #324]	; (8002370 <main+0x240>)
 800222c:	2200      	movs	r2, #0
 800222e:	9202      	str	r2, [sp, #8]
 8002230:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002234:	9201      	str	r2, [sp, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	9200      	str	r2, [sp, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <main+0x248>)
 800223e:	210b      	movs	r1, #11
 8002240:	2060      	movs	r0, #96	; 0x60
 8002242:	f001 f806 	bl	8003252 <ST7735_WriteString>

  uint32_t vvv = AGS02MA_getFirmwareVersion();
 8002246:	f7fe feb9 	bl	8000fbc <AGS02MA_getFirmwareVersion>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24
  sprintf(text1306, "VER:%lu  ", vvv);
 800224c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224e:	494d      	ldr	r1, [pc, #308]	; (8002384 <main+0x254>)
 8002250:	484d      	ldr	r0, [pc, #308]	; (8002388 <main+0x258>)
 8002252:	f008 fe1f 	bl	800ae94 <siprintf>
  ST7735_WriteString(0, 44, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002256:	4b46      	ldr	r3, [pc, #280]	; (8002370 <main+0x240>)
 8002258:	2200      	movs	r2, #0
 800225a:	9202      	str	r2, [sp, #8]
 800225c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002260:	9201      	str	r2, [sp, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	9200      	str	r2, [sp, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a47      	ldr	r2, [pc, #284]	; (8002388 <main+0x258>)
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	2000      	movs	r0, #0
 800226e:	f000 fff0 	bl	8003252 <ST7735_WriteString>

  HAL_Delay(500);
 8002272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002276:	f001 fc51 	bl	8003b1c <HAL_Delay>
  ST7735_FillScreen(ST7735_BLACK);
 800227a:	2000      	movs	r0, #0
 800227c:	f001 f8a6 	bl	80033cc <ST7735_FillScreen>
  CO2Interval = MEAS_CO2_INTERVAL2;
 8002280:	4b42      	ldr	r3, [pc, #264]	; (800238c <main+0x25c>)
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	601a      	str	r2, [r3, #0]
  CO2Counter = HAL_GetTick();
 8002288:	f001 fc3c 	bl	8003b04 <HAL_GetTick>
 800228c:	4603      	mov	r3, r0
 800228e:	4a40      	ldr	r2, [pc, #256]	; (8002390 <main+0x260>)
 8002290:	6013      	str	r3, [r2, #0]
  scint_counter = 0;
 8002292:	4b40      	ldr	r3, [pc, #256]	; (8002394 <main+0x264>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
  scint_timer = CO2Counter;
 8002298:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <main+0x260>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3e      	ldr	r2, [pc, #248]	; (8002398 <main+0x268>)
 800229e:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	if (HAL_GetTick() - CO2Counter > CO2Interval) {
 80022a0:	f001 fc30 	bl	8003b04 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <main+0x260>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1ad2      	subs	r2, r2, r3
 80022ac:	4b37      	ldr	r3, [pc, #220]	; (800238c <main+0x25c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f240 808b 	bls.w	80023cc <main+0x29c>
	  		CO2Counter = HAL_GetTick();
 80022b6:	f001 fc25 	bl	8003b04 <HAL_GetTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a34      	ldr	r2, [pc, #208]	; (8002390 <main+0x260>)
 80022be:	6013      	str	r3, [r2, #0]
	  		readMeasurement(&messuremetData);
 80022c0:	4836      	ldr	r0, [pc, #216]	; (800239c <main+0x26c>)
 80022c2:	f7ff fe83 	bl	8001fcc <readMeasurement>
			if (messuremetData.CO2ppm > 0) {
 80022c6:	4b35      	ldr	r3, [pc, #212]	; (800239c <main+0x26c>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <main+0x1b0>
				CO2 = messuremetData.CO2ppm;
 80022ce:	4b33      	ldr	r3, [pc, #204]	; (800239c <main+0x26c>)
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <main+0x270>)
 80022d4:	801a      	strh	r2, [r3, #0]
				CO2Interval = MEAS_CO2_INTERVAL2;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <main+0x25c>)
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e003      	b.n	80022e8 <main+0x1b8>
			} else {
				CO2Interval = MEAS_CO2_INTERVAL1;
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <main+0x25c>)
 80022e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022e6:	601a      	str	r2, [r3, #0]
			}
			sprintf(text1306, "CO2:%dppm  ", CO2);
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <main+0x270>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	492d      	ldr	r1, [pc, #180]	; (80023a4 <main+0x274>)
 80022f0:	4825      	ldr	r0, [pc, #148]	; (8002388 <main+0x258>)
 80022f2:	f008 fdcf 	bl	800ae94 <siprintf>
			if (CO2 < CO2_NOMINAL) {
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <main+0x270>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002302:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80023a8 <main+0x278>
 8002306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	d50e      	bpl.n	800232e <main+0x1fe>
				ST7735_WriteString(0, 0, text1306, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <main+0x240>)
 8002312:	2200      	movs	r2, #0
 8002314:	9202      	str	r2, [sp, #8]
 8002316:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800231a:	9201      	str	r2, [sp, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	9200      	str	r2, [sp, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a19      	ldr	r2, [pc, #100]	; (8002388 <main+0x258>)
 8002324:	2100      	movs	r1, #0
 8002326:	2000      	movs	r0, #0
 8002328:	f000 ff93 	bl	8003252 <ST7735_WriteString>
 800232c:	e04e      	b.n	80023cc <main+0x29c>
			} else if (CO2 < CO2_MAXIMUM) {
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <main+0x270>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80023ac <main+0x27c>
 800233e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	d533      	bpl.n	80023b0 <main+0x280>
				ST7735_WriteString(0, 0, text1306, Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <main+0x240>)
 800234a:	2200      	movs	r2, #0
 800234c:	9202      	str	r2, [sp, #8]
 800234e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002352:	9201      	str	r2, [sp, #4]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	9200      	str	r2, [sp, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <main+0x258>)
 800235c:	2100      	movs	r1, #0
 800235e:	2000      	movs	r0, #0
 8002360:	f000 ff77 	bl	8003252 <ST7735_WriteString>
 8002364:	e032      	b.n	80023cc <main+0x29c>
 8002366:	bf00      	nop
 8002368:	200003f0 	.word	0x200003f0
 800236c:	48000400 	.word	0x48000400
 8002370:	20000000 	.word	0x20000000
 8002374:	0800d370 	.word	0x0800d370
 8002378:	0800d380 	.word	0x0800d380
 800237c:	0800d384 	.word	0x0800d384
 8002380:	0800d38c 	.word	0x0800d38c
 8002384:	0800d39c 	.word	0x0800d39c
 8002388:	20000260 	.word	0x20000260
 800238c:	20000240 	.word	0x20000240
 8002390:	2000023c 	.word	0x2000023c
 8002394:	20000244 	.word	0x20000244
 8002398:	20000248 	.word	0x20000248
 800239c:	20000254 	.word	0x20000254
 80023a0:	20000250 	.word	0x20000250
 80023a4:	0800d3a8 	.word	0x0800d3a8
 80023a8:	44480000 	.word	0x44480000
 80023ac:	447a0000 	.word	0x447a0000
			} else {
				ST7735_WriteString(0, 0, text1306, Font_7x10, ST7735_RED, ST7735_BLACK);
 80023b0:	4b9b      	ldr	r3, [pc, #620]	; (8002620 <main+0x4f0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	9202      	str	r2, [sp, #8]
 80023b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80023ba:	9201      	str	r2, [sp, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	9200      	str	r2, [sp, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a98      	ldr	r2, [pc, #608]	; (8002624 <main+0x4f4>)
 80023c4:	2100      	movs	r1, #0
 80023c6:	2000      	movs	r0, #0
 80023c8:	f000 ff43 	bl	8003252 <ST7735_WriteString>
			}
	  	}

	  	//memset(text1306, 0, sizeof(text1306));
	  	if (HAL_GetTick() - scint_timer > 0 ) {
 80023cc:	f001 fb9a 	bl	8003b04 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b95      	ldr	r3, [pc, #596]	; (8002628 <main+0x4f8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	f000 8094 	beq.w	8002504 <main+0x3d4>
			float mmm = (float) scint_counter / (float) (HAL_GetTick() - scint_timer) * 1000.0f;
 80023dc:	4b93      	ldr	r3, [pc, #588]	; (800262c <main+0x4fc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80023e8:	f001 fb8c 	bl	8003b04 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b8e      	ldr	r3, [pc, #568]	; (8002628 <main+0x4f8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023fc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002400:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002630 <main+0x500>
 8002404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002408:	edc7 7a08 	vstr	s15, [r7, #32]
			sprintf(text1306, "cps:%.2f %.1f%% ", mmm , 300.f / sqrt((float) scint_counter));
 800240c:	6a38      	ldr	r0, [r7, #32]
 800240e:	f7fe f89b 	bl	8000548 <__aeabi_f2d>
 8002412:	4604      	mov	r4, r0
 8002414:	460d      	mov	r5, r1
 8002416:	4b85      	ldr	r3, [pc, #532]	; (800262c <main+0x4fc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	ee17 0a90 	vmov	r0, s15
 8002426:	f7fe f88f 	bl	8000548 <__aeabi_f2d>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	ec43 2b10 	vmov	d0, r2, r3
 8002432:	f00a feb1 	bl	800d198 <sqrt>
 8002436:	ec53 2b10 	vmov	r2, r3, d0
 800243a:	a177      	add	r1, pc, #476	; (adr r1, 8002618 <main+0x4e8>)
 800243c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002440:	f7fe fa04 	bl	800084c <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	e9cd 2300 	strd	r2, r3, [sp]
 800244c:	4622      	mov	r2, r4
 800244e:	462b      	mov	r3, r5
 8002450:	4978      	ldr	r1, [pc, #480]	; (8002634 <main+0x504>)
 8002452:	4874      	ldr	r0, [pc, #464]	; (8002624 <main+0x4f4>)
 8002454:	f008 fd1e 	bl	800ae94 <siprintf>
			if (mmm < NORMAL_LEVEL) {
 8002458:	edd7 7a08 	vldr	s15, [r7, #32]
 800245c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	d50e      	bpl.n	8002488 <main+0x358>
				ST7735_WriteString(0, 11, text1306, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <main+0x4f0>)
 800246c:	2200      	movs	r2, #0
 800246e:	9202      	str	r2, [sp, #8]
 8002470:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002474:	9201      	str	r2, [sp, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	9200      	str	r2, [sp, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a69      	ldr	r2, [pc, #420]	; (8002624 <main+0x4f4>)
 800247e:	210b      	movs	r1, #11
 8002480:	2000      	movs	r0, #0
 8002482:	f000 fee6 	bl	8003252 <ST7735_WriteString>
 8002486:	e03d      	b.n	8002504 <main+0x3d4>
			} else if (mmm < WARN_LEVEL) {
 8002488:	edd7 7a08 	vldr	s15, [r7, #32]
 800248c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002638 <main+0x508>
 8002490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	d50e      	bpl.n	80024b8 <main+0x388>
				ST7735_WriteString(0, 11, text1306, Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 800249a:	4b61      	ldr	r3, [pc, #388]	; (8002620 <main+0x4f0>)
 800249c:	2200      	movs	r2, #0
 800249e:	9202      	str	r2, [sp, #8]
 80024a0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80024a4:	9201      	str	r2, [sp, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	9200      	str	r2, [sp, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a5d      	ldr	r2, [pc, #372]	; (8002624 <main+0x4f4>)
 80024ae:	210b      	movs	r1, #11
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 fece 	bl	8003252 <ST7735_WriteString>
 80024b6:	e025      	b.n	8002504 <main+0x3d4>
			} else if (mmm < CRIT_LEVEL) {
 80024b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024bc:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800263c <main+0x50c>
 80024c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	d50e      	bpl.n	80024e8 <main+0x3b8>
				ST7735_WriteString(0, 11, text1306, Font_7x10, ST7735_RED, ST7735_BLACK);
 80024ca:	4b55      	ldr	r3, [pc, #340]	; (8002620 <main+0x4f0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	9202      	str	r2, [sp, #8]
 80024d0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80024d4:	9201      	str	r2, [sp, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	9200      	str	r2, [sp, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a51      	ldr	r2, [pc, #324]	; (8002624 <main+0x4f4>)
 80024de:	210b      	movs	r1, #11
 80024e0:	2000      	movs	r0, #0
 80024e2:	f000 feb6 	bl	8003252 <ST7735_WriteString>
 80024e6:	e00d      	b.n	8002504 <main+0x3d4>
			} else {
				ST7735_WriteString(0, 11, text1306, Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <main+0x4f0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	9202      	str	r2, [sp, #8]
 80024ee:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80024f2:	9201      	str	r2, [sp, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a4a      	ldr	r2, [pc, #296]	; (8002624 <main+0x4f4>)
 80024fc:	210b      	movs	r1, #11
 80024fe:	2000      	movs	r0, #0
 8002500:	f000 fea7 	bl	8003252 <ST7735_WriteString>
			}
		}

		temperature = BME280_ReadTemperature();
 8002504:	f7fe feea 	bl	80012dc <BME280_ReadTemperature>
 8002508:	eef0 7a40 	vmov.f32	s15, s0
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <main+0x510>)
 800250e:	edc3 7a00 	vstr	s15, [r3]
		pressure = BME280_ReadPressure() * 0.00750063755419211f; //0.00750063755419211
 8002512:	f7fe ff55 	bl	80013c0 <BME280_ReadPressure>
 8002516:	eef0 7a40 	vmov.f32	s15, s0
 800251a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002644 <main+0x514>
 800251e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <main+0x518>)
 8002524:	edc3 7a00 	vstr	s15, [r3]
		humidity = BME280_ReadHumidity();
 8002528:	f7ff fa78 	bl	8001a1c <BME280_ReadHumidity>
 800252c:	eef0 7a40 	vmov.f32	s15, s0
 8002530:	4b46      	ldr	r3, [pc, #280]	; (800264c <main+0x51c>)
 8002532:	edc3 7a00 	vstr	s15, [r3]
		sprintf(text1306, "T:%.0fC P:%.0f H:%.0f%% ", temperature, pressure, humidity);
 8002536:	4b42      	ldr	r3, [pc, #264]	; (8002640 <main+0x510>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f804 	bl	8000548 <__aeabi_f2d>
 8002540:	4680      	mov	r8, r0
 8002542:	4689      	mov	r9, r1
 8002544:	4b40      	ldr	r3, [pc, #256]	; (8002648 <main+0x518>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fffd 	bl	8000548 <__aeabi_f2d>
 800254e:	4604      	mov	r4, r0
 8002550:	460d      	mov	r5, r1
 8002552:	4b3e      	ldr	r3, [pc, #248]	; (800264c <main+0x51c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fff6 	bl	8000548 <__aeabi_f2d>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002564:	e9cd 4500 	strd	r4, r5, [sp]
 8002568:	4642      	mov	r2, r8
 800256a:	464b      	mov	r3, r9
 800256c:	4938      	ldr	r1, [pc, #224]	; (8002650 <main+0x520>)
 800256e:	482d      	ldr	r0, [pc, #180]	; (8002624 <main+0x4f4>)
 8002570:	f008 fc90 	bl	800ae94 <siprintf>
		ST7735_WriteString(0, 22, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <main+0x4f0>)
 8002576:	2200      	movs	r2, #0
 8002578:	9202      	str	r2, [sp, #8]
 800257a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257e:	9201      	str	r2, [sp, #4]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	9200      	str	r2, [sp, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a27      	ldr	r2, [pc, #156]	; (8002624 <main+0x4f4>)
 8002588:	2116      	movs	r1, #22
 800258a:	2000      	movs	r0, #0
 800258c:	f000 fe61 	bl	8003252 <ST7735_WriteString>

		/* TVOC
		 *  Норма содержания летучих веществ в воздухе - до 0.5 mg/m3
		 *  0.8 mg/m3 -- предельное значение.
		 */
		if (HAL_GetTick() > TVOC_TIMEOUT) {
 8002590:	f001 fab8 	bl	8003b04 <HAL_GetTick>
 8002594:	4603      	mov	r3, r0
 8002596:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <main+0x524>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d95f      	bls.n	800265c <main+0x52c>
			uint32_t tvoc = AGS02MA_getTVOC();
 800259c:	f7fe fd26 	bl	8000fec <AGS02MA_getTVOC>
 80025a0:	61b8      	str	r0, [r7, #24]
			sprintf(text1306, "TVOC:%luppb   ", tvoc);
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	492c      	ldr	r1, [pc, #176]	; (8002658 <main+0x528>)
 80025a6:	481f      	ldr	r0, [pc, #124]	; (8002624 <main+0x4f4>)
 80025a8:	f008 fc74 	bl	800ae94 <siprintf>
			if (tvoc < NORMAL_TVOC_LEVEL) {
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b63      	cmp	r3, #99	; 0x63
 80025b0:	d80e      	bhi.n	80025d0 <main+0x4a0>
				ST7735_WriteString(0, 33, text1306, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <main+0x4f0>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	9202      	str	r2, [sp, #8]
 80025b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80025bc:	9201      	str	r2, [sp, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	9200      	str	r2, [sp, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <main+0x4f4>)
 80025c6:	2121      	movs	r1, #33	; 0x21
 80025c8:	2000      	movs	r0, #0
 80025ca:	f000 fe42 	bl	8003252 <ST7735_WriteString>
 80025ce:	e064      	b.n	800269a <main+0x56a>
			} else if (tvoc < WARN_TVOC_LEVEL) {
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025d6:	d20e      	bcs.n	80025f6 <main+0x4c6>
				ST7735_WriteString(0, 33, text1306, Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <main+0x4f0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	9202      	str	r2, [sp, #8]
 80025de:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80025e2:	9201      	str	r2, [sp, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	9200      	str	r2, [sp, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <main+0x4f4>)
 80025ec:	2121      	movs	r1, #33	; 0x21
 80025ee:	2000      	movs	r0, #0
 80025f0:	f000 fe2f 	bl	8003252 <ST7735_WriteString>
 80025f4:	e051      	b.n	800269a <main+0x56a>
			} else {
				ST7735_WriteString(0, 33, text1306, Font_7x10, ST7735_RED, ST7735_BLACK);
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <main+0x4f0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	9202      	str	r2, [sp, #8]
 80025fc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002600:	9201      	str	r2, [sp, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <main+0x4f4>)
 800260a:	2121      	movs	r1, #33	; 0x21
 800260c:	2000      	movs	r0, #0
 800260e:	f000 fe20 	bl	8003252 <ST7735_WriteString>
 8002612:	e042      	b.n	800269a <main+0x56a>
 8002614:	f3af 8000 	nop.w
 8002618:	00000000 	.word	0x00000000
 800261c:	4072c000 	.word	0x4072c000
 8002620:	20000000 	.word	0x20000000
 8002624:	20000260 	.word	0x20000260
 8002628:	20000248 	.word	0x20000248
 800262c:	20000244 	.word	0x20000244
 8002630:	447a0000 	.word	0x447a0000
 8002634:	0800d3b4 	.word	0x0800d3b4
 8002638:	42480000 	.word	0x42480000
 800263c:	42c80000 	.word	0x42c80000
 8002640:	20000294 	.word	0x20000294
 8002644:	3bf5c7e8 	.word	0x3bf5c7e8
 8002648:	20000298 	.word	0x20000298
 800264c:	2000029c 	.word	0x2000029c
 8002650:	0800d3c8 	.word	0x0800d3c8
 8002654:	0001d4c0 	.word	0x0001d4c0
 8002658:	0800d3e4 	.word	0x0800d3e4
			}
		} else {
			uint16_t tmout = (TVOC_TIMEOUT - HAL_GetTick()) / 1000;
 800265c:	f001 fa52 	bl	8003b04 <HAL_GetTick>
 8002660:	4603      	mov	r3, r0
 8002662:	f5c3 33ea 	rsb	r3, r3, #119808	; 0x1d400
 8002666:	33c0      	adds	r3, #192	; 0xc0
 8002668:	4aa1      	ldr	r2, [pc, #644]	; (80028f0 <main+0x7c0>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	83fb      	strh	r3, [r7, #30]
			sprintf(text1306, "TVOC:WrmUP(%u)  ", tmout);
 8002672:	8bfb      	ldrh	r3, [r7, #30]
 8002674:	461a      	mov	r2, r3
 8002676:	499f      	ldr	r1, [pc, #636]	; (80028f4 <main+0x7c4>)
 8002678:	489f      	ldr	r0, [pc, #636]	; (80028f8 <main+0x7c8>)
 800267a:	f008 fc0b 	bl	800ae94 <siprintf>
			ST7735_WriteString(0, 33, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800267e:	4b9f      	ldr	r3, [pc, #636]	; (80028fc <main+0x7cc>)
 8002680:	2200      	movs	r2, #0
 8002682:	9202      	str	r2, [sp, #8]
 8002684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002688:	9201      	str	r2, [sp, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	9200      	str	r2, [sp, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a99      	ldr	r2, [pc, #612]	; (80028f8 <main+0x7c8>)
 8002692:	2121      	movs	r1, #33	; 0x21
 8002694:	2000      	movs	r0, #0
 8002696:	f000 fddc 	bl	8003252 <ST7735_WriteString>
		 * 1 ppm формальдегида CH2O равен 1.24577 мг/м3
		 * Средне-суточная ПДК концентрация -- 0.003 мг/м3 0.0024ppm
		 * Разовая ПДК 0,035 мг/м3 -- 0.02803ppm
		 * */

		if((ze08_value = ZE08_readData()) != 0xFFFF) {
 800269a:	f7ff fceb 	bl	8002074 <ZE08_readData>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b97      	ldr	r3, [pc, #604]	; (8002900 <main+0x7d0>)
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	4b96      	ldr	r3, [pc, #600]	; (8002900 <main+0x7d0>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d03a      	beq.n	8002728 <main+0x5f8>

			for (int iii = 0; iii < sizeof(Data_Buffer) - 3; iii++) {
				sprintf(text1306, "%2x", Data_Buffer[iii]);
				ST7735_WriteString(iii * 16, 44, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
			}*/
			sprintf(text1306, "CH2O:%uppb     ", ze08_value);
 80026b2:	4b93      	ldr	r3, [pc, #588]	; (8002900 <main+0x7d0>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	4992      	ldr	r1, [pc, #584]	; (8002904 <main+0x7d4>)
 80026ba:	488f      	ldr	r0, [pc, #572]	; (80028f8 <main+0x7c8>)
 80026bc:	f008 fbea 	bl	800ae94 <siprintf>
			if (ze08_value < NORMAL_CH2O) {
 80026c0:	4b8f      	ldr	r3, [pc, #572]	; (8002900 <main+0x7d0>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d80e      	bhi.n	80026e6 <main+0x5b6>
				ST7735_WriteString(0, 44, text1306, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80026c8:	4b8c      	ldr	r3, [pc, #560]	; (80028fc <main+0x7cc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	9202      	str	r2, [sp, #8]
 80026ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026d2:	9201      	str	r2, [sp, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	9200      	str	r2, [sp, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a87      	ldr	r2, [pc, #540]	; (80028f8 <main+0x7c8>)
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	2000      	movs	r0, #0
 80026e0:	f000 fdb7 	bl	8003252 <ST7735_WriteString>
 80026e4:	e020      	b.n	8002728 <main+0x5f8>
			} else if (ze08_value < WARN_CH2O) {
 80026e6:	4b86      	ldr	r3, [pc, #536]	; (8002900 <main+0x7d0>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	2b1b      	cmp	r3, #27
 80026ec:	d80e      	bhi.n	800270c <main+0x5dc>
				ST7735_WriteString(0, 44, text1306, Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 80026ee:	4b83      	ldr	r3, [pc, #524]	; (80028fc <main+0x7cc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	9202      	str	r2, [sp, #8]
 80026f4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026f8:	9201      	str	r2, [sp, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	9200      	str	r2, [sp, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a7d      	ldr	r2, [pc, #500]	; (80028f8 <main+0x7c8>)
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	2000      	movs	r0, #0
 8002706:	f000 fda4 	bl	8003252 <ST7735_WriteString>
 800270a:	e00d      	b.n	8002728 <main+0x5f8>
			} else {
				ST7735_WriteString(0, 44, text1306, Font_7x10, ST7735_RED, ST7735_BLACK);
 800270c:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <main+0x7cc>)
 800270e:	2200      	movs	r2, #0
 8002710:	9202      	str	r2, [sp, #8]
 8002712:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002716:	9201      	str	r2, [sp, #4]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	9200      	str	r2, [sp, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a76      	ldr	r2, [pc, #472]	; (80028f8 <main+0x7c8>)
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	2000      	movs	r0, #0
 8002724:	f000 fd95 	bl	8003252 <ST7735_WriteString>
			//}
		}

		/* PM25*/

		if (PM25_GetData(PM25_buffer, sizeof(PM25_buffer))) {
 8002728:	2120      	movs	r1, #32
 800272a:	4877      	ldr	r0, [pc, #476]	; (8002908 <main+0x7d8>)
 800272c:	f7ff fb48 	bl	8001dc0 <PM25_GetData>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80b4 	beq.w	80028a0 <main+0x770>
		for (int iii = 0; iii < sizeof(PM25_buffer); iii++) {
			sprintf(text1306, "%2x", PM25_buffer[iii]);
			ST7735_WriteString(iii * 16, 55, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
		}
*/
			uint16_t part03  = PM25_buffer[16] << 8 | PM25_buffer[17];
 8002738:	4b73      	ldr	r3, [pc, #460]	; (8002908 <main+0x7d8>)
 800273a:	7c1b      	ldrb	r3, [r3, #16]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	b21a      	sxth	r2, r3
 8002740:	4b71      	ldr	r3, [pc, #452]	; (8002908 <main+0x7d8>)
 8002742:	7c5b      	ldrb	r3, [r3, #17]
 8002744:	b21b      	sxth	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	b21b      	sxth	r3, r3
 800274a:	82fb      	strh	r3, [r7, #22]
			uint16_t part05  = PM25_buffer[18] << 8 | PM25_buffer[19];
 800274c:	4b6e      	ldr	r3, [pc, #440]	; (8002908 <main+0x7d8>)
 800274e:	7c9b      	ldrb	r3, [r3, #18]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	b21a      	sxth	r2, r3
 8002754:	4b6c      	ldr	r3, [pc, #432]	; (8002908 <main+0x7d8>)
 8002756:	7cdb      	ldrb	r3, [r3, #19]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b21b      	sxth	r3, r3
 800275e:	82bb      	strh	r3, [r7, #20]
			uint16_t part10  = PM25_buffer[20] << 8 | PM25_buffer[21];
 8002760:	4b69      	ldr	r3, [pc, #420]	; (8002908 <main+0x7d8>)
 8002762:	7d1b      	ldrb	r3, [r3, #20]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	b21a      	sxth	r2, r3
 8002768:	4b67      	ldr	r3, [pc, #412]	; (8002908 <main+0x7d8>)
 800276a:	7d5b      	ldrb	r3, [r3, #21]
 800276c:	b21b      	sxth	r3, r3
 800276e:	4313      	orrs	r3, r2
 8002770:	b21b      	sxth	r3, r3
 8002772:	827b      	strh	r3, [r7, #18]
			uint16_t part25  = PM25_buffer[22] << 8 | PM25_buffer[23];
 8002774:	4b64      	ldr	r3, [pc, #400]	; (8002908 <main+0x7d8>)
 8002776:	7d9b      	ldrb	r3, [r3, #22]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	b21a      	sxth	r2, r3
 800277c:	4b62      	ldr	r3, [pc, #392]	; (8002908 <main+0x7d8>)
 800277e:	7ddb      	ldrb	r3, [r3, #23]
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b21b      	sxth	r3, r3
 8002786:	823b      	strh	r3, [r7, #16]
			uint16_t part50  = PM25_buffer[24] << 8 | PM25_buffer[25];
 8002788:	4b5f      	ldr	r3, [pc, #380]	; (8002908 <main+0x7d8>)
 800278a:	7e1b      	ldrb	r3, [r3, #24]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	b21a      	sxth	r2, r3
 8002790:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <main+0x7d8>)
 8002792:	7e5b      	ldrb	r3, [r3, #25]
 8002794:	b21b      	sxth	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	b21b      	sxth	r3, r3
 800279a:	81fb      	strh	r3, [r7, #14]
			uint16_t part100 = PM25_buffer[26] << 8 | PM25_buffer[27];
 800279c:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <main+0x7d8>)
 800279e:	7e9b      	ldrb	r3, [r3, #26]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <main+0x7d8>)
 80027a6:	7edb      	ldrb	r3, [r3, #27]
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	81bb      	strh	r3, [r7, #12]

			sprintf(text1306, "PM03 :%u  ", part03);
 80027b0:	8afb      	ldrh	r3, [r7, #22]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4955      	ldr	r1, [pc, #340]	; (800290c <main+0x7dc>)
 80027b6:	4850      	ldr	r0, [pc, #320]	; (80028f8 <main+0x7c8>)
 80027b8:	f008 fb6c 	bl	800ae94 <siprintf>
			ST7735_WriteString(0, 55, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80027bc:	4b4f      	ldr	r3, [pc, #316]	; (80028fc <main+0x7cc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	9202      	str	r2, [sp, #8]
 80027c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c6:	9201      	str	r2, [sp, #4]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	9200      	str	r2, [sp, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a4a      	ldr	r2, [pc, #296]	; (80028f8 <main+0x7c8>)
 80027d0:	2137      	movs	r1, #55	; 0x37
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 fd3d 	bl	8003252 <ST7735_WriteString>
			sprintf(text1306, "PM05 :%u  ", part05);
 80027d8:	8abb      	ldrh	r3, [r7, #20]
 80027da:	461a      	mov	r2, r3
 80027dc:	494c      	ldr	r1, [pc, #304]	; (8002910 <main+0x7e0>)
 80027de:	4846      	ldr	r0, [pc, #280]	; (80028f8 <main+0x7c8>)
 80027e0:	f008 fb58 	bl	800ae94 <siprintf>
			ST7735_WriteString(0, 66, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80027e4:	4b45      	ldr	r3, [pc, #276]	; (80028fc <main+0x7cc>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	9202      	str	r2, [sp, #8]
 80027ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ee:	9201      	str	r2, [sp, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	9200      	str	r2, [sp, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a40      	ldr	r2, [pc, #256]	; (80028f8 <main+0x7c8>)
 80027f8:	2142      	movs	r1, #66	; 0x42
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 fd29 	bl	8003252 <ST7735_WriteString>
			sprintf(text1306, "PM10 :%u  ", part10);
 8002800:	8a7b      	ldrh	r3, [r7, #18]
 8002802:	461a      	mov	r2, r3
 8002804:	4943      	ldr	r1, [pc, #268]	; (8002914 <main+0x7e4>)
 8002806:	483c      	ldr	r0, [pc, #240]	; (80028f8 <main+0x7c8>)
 8002808:	f008 fb44 	bl	800ae94 <siprintf>
			ST7735_WriteString(0, 77, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800280c:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <main+0x7cc>)
 800280e:	2200      	movs	r2, #0
 8002810:	9202      	str	r2, [sp, #8]
 8002812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002816:	9201      	str	r2, [sp, #4]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	9200      	str	r2, [sp, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <main+0x7c8>)
 8002820:	214d      	movs	r1, #77	; 0x4d
 8002822:	2000      	movs	r0, #0
 8002824:	f000 fd15 	bl	8003252 <ST7735_WriteString>
			sprintf(text1306, "PM25 :%u  ", part25);
 8002828:	8a3b      	ldrh	r3, [r7, #16]
 800282a:	461a      	mov	r2, r3
 800282c:	493a      	ldr	r1, [pc, #232]	; (8002918 <main+0x7e8>)
 800282e:	4832      	ldr	r0, [pc, #200]	; (80028f8 <main+0x7c8>)
 8002830:	f008 fb30 	bl	800ae94 <siprintf>
			ST7735_WriteString(0, 88, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <main+0x7cc>)
 8002836:	2200      	movs	r2, #0
 8002838:	9202      	str	r2, [sp, #8]
 800283a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283e:	9201      	str	r2, [sp, #4]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	9200      	str	r2, [sp, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <main+0x7c8>)
 8002848:	2158      	movs	r1, #88	; 0x58
 800284a:	2000      	movs	r0, #0
 800284c:	f000 fd01 	bl	8003252 <ST7735_WriteString>
			sprintf(text1306, "PM50 :%u  ", part50);
 8002850:	89fb      	ldrh	r3, [r7, #14]
 8002852:	461a      	mov	r2, r3
 8002854:	4931      	ldr	r1, [pc, #196]	; (800291c <main+0x7ec>)
 8002856:	4828      	ldr	r0, [pc, #160]	; (80028f8 <main+0x7c8>)
 8002858:	f008 fb1c 	bl	800ae94 <siprintf>
			ST7735_WriteString(0, 99, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <main+0x7cc>)
 800285e:	2200      	movs	r2, #0
 8002860:	9202      	str	r2, [sp, #8]
 8002862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002866:	9201      	str	r2, [sp, #4]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	9200      	str	r2, [sp, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <main+0x7c8>)
 8002870:	2163      	movs	r1, #99	; 0x63
 8002872:	2000      	movs	r0, #0
 8002874:	f000 fced 	bl	8003252 <ST7735_WriteString>
			sprintf(text1306, "PM100:%u  ", part100);
 8002878:	89bb      	ldrh	r3, [r7, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	4928      	ldr	r1, [pc, #160]	; (8002920 <main+0x7f0>)
 800287e:	481e      	ldr	r0, [pc, #120]	; (80028f8 <main+0x7c8>)
 8002880:	f008 fb08 	bl	800ae94 <siprintf>
			ST7735_WriteString(0, 110, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <main+0x7cc>)
 8002886:	2200      	movs	r2, #0
 8002888:	9202      	str	r2, [sp, #8]
 800288a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800288e:	9201      	str	r2, [sp, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <main+0x7c8>)
 8002898:	216e      	movs	r1, #110	; 0x6e
 800289a:	2000      	movs	r0, #0
 800289c:	f000 fcd9 	bl	8003252 <ST7735_WriteString>
		}

		/* Напряжение источника питания */
		bataryValue = (float) battaryLevel / 4096 * ADC_L_TUNE;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <main+0x7f4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028ac:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002928 <main+0x7f8>
 80028b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800292c <main+0x7fc>
 80028b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <main+0x800>)
 80028be:	edc3 7a00 	vstr	s15, [r3]
		if (bataryValue > 3) {
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <main+0x800>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80028cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	dd30      	ble.n	8002938 <main+0x808>
			sprintf(text1306, "%.2f", bataryValue);
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <main+0x800>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fd fe34 	bl	8000548 <__aeabi_f2d>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4913      	ldr	r1, [pc, #76]	; (8002934 <main+0x804>)
 80028e6:	4804      	ldr	r0, [pc, #16]	; (80028f8 <main+0x7c8>)
 80028e8:	f008 fad4 	bl	800ae94 <siprintf>
 80028ec:	e028      	b.n	8002940 <main+0x810>
 80028ee:	bf00      	nop
 80028f0:	10624dd3 	.word	0x10624dd3
 80028f4:	0800d3f4 	.word	0x0800d3f4
 80028f8:	20000260 	.word	0x20000260
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000272 	.word	0x20000272
 8002904:	0800d408 	.word	0x0800d408
 8002908:	20000274 	.word	0x20000274
 800290c:	0800d418 	.word	0x0800d418
 8002910:	0800d424 	.word	0x0800d424
 8002914:	0800d430 	.word	0x0800d430
 8002918:	0800d43c 	.word	0x0800d43c
 800291c:	0800d448 	.word	0x0800d448
 8002920:	0800d454 	.word	0x0800d454
 8002924:	2000024c 	.word	0x2000024c
 8002928:	45800000 	.word	0x45800000
 800292c:	40b66666 	.word	0x40b66666
 8002930:	200002a0 	.word	0x200002a0
 8002934:	0800d460 	.word	0x0800d460
		} else {
			sprintf(text1306, "BatL");
 8002938:	4926      	ldr	r1, [pc, #152]	; (80029d4 <main+0x8a4>)
 800293a:	4827      	ldr	r0, [pc, #156]	; (80029d8 <main+0x8a8>)
 800293c:	f008 faaa 	bl	800ae94 <siprintf>
		}
		ST7735_WriteString(98, 0, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002940:	4b26      	ldr	r3, [pc, #152]	; (80029dc <main+0x8ac>)
 8002942:	2200      	movs	r2, #0
 8002944:	9202      	str	r2, [sp, #8]
 8002946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800294a:	9201      	str	r2, [sp, #4]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	9200      	str	r2, [sp, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a21      	ldr	r2, [pc, #132]	; (80029d8 <main+0x8a8>)
 8002954:	2100      	movs	r1, #0
 8002956:	2062      	movs	r0, #98	; 0x62
 8002958:	f000 fc7b 	bl	8003252 <ST7735_WriteString>
		HAL_ADC_Start_DMA(&hadc3, &battaryLevel, 1);
 800295c:	2201      	movs	r2, #1
 800295e:	4920      	ldr	r1, [pc, #128]	; (80029e0 <main+0x8b0>)
 8002960:	4820      	ldr	r0, [pc, #128]	; (80029e4 <main+0x8b4>)
 8002962:	f001 fafd 	bl	8003f60 <HAL_ADC_Start_DMA>


		/* Звуковое давление */
		sprintf(text1306, "Sound :%0.1fdb", soundPress);
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <main+0x8b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fdec 	bl	8000548 <__aeabi_f2d>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	491d      	ldr	r1, [pc, #116]	; (80029ec <main+0x8bc>)
 8002976:	4818      	ldr	r0, [pc, #96]	; (80029d8 <main+0x8a8>)
 8002978:	f008 fa8c 	bl	800ae94 <siprintf>
		ST7735_WriteString(0, 121, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <main+0x8ac>)
 800297e:	2200      	movs	r2, #0
 8002980:	9202      	str	r2, [sp, #8]
 8002982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	9200      	str	r2, [sp, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <main+0x8a8>)
 8002990:	2179      	movs	r1, #121	; 0x79
 8002992:	2000      	movs	r0, #0
 8002994:	f000 fc5d 	bl	8003252 <ST7735_WriteString>

		/* Освещенность */
		sprintf(text1306, "Illum :%0.0flux", lucmeter);
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <main+0x8c0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fdd3 	bl	8000548 <__aeabi_f2d>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4913      	ldr	r1, [pc, #76]	; (80029f4 <main+0x8c4>)
 80029a8:	480b      	ldr	r0, [pc, #44]	; (80029d8 <main+0x8a8>)
 80029aa:	f008 fa73 	bl	800ae94 <siprintf>
		ST7735_WriteString(0, 132, text1306, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <main+0x8ac>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <main+0x8a8>)
 80029c2:	2184      	movs	r1, #132	; 0x84
 80029c4:	2000      	movs	r0, #0
 80029c6:	f000 fc44 	bl	8003252 <ST7735_WriteString>

		HAL_Delay(1000);
 80029ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ce:	f001 f8a5 	bl	8003b1c <HAL_Delay>
	  	if (HAL_GetTick() - CO2Counter > CO2Interval) {
 80029d2:	e465      	b.n	80022a0 <main+0x170>
 80029d4:	0800d468 	.word	0x0800d468
 80029d8:	20000260 	.word	0x20000260
 80029dc:	20000000 	.word	0x20000000
 80029e0:	2000024c 	.word	0x2000024c
 80029e4:	200002a4 	.word	0x200002a4
 80029e8:	20000008 	.word	0x20000008
 80029ec:	0800d470 	.word	0x0800d470
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	0800d480 	.word	0x0800d480

080029f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b09e      	sub	sp, #120	; 0x78
 80029fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a02:	2228      	movs	r2, #40	; 0x28
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f007 fce2 	bl	800a3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	223c      	movs	r2, #60	; 0x3c
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f007 fcd4 	bl	800a3d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a32:	2301      	movs	r3, #1
 8002a34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a36:	2301      	movs	r3, #1
 8002a38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a42:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a48:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 ff14 	bl	800687c <HAL_RCC_OscConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002a5a:	f000 fa8d 	bl	8002f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a5e:	230f      	movs	r3, #15
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a62:	2302      	movs	r3, #2
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 ff3c 	bl	80078f8 <HAL_RCC_ClockConfig>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002a86:	f000 fa77 	bl	8002f78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002a8a:	f240 1323 	movw	r3, #291	; 0x123
 8002a8e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f005 f95f 	bl	8007d68 <HAL_RCCEx_PeriphCLKConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002ab0:	f000 fa62 	bl	8002f78 <Error_Handler>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3778      	adds	r7, #120	; 0x78
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
 8002adc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <MX_ADC3_Init+0xdc>)
 8002ae2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002af6:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b10:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b26:	2204      	movs	r2, #4
 8002b28:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002b36:	4817      	ldr	r0, [pc, #92]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b38:	f001 f832 	bl	8003ba0 <HAL_ADC_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8002b42:	f000 fa19 	bl	8002f78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4810      	ldr	r0, [pc, #64]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b52:	f001 fe6f 	bl	8004834 <HAL_ADCEx_MultiModeConfigChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8002b5c:	f000 fa0c 	bl	8002f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_ADC3_Init+0xd8>)
 8002b7e:	f001 fb6d 	bl	800425c <HAL_ADC_ConfigChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8002b88:	f000 f9f6 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200002a4 	.word	0x200002a4
 8002b98:	50000400 	.word	0x50000400

08002b9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <MX_I2C1_Init+0x78>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x3010BEFF;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <MX_I2C1_Init+0x7c>)
 8002baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bac:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bd6:	480e      	ldr	r0, [pc, #56]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bd8:	f002 fdb7 	bl	800574a <HAL_I2C_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002be2:	f000 f9c9 	bl	8002f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002be6:	2100      	movs	r1, #0
 8002be8:	4809      	ldr	r0, [pc, #36]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bea:	f003 fd8f 	bl	800670c <HAL_I2CEx_ConfigAnalogFilter>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bf4:	f000 f9c0 	bl	8002f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <MX_I2C1_Init+0x74>)
 8002bfc:	f003 fdd1 	bl	80067a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c06:	f000 f9b7 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000338 	.word	0x20000338
 8002c14:	40005400 	.word	0x40005400
 8002c18:	3010beff 	.word	0x3010beff

08002c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c22:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <MX_SPI1_Init+0x78>)
 8002c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c52:	2208      	movs	r2, #8
 8002c54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c76:	2208      	movs	r2, #8
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_SPI1_Init+0x74>)
 8002c7c:	f005 fa24 	bl	80080c8 <HAL_SPI_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c86:	f000 f977 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000038c 	.word	0x2000038c
 8002c94:	40013000 	.word	0x40013000

08002c98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	; 0x38
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cac:	f107 031c 	add.w	r3, r7, #28
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cb8:	463b      	mov	r3, r7
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
 8002cc4:	611a      	str	r2, [r3, #16]
 8002cc6:	615a      	str	r2, [r3, #20]
 8002cc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cca:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <MX_TIM4_Init+0xf8>)
 8002cce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cf0:	4826      	ldr	r0, [pc, #152]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002cf2:	f005 fd6d 	bl	80087d0 <HAL_TIM_Base_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002cfc:	f000 f93c 	bl	8002f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	481f      	ldr	r0, [pc, #124]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002d0e:	f006 f8a5 	bl	8008e5c <HAL_TIM_ConfigClockSource>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002d18:	f000 f92e 	bl	8002f78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002d1c:	481b      	ldr	r0, [pc, #108]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002d1e:	f005 fe48 	bl	80089b2 <HAL_TIM_OC_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002d28:	f000 f926 	bl	8002f78 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	4817      	ldr	r0, [pc, #92]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002d30:	f005 fea0 	bl	8008a74 <HAL_TIM_OnePulse_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 8002d3a:	f000 f91d 	bl	8002f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d3e:	2320      	movs	r3, #32
 8002d40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480f      	ldr	r0, [pc, #60]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002d4e:	f006 fd81 	bl	8009854 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8002d58:	f000 f90e 	bl	8002f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002d5c:	2330      	movs	r3, #48	; 0x30
 8002d5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4619      	mov	r1, r3
 8002d72:	4806      	ldr	r0, [pc, #24]	; (8002d8c <MX_TIM4_Init+0xf4>)
 8002d74:	f005 fff8 	bl	8008d68 <HAL_TIM_OC_ConfigChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8002d7e:	f000 f8fb 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d82:	bf00      	nop
 8002d84:	3738      	adds	r7, #56	; 0x38
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200003f0 	.word	0x200003f0
 8002d90:	40000800 	.word	0x40000800

08002d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <MX_USART1_UART_Init+0x5c>)
 8002d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002da0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dba:	2204      	movs	r2, #4
 8002dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dd8:	f006 fdda 	bl	8009990 <HAL_UART_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002de2:	f000 f8c9 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000043c 	.word	0x2000043c
 8002df0:	40013800 	.word	0x40013800

08002df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <MX_USART2_UART_Init+0x5c>)
 8002dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e2a:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e38:	f006 fdaa 	bl	8009990 <HAL_UART_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e42:	f000 f899 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200004c4 	.word	0x200004c4
 8002e50:	40004400 	.word	0x40004400

08002e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <MX_DMA_Init+0x38>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	; (8002e8c <MX_DMA_Init+0x38>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	6153      	str	r3, [r2, #20]
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MX_DMA_Init+0x38>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	203c      	movs	r0, #60	; 0x3c
 8002e78:	f002 f88f 	bl	8004f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8002e7c:	203c      	movs	r0, #60	; 0x3c
 8002e7e:	f002 f8a8 	bl	8004fd2 <HAL_NVIC_EnableIRQ>

}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000

08002e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ea6:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eb0:	6153      	str	r3, [r2, #20]
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	6153      	str	r3, [r2, #20]
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6153      	str	r3, [r2, #20]
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <MX_GPIO_Init+0xe0>)
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735S_RESET_Pin|ST7735S_CS_Pin|ST7735S_DC_Pin, GPIO_PIN_RESET);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2158      	movs	r1, #88	; 0x58
 8002ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ef6:	f002 fbed 	bl	80056d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2104      	movs	r1, #4
 8002efe:	481d      	ldr	r0, [pc, #116]	; (8002f74 <MX_GPIO_Init+0xe4>)
 8002f00:	f002 fbe8 	bl	80056d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7735S_RESET_Pin ST7735S_CS_Pin ST7735S_DC_Pin */
  GPIO_InitStruct.Pin = ST7735S_RESET_Pin|ST7735S_CS_Pin|ST7735S_DC_Pin;
 8002f04:	2358      	movs	r3, #88	; 0x58
 8002f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f14:	f107 030c 	add.w	r3, r7, #12
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1e:	f002 fa5f 	bl	80053e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f22:	2301      	movs	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4619      	mov	r1, r3
 8002f36:	480f      	ldr	r0, [pc, #60]	; (8002f74 <MX_GPIO_Init+0xe4>)
 8002f38:	f002 fa52 	bl	80053e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f40:	2301      	movs	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	4619      	mov	r1, r3
 8002f52:	4808      	ldr	r0, [pc, #32]	; (8002f74 <MX_GPIO_Init+0xe4>)
 8002f54:	f002 fa44 	bl	80053e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2006      	movs	r0, #6
 8002f5e:	f002 f81c 	bl	8004f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f62:	2006      	movs	r0, #6
 8002f64:	f002 f835 	bl	8004fd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f68:	bf00      	nop
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	48000400 	.word	0x48000400

08002f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f7c:	b672      	cpsid	i
}
 8002f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <Error_Handler+0x8>

08002f82 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002f82:	b580      	push	{r7, lr}
 8002f84:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2110      	movs	r1, #16
 8002f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8e:	f002 fba1 	bl	80056d4 <HAL_GPIO_WritePin>
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2110      	movs	r1, #16
 8002f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa2:	f002 fb97 	bl	80056d4 <HAL_GPIO_WritePin>
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <ST7735_Reset>:

static void ST7735_Reset() {
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2108      	movs	r1, #8
 8002fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb6:	f002 fb8d 	bl	80056d4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002fba:	2005      	movs	r0, #5
 8002fbc:	f000 fdae 	bl	8003b1c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2108      	movs	r1, #8
 8002fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc8:	f002 fb84 	bl	80056d4 <HAL_GPIO_WritePin>
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2140      	movs	r1, #64	; 0x40
 8002fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe2:	f002 fb77 	bl	80056d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002fe6:	1df9      	adds	r1, r7, #7
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fec:	2201      	movs	r2, #1
 8002fee:	4803      	ldr	r0, [pc, #12]	; (8002ffc <ST7735_WriteCommand+0x2c>)
 8002ff0:	f005 f915 	bl	800821e <HAL_SPI_Transmit>
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	2000038c 	.word	0x2000038c

08003000 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800300a:	2201      	movs	r2, #1
 800300c:	2140      	movs	r1, #64	; 0x40
 800300e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003012:	f002 fb5f 	bl	80056d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b29a      	uxth	r2, r3
 800301a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4803      	ldr	r0, [pc, #12]	; (8003030 <ST7735_WriteData+0x30>)
 8003022:	f005 f8fc 	bl	800821e <HAL_SPI_Transmit>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000038c 	.word	0x2000038c

08003034 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8003046:	e034      	b.n	80030b2 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8003052:	7afb      	ldrb	r3, [r7, #11]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ffbb 	bl	8002fd0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003064:	7abb      	ldrb	r3, [r7, #10]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800306e:	7abb      	ldrb	r3, [r7, #10]
 8003070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003074:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003076:	7abb      	ldrb	r3, [r7, #10]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800307c:	7abb      	ldrb	r3, [r7, #10]
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ffbd 	bl	8003000 <ST7735_WriteData>
            addr += numArgs;
 8003086:	7abb      	ldrb	r3, [r7, #10]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800308e:	89bb      	ldrh	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800309e:	89bb      	ldrh	r3, [r7, #12]
 80030a0:	2bff      	cmp	r3, #255	; 0xff
 80030a2:	d102      	bne.n	80030aa <ST7735_ExecuteCommandList+0x76>
 80030a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030a8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80030aa:	89bb      	ldrh	r3, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fd35 	bl	8003b1c <HAL_Delay>
    while(numCommands--) {
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	1e5a      	subs	r2, r3, #1
 80030b6:	73fa      	strb	r2, [r7, #15]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1c5      	bne.n	8003048 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80030c6:	b590      	push	{r4, r7, lr}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4604      	mov	r4, r0
 80030ce:	4608      	mov	r0, r1
 80030d0:	4611      	mov	r1, r2
 80030d2:	461a      	mov	r2, r3
 80030d4:	4623      	mov	r3, r4
 80030d6:	71fb      	strb	r3, [r7, #7]
 80030d8:	4603      	mov	r3, r0
 80030da:	71bb      	strb	r3, [r7, #6]
 80030dc:	460b      	mov	r3, r1
 80030de:	717b      	strb	r3, [r7, #5]
 80030e0:	4613      	mov	r3, r2
 80030e2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80030e4:	202a      	movs	r0, #42	; 0x2a
 80030e6:	f7ff ff73 	bl	8002fd0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80030ea:	2300      	movs	r3, #0
 80030ec:	733b      	strb	r3, [r7, #12]
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	737b      	strb	r3, [r7, #13]
 80030f2:	2300      	movs	r3, #0
 80030f4:	73bb      	strb	r3, [r7, #14]
 80030f6:	797b      	ldrb	r3, [r7, #5]
 80030f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	2104      	movs	r1, #4
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff7d 	bl	8003000 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003106:	202b      	movs	r0, #43	; 0x2b
 8003108:	f7ff ff62 	bl	8002fd0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800310c:	79bb      	ldrb	r3, [r7, #6]
 800310e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8003110:	793b      	ldrb	r3, [r7, #4]
 8003112:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	2104      	movs	r1, #4
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff70 	bl	8003000 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003120:	202c      	movs	r0, #44	; 0x2c
 8003122:	f7ff ff55 	bl	8002fd0 <ST7735_WriteCommand>
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bd90      	pop	{r4, r7, pc}
	...

08003130 <ST7735_Init>:

void ST7735_Init() {
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
    ST7735_Select();
 8003134:	f7ff ff25 	bl	8002f82 <ST7735_Select>
    ST7735_Reset();
 8003138:	f7ff ff37 	bl	8002faa <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800313c:	4806      	ldr	r0, [pc, #24]	; (8003158 <ST7735_Init+0x28>)
 800313e:	f7ff ff79 	bl	8003034 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8003142:	4806      	ldr	r0, [pc, #24]	; (800315c <ST7735_Init+0x2c>)
 8003144:	f7ff ff76 	bl	8003034 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8003148:	4805      	ldr	r0, [pc, #20]	; (8003160 <ST7735_Init+0x30>)
 800314a:	f7ff ff73 	bl	8003034 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800314e:	f7ff ff22 	bl	8002f96 <ST7735_Unselect>
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	0800dbfc 	.word	0x0800dbfc
 800315c:	0800dc38 	.word	0x0800dc38
 8003160:	0800dc48 	.word	0x0800dc48

08003164 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003164:	b082      	sub	sp, #8
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b089      	sub	sp, #36	; 0x24
 800316a:	af00      	add	r7, sp, #0
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
 800316e:	4603      	mov	r3, r0
 8003170:	80fb      	strh	r3, [r7, #6]
 8003172:	460b      	mov	r3, r1
 8003174:	80bb      	strh	r3, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	b2d8      	uxtb	r0, r3
 800317e:	88bb      	ldrh	r3, [r7, #4]
 8003180:	b2d9      	uxtb	r1, r3
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800318a:	4413      	add	r3, r2
 800318c:	b2db      	uxtb	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b2dc      	uxtb	r4, r3
 8003192:	88bb      	ldrh	r3, [r7, #4]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800319a:	4413      	add	r3, r2
 800319c:	b2db      	uxtb	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4622      	mov	r2, r4
 80031a4:	f7ff ff8f 	bl	80030c6 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	e043      	b.n	8003236 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80031ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	3b20      	subs	r3, #32
 80031b4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	440b      	add	r3, r1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	e029      	b.n	8003224 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80031e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	743b      	strb	r3, [r7, #16]
 80031ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff02 	bl	8003000 <ST7735_WriteData>
 80031fc:	e00f      	b.n	800321e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80031fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	b29b      	uxth	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	733b      	strb	r3, [r7, #12]
 800320a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800320e:	b2db      	uxtb	r3, r3
 8003210:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	2102      	movs	r1, #2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fef1 	bl	8003000 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3301      	adds	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003228:	461a      	mov	r2, r3
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4293      	cmp	r3, r2
 800322e:	d3cf      	bcc.n	80031d0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	3301      	adds	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800323a:	461a      	mov	r2, r3
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	4293      	cmp	r3, r2
 8003240:	d3b5      	bcc.n	80031ae <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	3724      	adds	r7, #36	; 0x24
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800324e:	b002      	add	sp, #8
 8003250:	4770      	bx	lr

08003252 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003252:	b082      	sub	sp, #8
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af04      	add	r7, sp, #16
 800325a:	603a      	str	r2, [r7, #0]
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	4603      	mov	r3, r0
 8003260:	80fb      	strh	r3, [r7, #6]
 8003262:	460b      	mov	r3, r1
 8003264:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8003266:	f7ff fe8c 	bl	8002f82 <ST7735_Select>

    while(*str) {
 800326a:	e02d      	b.n	80032c8 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	7d3a      	ldrb	r2, [r7, #20]
 8003270:	4413      	add	r3, r2
 8003272:	2b7f      	cmp	r3, #127	; 0x7f
 8003274:	dd13      	ble.n	800329e <ST7735_WriteString+0x4c>
            x = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800327a:	7d7b      	ldrb	r3, [r7, #21]
 800327c:	b29a      	uxth	r2, r3
 800327e:	88bb      	ldrh	r3, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8003284:	88bb      	ldrh	r3, [r7, #4]
 8003286:	7d7a      	ldrb	r2, [r7, #21]
 8003288:	4413      	add	r3, r2
 800328a:	2b9f      	cmp	r3, #159	; 0x9f
 800328c:	dc21      	bgt.n	80032d2 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b20      	cmp	r3, #32
 8003294:	d103      	bne.n	800329e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	603b      	str	r3, [r7, #0]
                continue;
 800329c:	e014      	b.n	80032c8 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	88b9      	ldrh	r1, [r7, #4]
 80032a4:	88f8      	ldrh	r0, [r7, #6]
 80032a6:	8c3b      	ldrh	r3, [r7, #32]
 80032a8:	9302      	str	r3, [sp, #8]
 80032aa:	8bbb      	ldrh	r3, [r7, #28]
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f7ff ff56 	bl	8003164 <ST7735_WriteChar>
        x += font.width;
 80032b8:	7d3b      	ldrb	r3, [r7, #20]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	4413      	add	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
        str++;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1cd      	bne.n	800326c <ST7735_WriteString+0x1a>
 80032d0:	e000      	b.n	80032d4 <ST7735_WriteString+0x82>
                break;
 80032d2:	bf00      	nop
    }

    ST7735_Unselect();
 80032d4:	f7ff fe5f 	bl	8002f96 <ST7735_Unselect>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032e2:	b002      	add	sp, #8
 80032e4:	4770      	bx	lr
	...

080032e8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4604      	mov	r4, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	80fb      	strh	r3, [r7, #6]
 80032fa:	4603      	mov	r3, r0
 80032fc:	80bb      	strh	r3, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	807b      	strh	r3, [r7, #2]
 8003302:	4613      	mov	r3, r2
 8003304:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b7f      	cmp	r3, #127	; 0x7f
 800330a:	d858      	bhi.n	80033be <ST7735_FillRectangle+0xd6>
 800330c:	88bb      	ldrh	r3, [r7, #4]
 800330e:	2b9f      	cmp	r3, #159	; 0x9f
 8003310:	d855      	bhi.n	80033be <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	4413      	add	r3, r2
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	dd03      	ble.n	8003324 <ST7735_FillRectangle+0x3c>
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003322:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003324:	88ba      	ldrh	r2, [r7, #4]
 8003326:	883b      	ldrh	r3, [r7, #0]
 8003328:	4413      	add	r3, r2
 800332a:	2ba0      	cmp	r3, #160	; 0xa0
 800332c:	dd03      	ble.n	8003336 <ST7735_FillRectangle+0x4e>
 800332e:	88bb      	ldrh	r3, [r7, #4]
 8003330:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8003334:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8003336:	f7ff fe24 	bl	8002f82 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	b2d8      	uxtb	r0, r3
 800333e:	88bb      	ldrh	r3, [r7, #4]
 8003340:	b2d9      	uxtb	r1, r3
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4413      	add	r3, r2
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b2dc      	uxtb	r4, r3
 8003352:	88bb      	ldrh	r3, [r7, #4]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	883b      	ldrh	r3, [r7, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4413      	add	r3, r2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	4622      	mov	r2, r4
 8003364:	f7ff feaf 	bl	80030c6 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8003368:	8c3b      	ldrh	r3, [r7, #32]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b29b      	uxth	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	733b      	strb	r3, [r7, #12]
 8003372:	8c3b      	ldrh	r3, [r7, #32]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003378:	2201      	movs	r2, #1
 800337a:	2140      	movs	r1, #64	; 0x40
 800337c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003380:	f002 f9a8 	bl	80056d4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8003384:	883b      	ldrh	r3, [r7, #0]
 8003386:	80bb      	strh	r3, [r7, #4]
 8003388:	e013      	b.n	80033b2 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	80fb      	strh	r3, [r7, #6]
 800338e:	e00a      	b.n	80033a6 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003390:	f107 010c 	add.w	r1, r7, #12
 8003394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003398:	2202      	movs	r2, #2
 800339a:	480b      	ldr	r0, [pc, #44]	; (80033c8 <ST7735_FillRectangle+0xe0>)
 800339c:	f004 ff3f 	bl	800821e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	80fb      	strh	r3, [r7, #6]
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f1      	bne.n	8003390 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80033ac:	88bb      	ldrh	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	80bb      	strh	r3, [r7, #4]
 80033b2:	88bb      	ldrh	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e8      	bne.n	800338a <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80033b8:	f7ff fded 	bl	8002f96 <ST7735_Unselect>
 80033bc:	e000      	b.n	80033c0 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80033be:	bf00      	nop
}
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd90      	pop	{r4, r7, pc}
 80033c6:	bf00      	nop
 80033c8:	2000038c 	.word	0x2000038c

080033cc <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	23a0      	movs	r3, #160	; 0xa0
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	2100      	movs	r1, #0
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7ff ff81 	bl	80032e8 <ST7735_FillRectangle>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_MspInit+0x44>)
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <HAL_MspInit+0x44>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6193      	str	r3, [r2, #24]
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_MspInit+0x44>)
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_MspInit+0x44>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4a08      	ldr	r2, [pc, #32]	; (8003434 <HAL_MspInit+0x44>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	61d3      	str	r3, [r2, #28]
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_MspInit+0x44>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000

08003438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a29      	ldr	r2, [pc, #164]	; (80034fc <HAL_ADC_MspInit+0xc4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d14b      	bne.n	80034f2 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <HAL_ADC_MspInit+0xc8>)
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	4a28      	ldr	r2, [pc, #160]	; (8003500 <HAL_ADC_MspInit+0xc8>)
 8003460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003464:	6153      	str	r3, [r2, #20]
 8003466:	4b26      	ldr	r3, [pc, #152]	; (8003500 <HAL_ADC_MspInit+0xc8>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003472:	4b23      	ldr	r3, [pc, #140]	; (8003500 <HAL_ADC_MspInit+0xc8>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4a22      	ldr	r2, [pc, #136]	; (8003500 <HAL_ADC_MspInit+0xc8>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800347c:	6153      	str	r3, [r2, #20]
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_ADC_MspInit+0xc8>)
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = BAT_Pin;
 800348a:	2302      	movs	r3, #2
 800348c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800348e:	2303      	movs	r3, #3
 8003490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_GPIO_Port, &GPIO_InitStruct);
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4619      	mov	r1, r3
 800349c:	4819      	ldr	r0, [pc, #100]	; (8003504 <HAL_ADC_MspInit+0xcc>)
 800349e:	f001 ff9f 	bl	80053e0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034a4:	4a19      	ldr	r2, [pc, #100]	; (800350c <HAL_ADC_MspInit+0xd4>)
 80034a6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034a8:	4b17      	ldr	r3, [pc, #92]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80034ca:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80034d6:	480c      	ldr	r0, [pc, #48]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034d8:	f001 fd95 	bl	8005006 <HAL_DMA_Init>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 80034e2:	f7ff fd49 	bl	8002f78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
 80034ec:	4a06      	ldr	r2, [pc, #24]	; (8003508 <HAL_ADC_MspInit+0xd0>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80034f2:	bf00      	nop
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	50000400 	.word	0x50000400
 8003500:	40021000 	.word	0x40021000
 8003504:	48000400 	.word	0x48000400
 8003508:	200002f4 	.word	0x200002f4
 800350c:	40020458 	.word	0x40020458

08003510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1b      	ldr	r2, [pc, #108]	; (800359c <HAL_I2C_MspInit+0x8c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d130      	bne.n	8003594 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_I2C_MspInit+0x90>)
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4a1a      	ldr	r2, [pc, #104]	; (80035a0 <HAL_I2C_MspInit+0x90>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353c:	6153      	str	r3, [r2, #20]
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <HAL_I2C_MspInit+0x90>)
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800354a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800354e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003550:	2312      	movs	r3, #18
 8003552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003558:	2303      	movs	r3, #3
 800355a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800355c:	2304      	movs	r3, #4
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4619      	mov	r1, r3
 8003566:	480f      	ldr	r0, [pc, #60]	; (80035a4 <HAL_I2C_MspInit+0x94>)
 8003568:	f001 ff3a 	bl	80053e0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB8_FMP);
 800356c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003570:	f003 f964 	bl	800683c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB9_FMP);
 8003574:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003578:	f003 f960 	bl	800683c <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_I2C_MspInit+0x90>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <HAL_I2C_MspInit+0x90>)
 8003582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003586:	61d3      	str	r3, [r2, #28]
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_I2C_MspInit+0x90>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003594:	bf00      	nop
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40005400 	.word	0x40005400
 80035a0:	40021000 	.word	0x40021000
 80035a4:	48000400 	.word	0x48000400

080035a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_SPI_MspInit+0x7c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d128      	bne.n	800361c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_SPI_MspInit+0x80>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	4a16      	ldr	r2, [pc, #88]	; (8003628 <HAL_SPI_MspInit+0x80>)
 80035d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035d4:	6193      	str	r3, [r2, #24]
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_SPI_MspInit+0x80>)
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_SPI_MspInit+0x80>)
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_SPI_MspInit+0x80>)
 80035e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ec:	6153      	str	r3, [r2, #20]
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_SPI_MspInit+0x80>)
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80035fa:	23a0      	movs	r3, #160	; 0xa0
 80035fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003606:	2303      	movs	r3, #3
 8003608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800360a:	2305      	movs	r3, #5
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003618:	f001 fee2 	bl	80053e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800361c:	bf00      	nop
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40013000 	.word	0x40013000
 8003628:	40021000 	.word	0x40021000

0800362c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <HAL_TIM_Base_MspInit+0x44>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d113      	bne.n	8003666 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <HAL_TIM_Base_MspInit+0x48>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_TIM_Base_MspInit+0x48>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	61d3      	str	r3, [r2, #28]
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_TIM_Base_MspInit+0x48>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	2100      	movs	r1, #0
 800365a:	201e      	movs	r0, #30
 800365c:	f001 fc9d 	bl	8004f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003660:	201e      	movs	r0, #30
 8003662:	f001 fcb6 	bl	8004fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40000800 	.word	0x40000800
 8003674:	40021000 	.word	0x40021000

08003678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08c      	sub	sp, #48	; 0x30
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003680:	f107 031c 	add.w	r3, r7, #28
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2f      	ldr	r2, [pc, #188]	; (8003754 <HAL_UART_MspInit+0xdc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d12a      	bne.n	80036f0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800369a:	4b2f      	ldr	r3, [pc, #188]	; (8003758 <HAL_UART_MspInit+0xe0>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	4a2e      	ldr	r2, [pc, #184]	; (8003758 <HAL_UART_MspInit+0xe0>)
 80036a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a4:	6193      	str	r3, [r2, #24]
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_UART_MspInit+0xe0>)
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_UART_MspInit+0xe0>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4a28      	ldr	r2, [pc, #160]	; (8003758 <HAL_UART_MspInit+0xe0>)
 80036b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036bc:	6153      	str	r3, [r2, #20]
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <HAL_UART_MspInit+0xe0>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d8:	2303      	movs	r3, #3
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036dc:	2307      	movs	r3, #7
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e0:	f107 031c 	add.w	r3, r7, #28
 80036e4:	4619      	mov	r1, r3
 80036e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ea:	f001 fe79 	bl	80053e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036ee:	e02c      	b.n	800374a <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_UART_MspInit+0xe4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d127      	bne.n	800374a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_UART_MspInit+0xe0>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_UART_MspInit+0xe0>)
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	61d3      	str	r3, [r2, #28]
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <HAL_UART_MspInit+0xe0>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_UART_MspInit+0xe0>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4a10      	ldr	r2, [pc, #64]	; (8003758 <HAL_UART_MspInit+0xe0>)
 8003718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371c:	6153      	str	r3, [r2, #20]
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_UART_MspInit+0xe0>)
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800372a:	2318      	movs	r3, #24
 800372c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003736:	2303      	movs	r3, #3
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800373a:	2307      	movs	r3, #7
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	4619      	mov	r1, r3
 8003744:	4806      	ldr	r0, [pc, #24]	; (8003760 <HAL_UART_MspInit+0xe8>)
 8003746:	f001 fe4b 	bl	80053e0 <HAL_GPIO_Init>
}
 800374a:	bf00      	nop
 800374c:	3730      	adds	r7, #48	; 0x30
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40013800 	.word	0x40013800
 8003758:	40021000 	.word	0x40021000
 800375c:	40004400 	.word	0x40004400
 8003760:	48000400 	.word	0x48000400

08003764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <NMI_Handler+0x4>

0800376a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <MemManage_Handler+0x4>

08003776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377a:	e7fe      	b.n	800377a <BusFault_Handler+0x4>

0800377c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <UsageFault_Handler+0x4>

08003782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b0:	f000 f994 	bl	8003adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	scint_counter++;
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <EXTI0_IRQHandler+0x40>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <EXTI0_IRQHandler+0x40>)
 80037c4:	6013      	str	r3, [r2, #0]

	if (cnt_pulse++ >= DIV_PULSE_LED - 1) {
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <EXTI0_IRQHandler+0x44>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	b2d1      	uxtb	r1, r2
 80037ce:	4a0b      	ldr	r2, [pc, #44]	; (80037fc <EXTI0_IRQHandler+0x44>)
 80037d0:	7011      	strb	r1, [r2, #0]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d90a      	bls.n	80037ec <EXTI0_IRQHandler+0x34>
		cnt_pulse = 0;
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <EXTI0_IRQHandler+0x44>)
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80037dc:	2201      	movs	r2, #1
 80037de:	2104      	movs	r1, #4
 80037e0:	4807      	ldr	r0, [pc, #28]	; (8003800 <EXTI0_IRQHandler+0x48>)
 80037e2:	f001 ff77 	bl	80056d4 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim4);
 80037e6:	4807      	ldr	r0, [pc, #28]	; (8003804 <EXTI0_IRQHandler+0x4c>)
 80037e8:	f005 f84a 	bl	8008880 <HAL_TIM_Base_Start_IT>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80037ec:	2001      	movs	r0, #1
 80037ee:	f001 ff89 	bl	8005704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000244 	.word	0x20000244
 80037fc:	2000054c 	.word	0x2000054c
 8003800:	48000400 	.word	0x48000400
 8003804:	200003f0 	.word	0x200003f0

08003808 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800380c:	2200      	movs	r2, #0
 800380e:	2104      	movs	r1, #4
 8003810:	4805      	ldr	r0, [pc, #20]	; (8003828 <TIM4_IRQHandler+0x20>)
 8003812:	f001 ff5f 	bl	80056d4 <HAL_GPIO_WritePin>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003816:	4805      	ldr	r0, [pc, #20]	; (800382c <TIM4_IRQHandler+0x24>)
 8003818:	f005 f986 	bl	8008b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
	HAL_TIM_Base_Stop_IT(&htim4);
 800381c:	4803      	ldr	r0, [pc, #12]	; (800382c <TIM4_IRQHandler+0x24>)
 800381e:	f005 f899 	bl	8008954 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END TIM4_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	48000400 	.word	0x48000400
 800382c:	200003f0 	.word	0x200003f0

08003830 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */
  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003834:	4803      	ldr	r0, [pc, #12]	; (8003844 <DMA2_Channel5_IRQHandler+0x14>)
 8003836:	f001 fcc5 	bl	80051c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 800383a:	4803      	ldr	r0, [pc, #12]	; (8003848 <DMA2_Channel5_IRQHandler+0x18>)
 800383c:	f000 fcac 	bl	8004198 <HAL_ADC_Stop_DMA>
  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200002f4 	.word	0x200002f4
 8003848:	200002a4 	.word	0x200002a4

0800384c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return 1;
 8003850:	2301      	movs	r3, #1
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_kill>:

int _kill(int pid, int sig)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003866:	f006 fd81 	bl	800a36c <__errno>
 800386a:	4603      	mov	r3, r0
 800386c:	2216      	movs	r2, #22
 800386e:	601a      	str	r2, [r3, #0]
  return -1;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_exit>:

void _exit (int status)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ffe7 	bl	800385c <_kill>
  while (1) {}    /* Make sure we hang here */
 800388e:	e7fe      	b.n	800388e <_exit+0x12>

08003890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e00a      	b.n	80038b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038a2:	f3af 8000 	nop.w
 80038a6:	4601      	mov	r1, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	60ba      	str	r2, [r7, #8]
 80038ae:	b2ca      	uxtb	r2, r1
 80038b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	dbf0      	blt.n	80038a2 <_read+0x12>
  }

  return len;
 80038c0:	687b      	ldr	r3, [r7, #4]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e009      	b.n	80038f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	60ba      	str	r2, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3301      	adds	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	dbf1      	blt.n	80038dc <_write+0x12>
  }
  return len;
 80038f8:	687b      	ldr	r3, [r7, #4]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <_close>:

int _close(int file)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800392a:	605a      	str	r2, [r3, #4]
  return 0;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_isatty>:

int _isatty(int file)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003942:	2301      	movs	r3, #1
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <_sbrk+0x5c>)
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <_sbrk+0x60>)
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <_sbrk+0x64>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <_sbrk+0x64>)
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <_sbrk+0x68>)
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <_sbrk+0x64>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d207      	bcs.n	80039ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800399c:	f006 fce6 	bl	800a36c <__errno>
 80039a0:	4603      	mov	r3, r0
 80039a2:	220c      	movs	r2, #12
 80039a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039aa:	e009      	b.n	80039c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <_sbrk+0x64>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <_sbrk+0x64>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	4a05      	ldr	r2, [pc, #20]	; (80039d0 <_sbrk+0x64>)
 80039bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	2000a000 	.word	0x2000a000
 80039cc:	00000400 	.word	0x00000400
 80039d0:	20000550 	.word	0x20000550
 80039d4:	20000568 	.word	0x20000568

080039d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <SystemInit+0x20>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <SystemInit+0x20>)
 80039e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a00:	f7ff ffea 	bl	80039d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a04:	480c      	ldr	r0, [pc, #48]	; (8003a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a06:	490d      	ldr	r1, [pc, #52]	; (8003a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a08:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <LoopForever+0xe>)
  movs r3, #0
 8003a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a0c:	e002      	b.n	8003a14 <LoopCopyDataInit>

08003a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a12:	3304      	adds	r3, #4

08003a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a18:	d3f9      	bcc.n	8003a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a1c:	4c0a      	ldr	r4, [pc, #40]	; (8003a48 <LoopForever+0x16>)
  movs r3, #0
 8003a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a20:	e001      	b.n	8003a26 <LoopFillZerobss>

08003a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a24:	3204      	adds	r2, #4

08003a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a28:	d3fb      	bcc.n	8003a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a2a:	f006 fca5 	bl	800a378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a2e:	f7fe fb7f 	bl	8002130 <main>

08003a32 <LoopForever>:

LoopForever:
    b LoopForever
 8003a32:	e7fe      	b.n	8003a32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a34:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a3c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003a40:	0800e094 	.word	0x0800e094
  ldr r2, =_sbss
 8003a44:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003a48:	20000568 	.word	0x20000568

08003a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a4c:	e7fe      	b.n	8003a4c <ADC1_2_IRQHandler>
	...

08003a50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a54:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_Init+0x28>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <HAL_Init+0x28>)
 8003a5a:	f043 0310 	orr.w	r3, r3, #16
 8003a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a60:	2003      	movs	r0, #3
 8003a62:	f001 fa8f 	bl	8004f84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a66:	200f      	movs	r0, #15
 8003a68:	f000 f808 	bl	8003a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a6c:	f7ff fcc0 	bl	80033f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40022000 	.word	0x40022000

08003a7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_InitTick+0x54>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_InitTick+0x58>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 faa7 	bl	8004fee <HAL_SYSTICK_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00e      	b.n	8003ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d80a      	bhi.n	8003ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab8:	f001 fa6f 	bl	8004f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003abc:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <HAL_InitTick+0x5c>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000010 	.word	0x20000010
 8003ad4:	20000018 	.word	0x20000018
 8003ad8:	20000014 	.word	0x20000014

08003adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_IncTick+0x20>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_IncTick+0x24>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_IncTick+0x24>)
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000018 	.word	0x20000018
 8003b00:	20000554 	.word	0x20000554

08003b04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return uwTick;  
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_GetTick+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000554 	.word	0x20000554

08003b1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b24:	f7ff ffee 	bl	8003b04 <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b34:	d005      	beq.n	8003b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_Delay+0x44>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003b42:	bf00      	nop
 8003b44:	f7ff ffde 	bl	8003b04 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d8f7      	bhi.n	8003b44 <HAL_Delay+0x28>
  {
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000018 	.word	0x20000018

08003b64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b09a      	sub	sp, #104	; 0x68
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e1c9      	b.n	8003f54 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d176      	bne.n	8003cc0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d152      	bne.n	8003c80 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fc1f 	bl	8003438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d13b      	bne.n	8003c80 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 ffcf 	bl	8004bac <ADC_Disable>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d12f      	bne.n	8003c80 <HAL_ADC_Init+0xe0>
 8003c20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d12b      	bne.n	8003c80 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c30:	f023 0302 	bic.w	r3, r3, #2
 8003c34:	f043 0202 	orr.w	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c4a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c5a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c5c:	4b86      	ldr	r3, [pc, #536]	; (8003e78 <HAL_ADC_Init+0x2d8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a86      	ldr	r2, [pc, #536]	; (8003e7c <HAL_ADC_Init+0x2dc>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	0c9a      	lsrs	r2, r3, #18
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c72:	e002      	b.n	8003c7a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f9      	bne.n	8003c74 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9c:	d110      	bne.n	8003cc0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f023 0312 	bic.w	r3, r3, #18
 8003ca6:	f043 0210 	orr.w	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f043 0201 	orr.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 8136 	bne.w	8003f3a <HAL_ADC_Init+0x39a>
 8003cce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 8131 	bne.w	8003f3a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 8129 	bne.w	8003f3a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cf0:	f043 0202 	orr.w	r2, r3, #2
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d00:	d004      	beq.n	8003d0c <HAL_ADC_Init+0x16c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <HAL_ADC_Init+0x2e0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_Init+0x170>
 8003d0c:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <HAL_ADC_Init+0x2e4>)
 8003d0e:	e000      	b.n	8003d12 <HAL_ADC_Init+0x172>
 8003d10:	4b5d      	ldr	r3, [pc, #372]	; (8003e88 <HAL_ADC_Init+0x2e8>)
 8003d12:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d1c:	d102      	bne.n	8003d24 <HAL_ADC_Init+0x184>
 8003d1e:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_ADC_Init+0x2e0>)
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e01a      	b.n	8003d5a <HAL_ADC_Init+0x1ba>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a55      	ldr	r2, [pc, #340]	; (8003e80 <HAL_ADC_Init+0x2e0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d103      	bne.n	8003d36 <HAL_ADC_Init+0x196>
 8003d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e011      	b.n	8003d5a <HAL_ADC_Init+0x1ba>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a54      	ldr	r2, [pc, #336]	; (8003e8c <HAL_ADC_Init+0x2ec>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d102      	bne.n	8003d46 <HAL_ADC_Init+0x1a6>
 8003d40:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <HAL_ADC_Init+0x2f0>)
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e009      	b.n	8003d5a <HAL_ADC_Init+0x1ba>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a51      	ldr	r2, [pc, #324]	; (8003e90 <HAL_ADC_Init+0x2f0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d102      	bne.n	8003d56 <HAL_ADC_Init+0x1b6>
 8003d50:	4b4e      	ldr	r3, [pc, #312]	; (8003e8c <HAL_ADC_Init+0x2ec>)
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e001      	b.n	8003d5a <HAL_ADC_Init+0x1ba>
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d108      	bne.n	8003d7a <HAL_ADC_Init+0x1da>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Init+0x1da>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_ADC_Init+0x1dc>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d11c      	bne.n	8003dba <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d010      	beq.n	8003da8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d107      	bne.n	8003da2 <HAL_ADC_Init+0x202>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_Init+0x202>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_ADC_Init+0x204>
 8003da2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7e5b      	ldrb	r3, [r3, #25]
 8003dbe:	035b      	lsls	r3, r3, #13
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dc4:	2a01      	cmp	r2, #1
 8003dc6:	d002      	beq.n	8003dce <HAL_ADC_Init+0x22e>
 8003dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dcc:	e000      	b.n	8003dd0 <HAL_ADC_Init+0x230>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003de0:	4313      	orrs	r3, r2
 8003de2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d11b      	bne.n	8003e26 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	7e5b      	ldrb	r3, [r3, #25]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	045a      	lsls	r2, r3, #17
 8003dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e06:	663b      	str	r3, [r7, #96]	; 0x60
 8003e08:	e00d      	b.n	8003e26 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f043 0201 	orr.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d03a      	beq.n	8003ea4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a16      	ldr	r2, [pc, #88]	; (8003e8c <HAL_ADC_Init+0x2ec>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_ADC_Init+0x2a2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <HAL_ADC_Init+0x2f0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d128      	bne.n	8003e94 <HAL_ADC_Init+0x2f4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003e4a:	d012      	beq.n	8003e72 <HAL_ADC_Init+0x2d2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e54:	d00a      	beq.n	8003e6c <HAL_ADC_Init+0x2cc>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003e5e:	d002      	beq.n	8003e66 <HAL_ADC_Init+0x2c6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	e018      	b.n	8003e98 <HAL_ADC_Init+0x2f8>
 8003e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e6a:	e015      	b.n	8003e98 <HAL_ADC_Init+0x2f8>
 8003e6c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003e70:	e012      	b.n	8003e98 <HAL_ADC_Init+0x2f8>
 8003e72:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003e76:	e00f      	b.n	8003e98 <HAL_ADC_Init+0x2f8>
 8003e78:	20000010 	.word	0x20000010
 8003e7c:	431bde83 	.word	0x431bde83
 8003e80:	50000100 	.word	0x50000100
 8003e84:	50000300 	.word	0x50000300
 8003e88:	50000700 	.word	0x50000700
 8003e8c:	50000400 	.word	0x50000400
 8003e90:	50000500 	.word	0x50000500
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d114      	bne.n	8003edc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec0:	f023 0302 	bic.w	r3, r3, #2
 8003ec4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7e1b      	ldrb	r3, [r3, #24]
 8003eca:	039a      	lsls	r2, r3, #14
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <HAL_ADC_Init+0x3bc>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003eec:	430b      	orrs	r3, r1
 8003eee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d10c      	bne.n	8003f12 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f023 010f 	bic.w	r1, r3, #15
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	1e5a      	subs	r2, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f10:	e007      	b.n	8003f22 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 020f 	bic.w	r2, r2, #15
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f023 0303 	bic.w	r3, r3, #3
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
 8003f38:	e00a      	b.n	8003f50 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f023 0312 	bic.w	r3, r3, #18
 8003f42:	f043 0210 	orr.w	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003f50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3768      	adds	r7, #104	; 0x68
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	fff0c007 	.word	0xfff0c007

08003f60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 80f7 	bne.w	800416e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_Start_DMA+0x2e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0f2      	b.n	8004174 <HAL_ADC_Start_DMA+0x214>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f9e:	d004      	beq.n	8003faa <HAL_ADC_Start_DMA+0x4a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a75      	ldr	r2, [pc, #468]	; (800417c <HAL_ADC_Start_DMA+0x21c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d109      	bne.n	8003fbe <HAL_ADC_Start_DMA+0x5e>
 8003faa:	4b75      	ldr	r3, [pc, #468]	; (8004180 <HAL_ADC_Start_DMA+0x220>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf0c      	ite	eq
 8003fb6:	2301      	moveq	r3, #1
 8003fb8:	2300      	movne	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	e008      	b.n	8003fd0 <HAL_ADC_Start_DMA+0x70>
 8003fbe:	4b71      	ldr	r3, [pc, #452]	; (8004184 <HAL_ADC_Start_DMA+0x224>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80c5 	beq.w	8004160 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fd84 	bl	8004ae4 <ADC_Enable>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 80b7 	bne.w	8004156 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004004:	d004      	beq.n	8004010 <HAL_ADC_Start_DMA+0xb0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5c      	ldr	r2, [pc, #368]	; (800417c <HAL_ADC_Start_DMA+0x21c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d106      	bne.n	800401e <HAL_ADC_Start_DMA+0xbe>
 8004010:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <HAL_ADC_Start_DMA+0x220>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <HAL_ADC_Start_DMA+0xde>
 800401c:	e005      	b.n	800402a <HAL_ADC_Start_DMA+0xca>
 800401e:	4b59      	ldr	r3, [pc, #356]	; (8004184 <HAL_ADC_Start_DMA+0x224>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_ADC_Start_DMA+0xde>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004032:	d004      	beq.n	800403e <HAL_ADC_Start_DMA+0xde>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a53      	ldr	r2, [pc, #332]	; (8004188 <HAL_ADC_Start_DMA+0x228>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d115      	bne.n	800406a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d036      	beq.n	80040c6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004060:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004068:	e02d      	b.n	80040c6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800407e:	d004      	beq.n	800408a <HAL_ADC_Start_DMA+0x12a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a3d      	ldr	r2, [pc, #244]	; (800417c <HAL_ADC_Start_DMA+0x21c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10a      	bne.n	80040a0 <HAL_ADC_Start_DMA+0x140>
 800408a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e008      	b.n	80040b2 <HAL_ADC_Start_DMA+0x152>
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HAL_ADC_Start_DMA+0x228>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d106      	bne.n	80040e2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	f023 0206 	bic.w	r2, r3, #6
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	645a      	str	r2, [r3, #68]	; 0x44
 80040e0:	e002      	b.n	80040e8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	4a25      	ldr	r2, [pc, #148]	; (800418c <HAL_ADC_Start_DMA+0x22c>)
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	4a24      	ldr	r2, [pc, #144]	; (8004190 <HAL_ADC_Start_DMA+0x230>)
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	4a23      	ldr	r2, [pc, #140]	; (8004194 <HAL_ADC_Start_DMA+0x234>)
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	221c      	movs	r2, #28
 800410e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0210 	orr.w	r2, r2, #16
 800411e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3340      	adds	r3, #64	; 0x40
 800413a:	4619      	mov	r1, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f000 ffa8 	bl	8005094 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0204 	orr.w	r2, r2, #4
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	e00d      	b.n	8004172 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800415e:	e008      	b.n	8004172 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800416c:	e001      	b.n	8004172 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800416e:	2302      	movs	r3, #2
 8004170:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	50000100 	.word	0x50000100
 8004180:	50000300 	.word	0x50000300
 8004184:	50000700 	.word	0x50000700
 8004188:	50000400 	.word	0x50000400
 800418c:	08004a19 	.word	0x08004a19
 8004190:	08004a93 	.word	0x08004a93
 8004194:	08004aaf 	.word	0x08004aaf

08004198 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_ADC_Stop_DMA+0x1a>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e050      	b.n	8004254 <HAL_ADC_Stop_DMA+0xbc>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80041ba:	216c      	movs	r1, #108	; 0x6c
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fd5b 	bl	8004c78 <ADC_ConversionStop>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d13e      	bne.n	800424a <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d10f      	bne.n	8004208 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 ffb0 	bl	8005152 <HAL_DMA_Abort>
 80041f2:	4603      	mov	r3, r0
 80041f4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0210 	bic.w	r2, r2, #16
 8004216:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d105      	bne.n	800422a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fcc4 	bl	8004bac <ADC_Disable>
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e002      	b.n	8004230 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fcbe 	bl	8004bac <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800425c:	b480      	push	{r7}
 800425e:	b09b      	sub	sp, #108	; 0x6c
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_ADC_ConfigChannel+0x22>
 800427a:	2302      	movs	r3, #2
 800427c:	e2ca      	b.n	8004814 <HAL_ADC_ConfigChannel+0x5b8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 82ae 	bne.w	80047f2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b04      	cmp	r3, #4
 800429c:	d81c      	bhi.n	80042d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4413      	add	r3, r2
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	461a      	mov	r2, r3
 80042b2:	231f      	movs	r3, #31
 80042b4:	4093      	lsls	r3, r2
 80042b6:	43db      	mvns	r3, r3
 80042b8:	4019      	ands	r1, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	fa00 f203 	lsl.w	r2, r0, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
 80042d6:	e063      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d81e      	bhi.n	800431e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	3b1e      	subs	r3, #30
 80042f4:	221f      	movs	r2, #31
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	4019      	ands	r1, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	3b1e      	subs	r3, #30
 8004310:	fa00 f203 	lsl.w	r2, r0, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	635a      	str	r2, [r3, #52]	; 0x34
 800431c:	e040      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b0e      	cmp	r3, #14
 8004324:	d81e      	bhi.n	8004364 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	3b3c      	subs	r3, #60	; 0x3c
 800433a:	221f      	movs	r2, #31
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	4019      	ands	r1, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	3b3c      	subs	r3, #60	; 0x3c
 8004356:	fa00 f203 	lsl.w	r2, r0, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	639a      	str	r2, [r3, #56]	; 0x38
 8004362:	e01d      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	3b5a      	subs	r3, #90	; 0x5a
 8004378:	221f      	movs	r2, #31
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	4019      	ands	r1, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	3b5a      	subs	r3, #90	; 0x5a
 8004394:	fa00 f203 	lsl.w	r2, r0, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 80e5 	bne.w	800457a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b09      	cmp	r3, #9
 80043b6:	d91c      	bls.n	80043f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6999      	ldr	r1, [r3, #24]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	4413      	add	r3, r2
 80043c8:	3b1e      	subs	r3, #30
 80043ca:	2207      	movs	r2, #7
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	4019      	ands	r1, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6898      	ldr	r0, [r3, #8]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	3b1e      	subs	r3, #30
 80043e4:	fa00 f203 	lsl.w	r2, r0, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	619a      	str	r2, [r3, #24]
 80043f0:	e019      	b.n	8004426 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6959      	ldr	r1, [r3, #20]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	2207      	movs	r2, #7
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	4019      	ands	r1, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6898      	ldr	r0, [r3, #8]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4413      	add	r3, r2
 800441a:	fa00 f203 	lsl.w	r2, r0, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	08db      	lsrs	r3, r3, #3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	3b01      	subs	r3, #1
 8004444:	2b03      	cmp	r3, #3
 8004446:	d84f      	bhi.n	80044e8 <HAL_ADC_ConfigChannel+0x28c>
 8004448:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_ADC_ConfigChannel+0x1f4>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004461 	.word	0x08004461
 8004454:	08004483 	.word	0x08004483
 8004458:	080044a5 	.word	0x080044a5
 800445c:	080044c7 	.word	0x080044c7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004466:	4b9a      	ldr	r3, [pc, #616]	; (80046d0 <HAL_ADC_ConfigChannel+0x474>)
 8004468:	4013      	ands	r3, r2
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	0691      	lsls	r1, r2, #26
 8004470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004472:	430a      	orrs	r2, r1
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800447e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004480:	e07e      	b.n	8004580 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004488:	4b91      	ldr	r3, [pc, #580]	; (80046d0 <HAL_ADC_ConfigChannel+0x474>)
 800448a:	4013      	ands	r3, r2
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	0691      	lsls	r1, r2, #26
 8004492:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004494:	430a      	orrs	r2, r1
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044a0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044a2:	e06d      	b.n	8004580 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044aa:	4b89      	ldr	r3, [pc, #548]	; (80046d0 <HAL_ADC_ConfigChannel+0x474>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	0691      	lsls	r1, r2, #26
 80044b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044b6:	430a      	orrs	r2, r1
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044c2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044c4:	e05c      	b.n	8004580 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80044cc:	4b80      	ldr	r3, [pc, #512]	; (80046d0 <HAL_ADC_ConfigChannel+0x474>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	0691      	lsls	r1, r2, #26
 80044d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044d8:	430a      	orrs	r2, r1
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044e4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044e6:	e04b      	b.n	8004580 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	069b      	lsls	r3, r3, #26
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d107      	bne.n	800450c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800450a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	069b      	lsls	r3, r3, #26
 800451c:	429a      	cmp	r2, r3
 800451e:	d107      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800452e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	069b      	lsls	r3, r3, #26
 8004540:	429a      	cmp	r2, r3
 8004542:	d107      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004552:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	069b      	lsls	r3, r3, #26
 8004564:	429a      	cmp	r2, r3
 8004566:	d10a      	bne.n	800457e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004576:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004578:	e001      	b.n	800457e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_ADC_ConfigChannel+0x324>
      break;
 800457e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d108      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x344>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x344>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <HAL_ADC_ConfigChannel+0x346>
 80045a0:	2300      	movs	r3, #0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f040 8130 	bne.w	8004808 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d00f      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43da      	mvns	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	400a      	ands	r2, r1
 80045ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80045ce:	e049      	b.n	8004664 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b09      	cmp	r3, #9
 80045f0:	d91c      	bls.n	800462c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6999      	ldr	r1, [r3, #24]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	3b1b      	subs	r3, #27
 8004604:	2207      	movs	r2, #7
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	4019      	ands	r1, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6898      	ldr	r0, [r3, #8]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	3b1b      	subs	r3, #27
 800461e:	fa00 f203 	lsl.w	r2, r0, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	619a      	str	r2, [r3, #24]
 800462a:	e01b      	b.n	8004664 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6959      	ldr	r1, [r3, #20]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	4613      	mov	r3, r2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	2207      	movs	r2, #7
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	4019      	ands	r1, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6898      	ldr	r0, [r3, #8]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	fa00 f203 	lsl.w	r2, r0, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800466c:	d004      	beq.n	8004678 <HAL_ADC_ConfigChannel+0x41c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <HAL_ADC_ConfigChannel+0x478>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_ADC_ConfigChannel+0x420>
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <HAL_ADC_ConfigChannel+0x47c>)
 800467a:	e000      	b.n	800467e <HAL_ADC_ConfigChannel+0x422>
 800467c:	4b17      	ldr	r3, [pc, #92]	; (80046dc <HAL_ADC_ConfigChannel+0x480>)
 800467e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b10      	cmp	r3, #16
 8004686:	d105      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004698:	2b11      	cmp	r3, #17
 800469a:	d105      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80046ac:	2b12      	cmp	r3, #18
 80046ae:	f040 80ab 	bne.w	8004808 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80046b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 80a4 	bne.w	8004808 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046c8:	d10a      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x484>
 80046ca:	4b02      	ldr	r3, [pc, #8]	; (80046d4 <HAL_ADC_ConfigChannel+0x478>)
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e022      	b.n	8004716 <HAL_ADC_ConfigChannel+0x4ba>
 80046d0:	83fff000 	.word	0x83fff000
 80046d4:	50000100 	.word	0x50000100
 80046d8:	50000300 	.word	0x50000300
 80046dc:	50000700 	.word	0x50000700
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a4e      	ldr	r2, [pc, #312]	; (8004820 <HAL_ADC_ConfigChannel+0x5c4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d103      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x496>
 80046ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e011      	b.n	8004716 <HAL_ADC_ConfigChannel+0x4ba>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a4b      	ldr	r2, [pc, #300]	; (8004824 <HAL_ADC_ConfigChannel+0x5c8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d102      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x4a6>
 80046fc:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <HAL_ADC_ConfigChannel+0x5cc>)
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e009      	b.n	8004716 <HAL_ADC_ConfigChannel+0x4ba>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a48      	ldr	r2, [pc, #288]	; (8004828 <HAL_ADC_ConfigChannel+0x5cc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d102      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x4b6>
 800470c:	4b45      	ldr	r3, [pc, #276]	; (8004824 <HAL_ADC_ConfigChannel+0x5c8>)
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e001      	b.n	8004716 <HAL_ADC_ConfigChannel+0x4ba>
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d108      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x4da>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x4da>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_ADC_ConfigChannel+0x4dc>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d150      	bne.n	80047de <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800473c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_ADC_ConfigChannel+0x502>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_ADC_ConfigChannel+0x502>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_ADC_ConfigChannel+0x504>
 800475e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004760:	2b00      	cmp	r3, #0
 8004762:	d13c      	bne.n	80047de <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b10      	cmp	r3, #16
 800476a:	d11d      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x54c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004774:	d118      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800477e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004780:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <HAL_ADC_ConfigChannel+0x5d0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <HAL_ADC_ConfigChannel+0x5d4>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	0c9a      	lsrs	r2, r3, #18
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004798:	e002      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3b01      	subs	r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f9      	bne.n	800479a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047a6:	e02e      	b.n	8004806 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b11      	cmp	r3, #17
 80047ae:	d10b      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x56c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047b8:	d106      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80047ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80047c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047c6:	e01e      	b.n	8004806 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b12      	cmp	r3, #18
 80047ce:	d11a      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80047d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047da:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047dc:	e013      	b.n	8004806 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047f0:	e00a      	b.n	8004808 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004804:	e000      	b.n	8004808 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004806:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004810:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004814:	4618      	mov	r0, r3
 8004816:	376c      	adds	r7, #108	; 0x6c
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	50000100 	.word	0x50000100
 8004824:	50000400 	.word	0x50000400
 8004828:	50000500 	.word	0x50000500
 800482c:	20000010 	.word	0x20000010
 8004830:	431bde83 	.word	0x431bde83

08004834 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004834:	b480      	push	{r7}
 8004836:	b099      	sub	sp, #100	; 0x64
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800484c:	d102      	bne.n	8004854 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800484e:	4b6d      	ldr	r3, [pc, #436]	; (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	e01a      	b.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a6a      	ldr	r2, [pc, #424]	; (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d103      	bne.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800485e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	e011      	b.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a67      	ldr	r2, [pc, #412]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d102      	bne.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004870:	4b66      	ldr	r3, [pc, #408]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	e009      	b.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a64      	ldr	r2, [pc, #400]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d102      	bne.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004880:	4b61      	ldr	r3, [pc, #388]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	e001      	b.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0b0      	b.n	80049f6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800489e:	2302      	movs	r3, #2
 80048a0:	e0a9      	b.n	80049f6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 808d 	bne.w	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 8086 	bne.w	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048d0:	d004      	beq.n	80048dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d101      	bne.n	80048e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80048dc:	4b4c      	ldr	r3, [pc, #304]	; (8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80048de:	e000      	b.n	80048e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80048e0:	4b4c      	ldr	r3, [pc, #304]	; (8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80048e2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d040      	beq.n	800496e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80048ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048fe:	035b      	lsls	r3, r3, #13
 8004900:	430b      	orrs	r3, r1
 8004902:	431a      	orrs	r2, r3
 8004904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004906:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d15c      	bne.n	80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d107      	bne.n	800494a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800494a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800494c:	2b00      	cmp	r3, #0
 800494e:	d14b      	bne.n	80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004958:	f023 030f 	bic.w	r3, r3, #15
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	6811      	ldr	r1, [r2, #0]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	6892      	ldr	r2, [r2, #8]
 8004964:	430a      	orrs	r2, r1
 8004966:	431a      	orrs	r2, r3
 8004968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800496a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800496c:	e03c      	b.n	80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800496e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004978:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d123      	bne.n	80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80049bc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d112      	bne.n	80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80049c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049ca:	f023 030f 	bic.w	r3, r3, #15
 80049ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049d0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80049d2:	e009      	b.n	80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80049e6:	e000      	b.n	80049ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80049e8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80049f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80049f6:	4618      	mov	r0, r3
 80049f8:	3764      	adds	r7, #100	; 0x64
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	50000100 	.word	0x50000100
 8004a08:	50000400 	.word	0x50000400
 8004a0c:	50000500 	.word	0x50000500
 8004a10:	50000300 	.word	0x50000300
 8004a14:	50000700 	.word	0x50000700

08004a18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d126      	bne.n	8004a80 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d115      	bne.n	8004a78 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d111      	bne.n	8004a78 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	f043 0201 	orr.w	r2, r3, #1
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff f873 	bl	8003b64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004a7e:	e004      	b.n	8004a8a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff f869 	bl	8003b78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff f859 	bl	8003b8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d108      	bne.n	8004b10 <ADC_Enable+0x2c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <ADC_Enable+0x2c>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <ADC_Enable+0x2e>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d143      	bne.n	8004b9e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <ADC_Enable+0xc4>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f043 0210 	orr.w	r2, r3, #16
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	f043 0201 	orr.w	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e02f      	b.n	8004ba0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004b50:	f7fe ffd8 	bl	8003b04 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b56:	e01b      	b.n	8004b90 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b58:	f7fe ffd4 	bl	8003b04 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d914      	bls.n	8004b90 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d00d      	beq.n	8004b90 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	f043 0210 	orr.w	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e007      	b.n	8004ba0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d1dc      	bne.n	8004b58 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	8000003f 	.word	0x8000003f

08004bac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d108      	bne.n	8004bd8 <ADC_Disable+0x2c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <ADC_Disable+0x2c>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <ADC_Disable+0x2e>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d047      	beq.n	8004c6e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030d 	and.w	r3, r3, #13
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10f      	bne.n	8004c0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0202 	orr.w	r2, r2, #2
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2203      	movs	r2, #3
 8004c02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004c04:	f7fe ff7e 	bl	8003b04 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c0a:	e029      	b.n	8004c60 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f043 0210 	orr.w	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	f043 0201 	orr.w	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e023      	b.n	8004c70 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c28:	f7fe ff6c 	bl	8003b04 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d914      	bls.n	8004c60 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d10d      	bne.n	8004c60 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	f043 0210 	orr.w	r2, r3, #16
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e007      	b.n	8004c70 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d0dc      	beq.n	8004c28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 809b 	beq.w	8004dd4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cac:	d12a      	bne.n	8004d04 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d126      	bne.n	8004d04 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d122      	bne.n	8004d04 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004cc2:	e014      	b.n	8004cee <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4a46      	ldr	r2, [pc, #280]	; (8004de0 <ADC_ConversionStop+0x168>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d90d      	bls.n	8004ce8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0210 	orr.w	r2, r3, #16
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	f043 0201 	orr.w	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e076      	b.n	8004dd6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	3301      	adds	r3, #1
 8004cec:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d1e3      	bne.n	8004cc4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2240      	movs	r2, #64	; 0x40
 8004d02:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b60      	cmp	r3, #96	; 0x60
 8004d08:	d015      	beq.n	8004d36 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d10e      	bne.n	8004d36 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d107      	bne.n	8004d36 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0210 	orr.w	r2, r2, #16
 8004d34:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d015      	beq.n	8004d68 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d10e      	bne.n	8004d68 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0220 	orr.w	r2, r2, #32
 8004d66:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b60      	cmp	r3, #96	; 0x60
 8004d6c:	d005      	beq.n	8004d7a <ADC_ConversionStop+0x102>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b6c      	cmp	r3, #108	; 0x6c
 8004d72:	d105      	bne.n	8004d80 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004d74:	230c      	movs	r3, #12
 8004d76:	617b      	str	r3, [r7, #20]
        break;
 8004d78:	e005      	b.n	8004d86 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	617b      	str	r3, [r7, #20]
        break;
 8004d7e:	e002      	b.n	8004d86 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004d80:	2304      	movs	r3, #4
 8004d82:	617b      	str	r3, [r7, #20]
        break;
 8004d84:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004d86:	f7fe febd 	bl	8003b04 <HAL_GetTick>
 8004d8a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d8c:	e01b      	b.n	8004dc6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d8e:	f7fe feb9 	bl	8003b04 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b0b      	cmp	r3, #11
 8004d9a:	d914      	bls.n	8004dc6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00d      	beq.n	8004dc6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e007      	b.n	8004dd6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1dc      	bne.n	8004d8e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	000993ff 	.word	0x000993ff

08004de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004df4:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <__NVIC_SetPriorityGrouping+0x44>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e00:	4013      	ands	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e16:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <__NVIC_SetPriorityGrouping+0x44>)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	60d3      	str	r3, [r2, #12]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	e000ed00 	.word	0xe000ed00

08004e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e30:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <__NVIC_GetPriorityGrouping+0x18>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	f003 0307 	and.w	r3, r3, #7
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000ed00 	.word	0xe000ed00

08004e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	db0b      	blt.n	8004e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	f003 021f 	and.w	r2, r3, #31
 8004e60:	4907      	ldr	r1, [pc, #28]	; (8004e80 <__NVIC_EnableIRQ+0x38>)
 8004e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2001      	movs	r0, #1
 8004e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	e000e100 	.word	0xe000e100

08004e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	6039      	str	r1, [r7, #0]
 8004e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	db0a      	blt.n	8004eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	490c      	ldr	r1, [pc, #48]	; (8004ed0 <__NVIC_SetPriority+0x4c>)
 8004e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea2:	0112      	lsls	r2, r2, #4
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004eac:	e00a      	b.n	8004ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	4908      	ldr	r1, [pc, #32]	; (8004ed4 <__NVIC_SetPriority+0x50>)
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	3b04      	subs	r3, #4
 8004ebc:	0112      	lsls	r2, r2, #4
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	761a      	strb	r2, [r3, #24]
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000e100 	.word	0xe000e100
 8004ed4:	e000ed00 	.word	0xe000ed00

08004ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	; 0x24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f1c3 0307 	rsb	r3, r3, #7
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	bf28      	it	cs
 8004ef6:	2304      	movcs	r3, #4
 8004ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3304      	adds	r3, #4
 8004efe:	2b06      	cmp	r3, #6
 8004f00:	d902      	bls.n	8004f08 <NVIC_EncodePriority+0x30>
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3b03      	subs	r3, #3
 8004f06:	e000      	b.n	8004f0a <NVIC_EncodePriority+0x32>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43da      	mvns	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	401a      	ands	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	43d9      	mvns	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f30:	4313      	orrs	r3, r2
         );
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3724      	adds	r7, #36	; 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f50:	d301      	bcc.n	8004f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f52:	2301      	movs	r3, #1
 8004f54:	e00f      	b.n	8004f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f56:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <SysTick_Config+0x40>)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f5e:	210f      	movs	r1, #15
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f64:	f7ff ff8e 	bl	8004e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <SysTick_Config+0x40>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <SysTick_Config+0x40>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	e000e010 	.word	0xe000e010

08004f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff ff29 	bl	8004de4 <__NVIC_SetPriorityGrouping>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fac:	f7ff ff3e 	bl	8004e2c <__NVIC_GetPriorityGrouping>
 8004fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	6978      	ldr	r0, [r7, #20]
 8004fb8:	f7ff ff8e 	bl	8004ed8 <NVIC_EncodePriority>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ff5d 	bl	8004e84 <__NVIC_SetPriority>
}
 8004fca:	bf00      	nop
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	4603      	mov	r3, r0
 8004fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff ff31 	bl	8004e48 <__NVIC_EnableIRQ>
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff ffa2 	bl	8004f40 <SysTick_Config>
 8004ffc:	4603      	mov	r3, r0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e037      	b.n	800508c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005032:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005036:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f97a 	bl	8005368 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}  
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA_Start_IT+0x20>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e04a      	b.n	800514a <HAL_DMA_Start_IT+0xb6>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d13a      	bne.n	800513c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f90d 	bl	800530a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 020e 	orr.w	r2, r2, #14
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e00f      	b.n	800512a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 020a 	orr.w	r2, r2, #10
 8005118:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0204 	bic.w	r2, r2, #4
 8005128:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e005      	b.n	8005148 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005144:	2302      	movs	r3, #2
 8005146:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005148:	7dfb      	ldrb	r3, [r7, #23]
} 
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005160:	2b02      	cmp	r3, #2
 8005162:	d008      	beq.n	8005176 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2204      	movs	r2, #4
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e020      	b.n	80051b8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 020e 	bic.w	r2, r2, #14
 8005184:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	2101      	movs	r1, #1
 80051a0:	fa01 f202 	lsl.w	r2, r1, r2
 80051a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2204      	movs	r2, #4
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d024      	beq.n	8005236 <HAL_DMA_IRQHandler+0x72>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01f      	beq.n	8005236 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d107      	bne.n	8005214 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0204 	bic.w	r2, r2, #4
 8005212:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	2104      	movs	r1, #4
 800521e:	fa01 f202 	lsl.w	r2, r1, r2
 8005222:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d06a      	beq.n	8005302 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005234:	e065      	b.n	8005302 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2202      	movs	r2, #2
 800523c:	409a      	lsls	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d02c      	beq.n	80052a0 <HAL_DMA_IRQHandler+0xdc>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d027      	beq.n	80052a0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10b      	bne.n	8005276 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 020a 	bic.w	r2, r2, #10
 800526c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	2102      	movs	r1, #2
 8005280:	fa01 f202 	lsl.w	r2, r1, r2
 8005284:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d035      	beq.n	8005302 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800529e:	e030      	b.n	8005302 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	2208      	movs	r2, #8
 80052a6:	409a      	lsls	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d028      	beq.n	8005302 <HAL_DMA_IRQHandler+0x13e>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d023      	beq.n	8005302 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 020e 	bic.w	r2, r2, #14
 80052c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	2101      	movs	r1, #1
 80052d4:	fa01 f202 	lsl.w	r2, r1, r2
 80052d8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d004      	beq.n	8005302 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	4798      	blx	r3
    }
  }
}  
 8005300:	e7ff      	b.n	8005302 <HAL_DMA_IRQHandler+0x13e>
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005320:	2101      	movs	r1, #1
 8005322:	fa01 f202 	lsl.w	r2, r1, r2
 8005326:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b10      	cmp	r3, #16
 8005336:	d108      	bne.n	800534a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005348:	e007      	b.n	800535a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	60da      	str	r2, [r3, #12]
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <DMA_CalcBaseAndBitshift+0x60>)
 8005378:	429a      	cmp	r2, r3
 800537a:	d80f      	bhi.n	800539c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <DMA_CalcBaseAndBitshift+0x64>)
 8005384:	4413      	add	r3, r2
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <DMA_CalcBaseAndBitshift+0x68>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	009a      	lsls	r2, r3, #2
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0f      	ldr	r2, [pc, #60]	; (80053d4 <DMA_CalcBaseAndBitshift+0x6c>)
 8005398:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800539a:	e00e      	b.n	80053ba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <DMA_CalcBaseAndBitshift+0x70>)
 80053a4:	4413      	add	r3, r2
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <DMA_CalcBaseAndBitshift+0x68>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	009a      	lsls	r2, r3, #2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <DMA_CalcBaseAndBitshift+0x74>)
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40020407 	.word	0x40020407
 80053cc:	bffdfff8 	.word	0xbffdfff8
 80053d0:	cccccccd 	.word	0xcccccccd
 80053d4:	40020000 	.word	0x40020000
 80053d8:	bffdfbf8 	.word	0xbffdfbf8
 80053dc:	40020400 	.word	0x40020400

080053e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053ee:	e154      	b.n	800569a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	2101      	movs	r1, #1
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	4013      	ands	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8146 	beq.w	8005694 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d005      	beq.n	8005420 <HAL_GPIO_Init+0x40>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d130      	bne.n	8005482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	2203      	movs	r2, #3
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4013      	ands	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005456:	2201      	movs	r2, #1
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4013      	ands	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 0201 	and.w	r2, r3, #1
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b03      	cmp	r3, #3
 800548c:	d017      	beq.n	80054be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2203      	movs	r2, #3
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4013      	ands	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d123      	bne.n	8005512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	08da      	lsrs	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3208      	adds	r2, #8
 80054d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	220f      	movs	r2, #15
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	08da      	lsrs	r2, r3, #3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3208      	adds	r2, #8
 800550c:	6939      	ldr	r1, [r7, #16]
 800550e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	2203      	movs	r2, #3
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4013      	ands	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 0203 	and.w	r2, r3, #3
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80a0 	beq.w	8005694 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005554:	4b58      	ldr	r3, [pc, #352]	; (80056b8 <HAL_GPIO_Init+0x2d8>)
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	4a57      	ldr	r2, [pc, #348]	; (80056b8 <HAL_GPIO_Init+0x2d8>)
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	6193      	str	r3, [r2, #24]
 8005560:	4b55      	ldr	r3, [pc, #340]	; (80056b8 <HAL_GPIO_Init+0x2d8>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800556c:	4a53      	ldr	r2, [pc, #332]	; (80056bc <HAL_GPIO_Init+0x2dc>)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	089b      	lsrs	r3, r3, #2
 8005572:	3302      	adds	r3, #2
 8005574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	220f      	movs	r2, #15
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4013      	ands	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005596:	d019      	beq.n	80055cc <HAL_GPIO_Init+0x1ec>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a49      	ldr	r2, [pc, #292]	; (80056c0 <HAL_GPIO_Init+0x2e0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <HAL_GPIO_Init+0x1e8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a48      	ldr	r2, [pc, #288]	; (80056c4 <HAL_GPIO_Init+0x2e4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00d      	beq.n	80055c4 <HAL_GPIO_Init+0x1e4>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a47      	ldr	r2, [pc, #284]	; (80056c8 <HAL_GPIO_Init+0x2e8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <HAL_GPIO_Init+0x1e0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a46      	ldr	r2, [pc, #280]	; (80056cc <HAL_GPIO_Init+0x2ec>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d101      	bne.n	80055bc <HAL_GPIO_Init+0x1dc>
 80055b8:	2304      	movs	r3, #4
 80055ba:	e008      	b.n	80055ce <HAL_GPIO_Init+0x1ee>
 80055bc:	2305      	movs	r3, #5
 80055be:	e006      	b.n	80055ce <HAL_GPIO_Init+0x1ee>
 80055c0:	2303      	movs	r3, #3
 80055c2:	e004      	b.n	80055ce <HAL_GPIO_Init+0x1ee>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e002      	b.n	80055ce <HAL_GPIO_Init+0x1ee>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_GPIO_Init+0x1ee>
 80055cc:	2300      	movs	r3, #0
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	f002 0203 	and.w	r2, r2, #3
 80055d4:	0092      	lsls	r2, r2, #2
 80055d6:	4093      	lsls	r3, r2
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055de:	4937      	ldr	r1, [pc, #220]	; (80056bc <HAL_GPIO_Init+0x2dc>)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055ec:	4b38      	ldr	r3, [pc, #224]	; (80056d0 <HAL_GPIO_Init+0x2f0>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4013      	ands	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005610:	4a2f      	ldr	r2, [pc, #188]	; (80056d0 <HAL_GPIO_Init+0x2f0>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005616:	4b2e      	ldr	r3, [pc, #184]	; (80056d0 <HAL_GPIO_Init+0x2f0>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	43db      	mvns	r3, r3
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800563a:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <HAL_GPIO_Init+0x2f0>)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005640:	4b23      	ldr	r3, [pc, #140]	; (80056d0 <HAL_GPIO_Init+0x2f0>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43db      	mvns	r3, r3
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005664:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <HAL_GPIO_Init+0x2f0>)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800566a:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <HAL_GPIO_Init+0x2f0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	43db      	mvns	r3, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800568e:	4a10      	ldr	r2, [pc, #64]	; (80056d0 <HAL_GPIO_Init+0x2f0>)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	3301      	adds	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f47f aea3 	bne.w	80053f0 <HAL_GPIO_Init+0x10>
  }
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40010000 	.word	0x40010000
 80056c0:	48000400 	.word	0x48000400
 80056c4:	48000800 	.word	0x48000800
 80056c8:	48000c00 	.word	0x48000c00
 80056cc:	48001000 	.word	0x48001000
 80056d0:	40010400 	.word	0x40010400

080056d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	807b      	strh	r3, [r7, #2]
 80056e0:	4613      	mov	r3, r2
 80056e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056e4:	787b      	ldrb	r3, [r7, #1]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ea:	887a      	ldrh	r2, [r7, #2]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056f0:	e002      	b.n	80056f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056f2:	887a      	ldrh	r2, [r7, #2]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	4013      	ands	r3, r2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800571a:	4a05      	ldr	r2, [pc, #20]	; (8005730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f806 	bl	8005734 <HAL_GPIO_EXTI_Callback>
  }
}
 8005728:	bf00      	nop
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40010400 	.word	0x40010400

08005734 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e081      	b.n	8005860 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7fd fecd 	bl	8003510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2224      	movs	r2, #36	; 0x24
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800579a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d107      	bne.n	80057c4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057c0:	609a      	str	r2, [r3, #8]
 80057c2:	e006      	b.n	80057d2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80057d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d104      	bne.n	80057e4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005806:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69d9      	ldr	r1, [r3, #28]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1a      	ldr	r2, [r3, #32]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	461a      	mov	r2, r3
 8005874:	460b      	mov	r3, r1
 8005876:	817b      	strh	r3, [r7, #10]
 8005878:	4613      	mov	r3, r2
 800587a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b20      	cmp	r3, #32
 8005886:	f040 80da 	bne.w	8005a3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_I2C_Master_Transmit+0x30>
 8005894:	2302      	movs	r3, #2
 8005896:	e0d3      	b.n	8005a40 <HAL_I2C_Master_Transmit+0x1d8>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058a0:	f7fe f930 	bl	8003b04 <HAL_GetTick>
 80058a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	2319      	movs	r3, #25
 80058ac:	2201      	movs	r2, #1
 80058ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fcbc 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e0be      	b.n	8005a40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2221      	movs	r2, #33	; 0x21
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2210      	movs	r2, #16
 80058ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	893a      	ldrh	r2, [r7, #8]
 80058e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2bff      	cmp	r3, #255	; 0xff
 80058f2:	d90e      	bls.n	8005912 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	22ff      	movs	r2, #255	; 0xff
 80058f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	8979      	ldrh	r1, [r7, #10]
 8005902:	4b51      	ldr	r3, [pc, #324]	; (8005a48 <HAL_I2C_Master_Transmit+0x1e0>)
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fecc 	bl	80066a8 <I2C_TransferConfig>
 8005910:	e06c      	b.n	80059ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005920:	b2da      	uxtb	r2, r3
 8005922:	8979      	ldrh	r1, [r7, #10]
 8005924:	4b48      	ldr	r3, [pc, #288]	; (8005a48 <HAL_I2C_Master_Transmit+0x1e0>)
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 febb 	bl	80066a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005932:	e05b      	b.n	80059ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	6a39      	ldr	r1, [r7, #32]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fcc8 	bl	80062ce <I2C_WaitOnTXISFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e07b      	b.n	8005a40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d034      	beq.n	80059ec <HAL_I2C_Master_Transmit+0x184>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d130      	bne.n	80059ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	2200      	movs	r2, #0
 8005992:	2180      	movs	r1, #128	; 0x80
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fc4b 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e04d      	b.n	8005a40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2bff      	cmp	r3, #255	; 0xff
 80059ac:	d90e      	bls.n	80059cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	8979      	ldrh	r1, [r7, #10]
 80059bc:	2300      	movs	r3, #0
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 fe6f 	bl	80066a8 <I2C_TransferConfig>
 80059ca:	e00f      	b.n	80059ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	8979      	ldrh	r1, [r7, #10]
 80059de:	2300      	movs	r3, #0
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fe5e 	bl	80066a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d19e      	bne.n	8005934 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	6a39      	ldr	r1, [r7, #32]
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fcae 	bl	800635c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e01a      	b.n	8005a40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6859      	ldr	r1, [r3, #4]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_I2C_Master_Transmit+0x1e4>)
 8005a1e:	400b      	ands	r3, r1
 8005a20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e000      	b.n	8005a40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
  }
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	80002000 	.word	0x80002000
 8005a4c:	fe00e800 	.word	0xfe00e800

08005a50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	817b      	strh	r3, [r7, #10]
 8005a60:	4613      	mov	r3, r2
 8005a62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	f040 80db 	bne.w	8005c28 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_I2C_Master_Receive+0x30>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e0d4      	b.n	8005c2a <HAL_I2C_Master_Receive+0x1da>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a88:	f7fe f83c 	bl	8003b04 <HAL_GetTick>
 8005a8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	2319      	movs	r3, #25
 8005a94:	2201      	movs	r2, #1
 8005a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fbc8 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0bf      	b.n	8005c2a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2222      	movs	r2, #34	; 0x22
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	893a      	ldrh	r2, [r7, #8]
 8005aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2bff      	cmp	r3, #255	; 0xff
 8005ada:	d90e      	bls.n	8005afa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	8979      	ldrh	r1, [r7, #10]
 8005aea:	4b52      	ldr	r3, [pc, #328]	; (8005c34 <HAL_I2C_Master_Receive+0x1e4>)
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fdd8 	bl	80066a8 <I2C_TransferConfig>
 8005af8:	e06d      	b.n	8005bd6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	8979      	ldrh	r1, [r7, #10]
 8005b0c:	4b49      	ldr	r3, [pc, #292]	; (8005c34 <HAL_I2C_Master_Receive+0x1e4>)
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fdc7 	bl	80066a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005b1a:	e05c      	b.n	8005bd6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	6a39      	ldr	r1, [r7, #32]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fc5f 	bl	80063e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e07c      	b.n	8005c2a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d034      	beq.n	8005bd6 <HAL_I2C_Master_Receive+0x186>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d130      	bne.n	8005bd6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fb56 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e04d      	b.n	8005c2a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2bff      	cmp	r3, #255	; 0xff
 8005b96:	d90e      	bls.n	8005bb6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	22ff      	movs	r2, #255	; 0xff
 8005b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	8979      	ldrh	r1, [r7, #10]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fd7a 	bl	80066a8 <I2C_TransferConfig>
 8005bb4:	e00f      	b.n	8005bd6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	8979      	ldrh	r1, [r7, #10]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fd69 	bl	80066a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d19d      	bne.n	8005b1c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	6a39      	ldr	r1, [r7, #32]
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fbb9 	bl	800635c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e01a      	b.n	8005c2a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_I2C_Master_Receive+0x1e8>)
 8005c08:	400b      	ands	r3, r1
 8005c0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	80002400 	.word	0x80002400
 8005c38:	fe00e800 	.word	0xfe00e800

08005c3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	817b      	strh	r3, [r7, #10]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	813b      	strh	r3, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	f040 80f9 	bne.w	8005e56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_I2C_Mem_Write+0x34>
 8005c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0ed      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_I2C_Mem_Write+0x4e>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e0e6      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c92:	f7fd ff37 	bl	8003b04 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	2319      	movs	r3, #25
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fac3 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0d1      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2221      	movs	r2, #33	; 0x21
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2240      	movs	r2, #64	; 0x40
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cdc:	88f8      	ldrh	r0, [r7, #6]
 8005cde:	893a      	ldrh	r2, [r7, #8]
 8005ce0:	8979      	ldrh	r1, [r7, #10]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4603      	mov	r3, r0
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f9d3 	bl	8006098 <I2C_RequestMemoryWrite>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0a9      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2bff      	cmp	r3, #255	; 0xff
 8005d0c:	d90e      	bls.n	8005d2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	22ff      	movs	r2, #255	; 0xff
 8005d12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fcbf 	bl	80066a8 <I2C_TransferConfig>
 8005d2a:	e00f      	b.n	8005d4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	8979      	ldrh	r1, [r7, #10]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fcae 	bl	80066a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fabc 	bl	80062ce <I2C_WaitOnTXISFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e07b      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d034      	beq.n	8005e04 <HAL_I2C_Mem_Write+0x1c8>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d130      	bne.n	8005e04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	2200      	movs	r2, #0
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 fa3f 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e04d      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2bff      	cmp	r3, #255	; 0xff
 8005dc4:	d90e      	bls.n	8005de4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	8979      	ldrh	r1, [r7, #10]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fc63 	bl	80066a8 <I2C_TransferConfig>
 8005de2:	e00f      	b.n	8005e04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	8979      	ldrh	r1, [r7, #10]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fc52 	bl	80066a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d19e      	bne.n	8005d4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 faa2 	bl	800635c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e01a      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2220      	movs	r2, #32
 8005e28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6859      	ldr	r1, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <HAL_I2C_Mem_Write+0x224>)
 8005e36:	400b      	ands	r3, r1
 8005e38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e000      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	fe00e800 	.word	0xfe00e800

08005e64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	4611      	mov	r1, r2
 8005e70:	461a      	mov	r2, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	817b      	strh	r3, [r7, #10]
 8005e76:	460b      	mov	r3, r1
 8005e78:	813b      	strh	r3, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	f040 80fd 	bne.w	8006086 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_I2C_Mem_Read+0x34>
 8005e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0f1      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2C_Mem_Read+0x4e>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e0ea      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eba:	f7fd fe23 	bl	8003b04 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2319      	movs	r3, #25
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f9af 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0d5      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2222      	movs	r2, #34	; 0x22
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2240      	movs	r2, #64	; 0x40
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f04:	88f8      	ldrh	r0, [r7, #6]
 8005f06:	893a      	ldrh	r2, [r7, #8]
 8005f08:	8979      	ldrh	r1, [r7, #10]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4603      	mov	r3, r0
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f913 	bl	8006140 <I2C_RequestMemoryRead>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0ad      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2bff      	cmp	r3, #255	; 0xff
 8005f34:	d90e      	bls.n	8005f54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	22ff      	movs	r2, #255	; 0xff
 8005f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	8979      	ldrh	r1, [r7, #10]
 8005f44:	4b52      	ldr	r3, [pc, #328]	; (8006090 <HAL_I2C_Mem_Read+0x22c>)
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fbab 	bl	80066a8 <I2C_TransferConfig>
 8005f52:	e00f      	b.n	8005f74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	8979      	ldrh	r1, [r7, #10]
 8005f66:	4b4a      	ldr	r3, [pc, #296]	; (8006090 <HAL_I2C_Mem_Read+0x22c>)
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fb9a 	bl	80066a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2104      	movs	r1, #4
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f956 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e07c      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d034      	beq.n	8006034 <HAL_I2C_Mem_Read+0x1d0>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d130      	bne.n	8006034 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f927 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e04d      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2bff      	cmp	r3, #255	; 0xff
 8005ff4:	d90e      	bls.n	8006014 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	22ff      	movs	r2, #255	; 0xff
 8005ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006000:	b2da      	uxtb	r2, r3
 8006002:	8979      	ldrh	r1, [r7, #10]
 8006004:	2300      	movs	r3, #0
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fb4b 	bl	80066a8 <I2C_TransferConfig>
 8006012:	e00f      	b.n	8006034 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006022:	b2da      	uxtb	r2, r3
 8006024:	8979      	ldrh	r1, [r7, #10]
 8006026:	2300      	movs	r3, #0
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 fb3a 	bl	80066a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d19a      	bne.n	8005f74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f98a 	bl	800635c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e01a      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2220      	movs	r2, #32
 8006058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6859      	ldr	r1, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <HAL_I2C_Mem_Read+0x230>)
 8006066:	400b      	ands	r3, r1
 8006068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	80002400 	.word	0x80002400
 8006094:	fe00e800 	.word	0xfe00e800

08006098 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	4608      	mov	r0, r1
 80060a2:	4611      	mov	r1, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4603      	mov	r3, r0
 80060a8:	817b      	strh	r3, [r7, #10]
 80060aa:	460b      	mov	r3, r1
 80060ac:	813b      	strh	r3, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	8979      	ldrh	r1, [r7, #10]
 80060b8:	4b20      	ldr	r3, [pc, #128]	; (800613c <I2C_RequestMemoryWrite+0xa4>)
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 faf1 	bl	80066a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	69b9      	ldr	r1, [r7, #24]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f8ff 	bl	80062ce <I2C_WaitOnTXISFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e02c      	b.n	8006134 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d105      	bne.n	80060ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
 80060ea:	e015      	b.n	8006118 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	69b9      	ldr	r1, [r7, #24]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 f8e5 	bl	80062ce <I2C_WaitOnTXISFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e012      	b.n	8006134 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800610e:	893b      	ldrh	r3, [r7, #8]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2200      	movs	r2, #0
 8006120:	2180      	movs	r1, #128	; 0x80
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f884 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	80002000 	.word	0x80002000

08006140 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4603      	mov	r3, r0
 8006150:	817b      	strh	r3, [r7, #10]
 8006152:	460b      	mov	r3, r1
 8006154:	813b      	strh	r3, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	8979      	ldrh	r1, [r7, #10]
 8006160:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <I2C_RequestMemoryRead+0xa4>)
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fa9e 	bl	80066a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	69b9      	ldr	r1, [r7, #24]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f8ac 	bl	80062ce <I2C_WaitOnTXISFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e02c      	b.n	80061da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d105      	bne.n	8006192 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006186:	893b      	ldrh	r3, [r7, #8]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
 8006190:	e015      	b.n	80061be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006192:	893b      	ldrh	r3, [r7, #8]
 8006194:	0a1b      	lsrs	r3, r3, #8
 8006196:	b29b      	uxth	r3, r3
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	69b9      	ldr	r1, [r7, #24]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f892 	bl	80062ce <I2C_WaitOnTXISFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e012      	b.n	80061da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061b4:	893b      	ldrh	r3, [r7, #8]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2200      	movs	r2, #0
 80061c6:	2140      	movs	r1, #64	; 0x40
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f831 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	80002000 	.word	0x80002000

080061e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d103      	bne.n	8006206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	d007      	beq.n	8006224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	619a      	str	r2, [r3, #24]
  }
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006240:	e031      	b.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006248:	d02d      	beq.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624a:	f7fd fc5b 	bl	8003b04 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d302      	bcc.n	8006260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d122      	bne.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	bf0c      	ite	eq
 8006270:	2301      	moveq	r3, #1
 8006272:	2300      	movne	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	429a      	cmp	r2, r3
 800627c:	d113      	bne.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e00f      	b.n	80062c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4013      	ands	r3, r2
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	bf0c      	ite	eq
 80062b6:	2301      	moveq	r3, #1
 80062b8:	2300      	movne	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d0be      	beq.n	8006242 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062da:	e033      	b.n	8006344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f901 	bl	80064e8 <I2C_IsErrorOccurred>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e031      	b.n	8006354 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f6:	d025      	beq.n	8006344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f8:	f7fd fc04 	bl	8003b04 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d11a      	bne.n	8006344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b02      	cmp	r3, #2
 800631a:	d013      	beq.n	8006344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e007      	b.n	8006354 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b02      	cmp	r3, #2
 8006350:	d1c4      	bne.n	80062dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006368:	e02f      	b.n	80063ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 f8ba 	bl	80064e8 <I2C_IsErrorOccurred>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e02d      	b.n	80063da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637e:	f7fd fbc1 	bl	8003b04 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	429a      	cmp	r2, r3
 800638c:	d302      	bcc.n	8006394 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d11a      	bne.n	80063ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d013      	beq.n	80063ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e007      	b.n	80063da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d1c8      	bne.n	800636a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063f0:	e06b      	b.n	80064ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f876 	bl	80064e8 <I2C_IsErrorOccurred>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e069      	b.n	80064da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b20      	cmp	r3, #32
 8006412:	d138      	bne.n	8006486 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b04      	cmp	r3, #4
 8006420:	d105      	bne.n	800642e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e055      	b.n	80064da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	2b10      	cmp	r3, #16
 800643a:	d107      	bne.n	800644c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2210      	movs	r2, #16
 8006442:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2204      	movs	r2, #4
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
 800644a:	e002      	b.n	8006452 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2220      	movs	r2, #32
 8006458:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6859      	ldr	r1, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006466:	400b      	ands	r3, r1
 8006468:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e029      	b.n	80064da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006486:	f7fd fb3d 	bl	8003b04 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d302      	bcc.n	800649c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d116      	bne.n	80064ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d00f      	beq.n	80064ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ae:	f043 0220 	orr.w	r2, r3, #32
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e007      	b.n	80064da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d18c      	bne.n	80063f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	fe00e800 	.word	0xfe00e800

080064e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	d068      	beq.n	80065e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2210      	movs	r2, #16
 800651a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800651c:	e049      	b.n	80065b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006524:	d045      	beq.n	80065b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006526:	f7fd faed 	bl	8003b04 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <I2C_IsErrorOccurred+0x54>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d13a      	bne.n	80065b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006546:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800654e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800655a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800655e:	d121      	bne.n	80065a4 <I2C_IsErrorOccurred+0xbc>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006566:	d01d      	beq.n	80065a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006568:	7cfb      	ldrb	r3, [r7, #19]
 800656a:	2b20      	cmp	r3, #32
 800656c:	d01a      	beq.n	80065a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800657c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800657e:	f7fd fac1 	bl	8003b04 <HAL_GetTick>
 8006582:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006584:	e00e      	b.n	80065a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006586:	f7fd fabd 	bl	8003b04 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b19      	cmp	r3, #25
 8006592:	d907      	bls.n	80065a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	f043 0320 	orr.w	r3, r3, #32
 800659a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80065a2:	e006      	b.n	80065b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d1e9      	bne.n	8006586 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d003      	beq.n	80065c8 <I2C_IsErrorOccurred+0xe0>
 80065c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0aa      	beq.n	800651e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2220      	movs	r2, #32
 80065d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	f043 0304 	orr.w	r3, r3, #4
 80065de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00b      	beq.n	8006610 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	f043 0308 	orr.w	r3, r3, #8
 8006620:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800662a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	f043 0302 	orr.w	r3, r3, #2
 8006642:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01c      	beq.n	8006696 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7ff fdc3 	bl	80061e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <I2C_IsErrorOccurred+0x1bc>)
 800666e:	400b      	ands	r3, r1
 8006670:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	431a      	orrs	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800669a:	4618      	mov	r0, r3
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	fe00e800 	.word	0xfe00e800

080066a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	817b      	strh	r3, [r7, #10]
 80066b6:	4613      	mov	r3, r2
 80066b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066ba:	897b      	ldrh	r3, [r7, #10]
 80066bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066c0:	7a7b      	ldrb	r3, [r7, #9]
 80066c2:	041b      	lsls	r3, r3, #16
 80066c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	0d5b      	lsrs	r3, r3, #21
 80066e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80066e6:	4b08      	ldr	r3, [pc, #32]	; (8006708 <I2C_TransferConfig+0x60>)
 80066e8:	430b      	orrs	r3, r1
 80066ea:	43db      	mvns	r3, r3
 80066ec:	ea02 0103 	and.w	r1, r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	03ff63ff 	.word	0x03ff63ff

0800670c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b20      	cmp	r3, #32
 8006720:	d138      	bne.n	8006794 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800672c:	2302      	movs	r3, #2
 800672e:	e032      	b.n	8006796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2224      	movs	r2, #36	; 0x24
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800675e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6819      	ldr	r1, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	e000      	b.n	8006796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006794:	2302      	movs	r3, #2
  }
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d139      	bne.n	800682c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067c2:	2302      	movs	r3, #2
 80067c4:	e033      	b.n	800682e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2224      	movs	r2, #36	; 0x24
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	e000      	b.n	800682e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800682c:	2302      	movs	r3, #2
  }
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800684a:	f043 0301 	orr.w	r3, r3, #1
 800684e:	6193      	str	r3, [r2, #24]
 8006850:	4b08      	ldr	r3, [pc, #32]	; (8006874 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	4905      	ldr	r1, [pc, #20]	; (8006878 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4313      	orrs	r3, r2
 8006866:	600b      	str	r3, [r1, #0]
}
 8006868:	bf00      	nop
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	40021000 	.word	0x40021000
 8006878:	40010000 	.word	0x40010000

0800687c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006882:	af00      	add	r7, sp, #0
 8006884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800688c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800688e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	f001 b823 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 817d 	beq.w	8006bb2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80068b8:	4bbc      	ldr	r3, [pc, #752]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f003 030c 	and.w	r3, r3, #12
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d00c      	beq.n	80068de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068c4:	4bb9      	ldr	r3, [pc, #740]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f003 030c 	and.w	r3, r3, #12
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d15c      	bne.n	800698a <HAL_RCC_OscConfig+0x10e>
 80068d0:	4bb6      	ldr	r3, [pc, #728]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068dc:	d155      	bne.n	800698a <HAL_RCC_OscConfig+0x10e>
 80068de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80068ea:	fa93 f3a3 	rbit	r3, r3
 80068ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80068f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f6:	fab3 f383 	clz	r3, r3
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d102      	bne.n	8006910 <HAL_RCC_OscConfig+0x94>
 800690a:	4ba8      	ldr	r3, [pc, #672]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	e015      	b.n	800693c <HAL_RCC_OscConfig+0xc0>
 8006910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006914:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800691c:	fa93 f3a3 	rbit	r3, r3
 8006920:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006928:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800692c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006930:	fa93 f3a3 	rbit	r3, r3
 8006934:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006938:	4b9c      	ldr	r3, [pc, #624]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006940:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006944:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006948:	fa92 f2a2 	rbit	r2, r2
 800694c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006950:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006954:	fab2 f282 	clz	r2, r2
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	f042 0220 	orr.w	r2, r2, #32
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	f002 021f 	and.w	r2, r2, #31
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f202 	lsl.w	r2, r1, r2
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 811f 	beq.w	8006bb0 <HAL_RCC_OscConfig+0x334>
 8006972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f040 8116 	bne.w	8006bb0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f000 bfaf 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800698a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800698e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699a:	d106      	bne.n	80069aa <HAL_RCC_OscConfig+0x12e>
 800699c:	4b83      	ldr	r3, [pc, #524]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a82      	ldr	r2, [pc, #520]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	e036      	b.n	8006a18 <HAL_RCC_OscConfig+0x19c>
 80069aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x158>
 80069ba:	4b7c      	ldr	r3, [pc, #496]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a7b      	ldr	r2, [pc, #492]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	4b79      	ldr	r3, [pc, #484]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a78      	ldr	r2, [pc, #480]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	e021      	b.n	8006a18 <HAL_RCC_OscConfig+0x19c>
 80069d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e4:	d10c      	bne.n	8006a00 <HAL_RCC_OscConfig+0x184>
 80069e6:	4b71      	ldr	r3, [pc, #452]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a70      	ldr	r2, [pc, #448]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	4b6e      	ldr	r3, [pc, #440]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a6d      	ldr	r2, [pc, #436]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 80069f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	e00b      	b.n	8006a18 <HAL_RCC_OscConfig+0x19c>
 8006a00:	4b6a      	ldr	r3, [pc, #424]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a69      	ldr	r2, [pc, #420]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	4b67      	ldr	r3, [pc, #412]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a66      	ldr	r2, [pc, #408]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a16:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a18:	4b64      	ldr	r3, [pc, #400]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	f023 020f 	bic.w	r2, r3, #15
 8006a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	495f      	ldr	r1, [pc, #380]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d059      	beq.n	8006af6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a42:	f7fd f85f 	bl	8003b04 <HAL_GetTick>
 8006a46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a4a:	e00a      	b.n	8006a62 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a4c:	f7fd f85a 	bl	8003b04 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b64      	cmp	r3, #100	; 0x64
 8006a5a:	d902      	bls.n	8006a62 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	f000 bf43 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>
 8006a62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a66:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006a6e:	fa93 f3a3 	rbit	r3, r3
 8006a72:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006a76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	fab3 f383 	clz	r3, r3
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d102      	bne.n	8006a94 <HAL_RCC_OscConfig+0x218>
 8006a8e:	4b47      	ldr	r3, [pc, #284]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	e015      	b.n	8006ac0 <HAL_RCC_OscConfig+0x244>
 8006a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a98:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006aa0:	fa93 f3a3 	rbit	r3, r3
 8006aa4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006aac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006ab0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006ab4:	fa93 f3a3 	rbit	r3, r3
 8006ab8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006abc:	4b3b      	ldr	r3, [pc, #236]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ac4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006ac8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006acc:	fa92 f2a2 	rbit	r2, r2
 8006ad0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006ad4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006ad8:	fab2 f282 	clz	r2, r2
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	f042 0220 	orr.w	r2, r2, #32
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	f002 021f 	and.w	r2, r2, #31
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f202 	lsl.w	r2, r1, r2
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0ab      	beq.n	8006a4c <HAL_RCC_OscConfig+0x1d0>
 8006af4:	e05d      	b.n	8006bb2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af6:	f7fd f805 	bl	8003b04 <HAL_GetTick>
 8006afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006afe:	e00a      	b.n	8006b16 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b00:	f7fd f800 	bl	8003b04 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b64      	cmp	r3, #100	; 0x64
 8006b0e:	d902      	bls.n	8006b16 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	f000 bee9 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>
 8006b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b1a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006b22:	fa93 f3a3 	rbit	r3, r3
 8006b26:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006b2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b2e:	fab3 f383 	clz	r3, r3
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d102      	bne.n	8006b48 <HAL_RCC_OscConfig+0x2cc>
 8006b42:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	e015      	b.n	8006b74 <HAL_RCC_OscConfig+0x2f8>
 8006b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b4c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006b54:	fa93 f3a3 	rbit	r3, r3
 8006b58:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b60:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006b64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006b68:	fa93 f3a3 	rbit	r3, r3
 8006b6c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <HAL_RCC_OscConfig+0x330>)
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b78:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006b7c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006b80:	fa92 f2a2 	rbit	r2, r2
 8006b84:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006b88:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006b8c:	fab2 f282 	clz	r2, r2
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	f042 0220 	orr.w	r2, r2, #32
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	f002 021f 	and.w	r2, r2, #31
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1ab      	bne.n	8006b00 <HAL_RCC_OscConfig+0x284>
 8006ba8:	e003      	b.n	8006bb2 <HAL_RCC_OscConfig+0x336>
 8006baa:	bf00      	nop
 8006bac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 817d 	beq.w	8006ec2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006bc8:	4ba6      	ldr	r3, [pc, #664]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f003 030c 	and.w	r3, r3, #12
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006bd4:	4ba3      	ldr	r3, [pc, #652]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f003 030c 	and.w	r3, r3, #12
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d172      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x44a>
 8006be0:	4ba0      	ldr	r3, [pc, #640]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d16c      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x44a>
 8006bec:	2302      	movs	r3, #2
 8006bee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006bf6:	fa93 f3a3 	rbit	r3, r3
 8006bfa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006bfe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c02:	fab3 f383 	clz	r3, r3
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f043 0301 	orr.w	r3, r3, #1
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d102      	bne.n	8006c1c <HAL_RCC_OscConfig+0x3a0>
 8006c16:	4b93      	ldr	r3, [pc, #588]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	e013      	b.n	8006c44 <HAL_RCC_OscConfig+0x3c8>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c22:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006c26:	fa93 f3a3 	rbit	r3, r3
 8006c2a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006c2e:	2302      	movs	r3, #2
 8006c30:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006c34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006c38:	fa93 f3a3 	rbit	r3, r3
 8006c3c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006c40:	4b88      	ldr	r3, [pc, #544]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	2202      	movs	r2, #2
 8006c46:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006c4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006c4e:	fa92 f2a2 	rbit	r2, r2
 8006c52:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006c56:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006c5a:	fab2 f282 	clz	r2, r2
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	f042 0220 	orr.w	r2, r2, #32
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	f002 021f 	and.w	r2, r2, #31
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_RCC_OscConfig+0x410>
 8006c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d002      	beq.n	8006c8c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f000 be2e 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8c:	4b75      	ldr	r3, [pc, #468]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	21f8      	movs	r1, #248	; 0xf8
 8006ca2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006caa:	fa91 f1a1 	rbit	r1, r1
 8006cae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006cb2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006cb6:	fab1 f181 	clz	r1, r1
 8006cba:	b2c9      	uxtb	r1, r1
 8006cbc:	408b      	lsls	r3, r1
 8006cbe:	4969      	ldr	r1, [pc, #420]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc4:	e0fd      	b.n	8006ec2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8088 	beq.w	8006de8 <HAL_RCC_OscConfig+0x56c>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cde:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006ce2:	fa93 f3a3 	rbit	r3, r3
 8006ce6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006cea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cee:	fab3 f383 	clz	r3, r3
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2301      	movs	r3, #1
 8006d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d04:	f7fc fefe 	bl	8003b04 <HAL_GetTick>
 8006d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0c:	e00a      	b.n	8006d24 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d0e:	f7fc fef9 	bl	8003b04 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d902      	bls.n	8006d24 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	f000 bde2 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006d2e:	fa93 f3a3 	rbit	r3, r3
 8006d32:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006d36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d3a:	fab3 f383 	clz	r3, r3
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d102      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4d8>
 8006d4e:	4b45      	ldr	r3, [pc, #276]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	e013      	b.n	8006d7c <HAL_RCC_OscConfig+0x500>
 8006d54:	2302      	movs	r3, #2
 8006d56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006d5e:	fa93 f3a3 	rbit	r3, r3
 8006d62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006d66:	2302      	movs	r3, #2
 8006d68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006d6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006d70:	fa93 f3a3 	rbit	r3, r3
 8006d74:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006d78:	4b3a      	ldr	r3, [pc, #232]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006d82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006d86:	fa92 f2a2 	rbit	r2, r2
 8006d8a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006d8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006d92:	fab2 f282 	clz	r2, r2
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	f042 0220 	orr.w	r2, r2, #32
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	f002 021f 	and.w	r2, r2, #31
 8006da2:	2101      	movs	r1, #1
 8006da4:	fa01 f202 	lsl.w	r2, r1, r2
 8006da8:	4013      	ands	r3, r2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0af      	beq.n	8006d0e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dae:	4b2d      	ldr	r3, [pc, #180]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	21f8      	movs	r1, #248	; 0xf8
 8006dc4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006dcc:	fa91 f1a1 	rbit	r1, r1
 8006dd0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006dd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006dd8:	fab1 f181 	clz	r1, r1
 8006ddc:	b2c9      	uxtb	r1, r1
 8006dde:	408b      	lsls	r3, r1
 8006de0:	4920      	ldr	r1, [pc, #128]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]
 8006de6:	e06c      	b.n	8006ec2 <HAL_RCC_OscConfig+0x646>
 8006de8:	2301      	movs	r3, #1
 8006dea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006df2:	fa93 f3a3 	rbit	r3, r3
 8006df6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006dfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dfe:	fab3 f383 	clz	r3, r3
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	461a      	mov	r2, r3
 8006e10:	2300      	movs	r3, #0
 8006e12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7fc fe76 	bl	8003b04 <HAL_GetTick>
 8006e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e1c:	e00a      	b.n	8006e34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e1e:	f7fc fe71 	bl	8003b04 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d902      	bls.n	8006e34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	f000 bd5a 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>
 8006e34:	2302      	movs	r3, #2
 8006e36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006e3e:	fa93 f3a3 	rbit	r3, r3
 8006e42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e4a:	fab3 f383 	clz	r3, r3
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d104      	bne.n	8006e68 <HAL_RCC_OscConfig+0x5ec>
 8006e5e:	4b01      	ldr	r3, [pc, #4]	; (8006e64 <HAL_RCC_OscConfig+0x5e8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	e015      	b.n	8006e90 <HAL_RCC_OscConfig+0x614>
 8006e64:	40021000 	.word	0x40021000
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e72:	fa93 f3a3 	rbit	r3, r3
 8006e76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e84:	fa93 f3a3 	rbit	r3, r3
 8006e88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e8c:	4bc8      	ldr	r3, [pc, #800]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2202      	movs	r2, #2
 8006e92:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006e96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006e9a:	fa92 f2a2 	rbit	r2, r2
 8006e9e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006ea2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006ea6:	fab2 f282 	clz	r2, r2
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	f042 0220 	orr.w	r2, r2, #32
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	f002 021f 	and.w	r2, r2, #31
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1ad      	bne.n	8006e1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 8110 	beq.w	80070f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d079      	beq.n	8006fdc <HAL_RCC_OscConfig+0x760>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ef2:	fa93 f3a3 	rbit	r3, r3
 8006ef6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006efe:	fab3 f383 	clz	r3, r3
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	4bab      	ldr	r3, [pc, #684]	; (80071b4 <HAL_RCC_OscConfig+0x938>)
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	2301      	movs	r3, #1
 8006f10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f12:	f7fc fdf7 	bl	8003b04 <HAL_GetTick>
 8006f16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f1a:	e00a      	b.n	8006f32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f1c:	f7fc fdf2 	bl	8003b04 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d902      	bls.n	8006f32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	f000 bcdb 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>
 8006f32:	2302      	movs	r3, #2
 8006f34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f3c:	fa93 f3a3 	rbit	r3, r3
 8006f40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	fa93 f2a3 	rbit	r2, r3
 8006f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f70:	2202      	movs	r2, #2
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	fa93 f2a3 	rbit	r2, r3
 8006f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f8c:	4b88      	ldr	r3, [pc, #544]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 8006f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006f98:	2102      	movs	r1, #2
 8006f9a:	6019      	str	r1, [r3, #0]
 8006f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fa0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	fa93 f1a3 	rbit	r1, r3
 8006faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006fb2:	6019      	str	r1, [r3, #0]
  return result;
 8006fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	fab3 f383 	clz	r3, r3
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	2101      	movs	r1, #1
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0a0      	beq.n	8006f1c <HAL_RCC_OscConfig+0x6a0>
 8006fda:	e08d      	b.n	80070f8 <HAL_RCC_OscConfig+0x87c>
 8006fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fe0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	fa93 f2a3 	rbit	r2, r3
 8006ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ffa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ffe:	601a      	str	r2, [r3, #0]
  return result;
 8007000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007004:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007008:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800700a:	fab3 f383 	clz	r3, r3
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	4b68      	ldr	r3, [pc, #416]	; (80071b4 <HAL_RCC_OscConfig+0x938>)
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	461a      	mov	r2, r3
 800701a:	2300      	movs	r3, #0
 800701c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800701e:	f7fc fd71 	bl	8003b04 <HAL_GetTick>
 8007022:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007026:	e00a      	b.n	800703e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007028:	f7fc fd6c 	bl	8003b04 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d902      	bls.n	800703e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	f000 bc55 	b.w	80078e8 <HAL_RCC_OscConfig+0x106c>
 800703e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007042:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007046:	2202      	movs	r2, #2
 8007048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800704e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	fa93 f2a3 	rbit	r2, r3
 8007058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800705c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007066:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800706a:	2202      	movs	r2, #2
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007072:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	fa93 f2a3 	rbit	r2, r3
 800707c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007080:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800708a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708e:	2202      	movs	r2, #2
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	fa93 f2a3 	rbit	r2, r3
 80070a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80070a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070aa:	4b41      	ldr	r3, [pc, #260]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 80070ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80070b6:	2102      	movs	r1, #2
 80070b8:	6019      	str	r1, [r3, #0]
 80070ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	fa93 f1a3 	rbit	r1, r3
 80070c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80070d0:	6019      	str	r1, [r3, #0]
  return result;
 80070d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	fab3 f383 	clz	r3, r3
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	2101      	movs	r1, #1
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	4013      	ands	r3, r2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d197      	bne.n	8007028 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 81a1 	beq.w	8007450 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800710e:	2300      	movs	r3, #0
 8007110:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007114:	4b26      	ldr	r3, [pc, #152]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d116      	bne.n	800714e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007120:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	4a22      	ldr	r2, [pc, #136]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 8007126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800712a:	61d3      	str	r3, [r2, #28]
 800712c:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007138:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007142:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007146:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007148:	2301      	movs	r3, #1
 800714a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800714e:	4b1a      	ldr	r3, [pc, #104]	; (80071b8 <HAL_RCC_OscConfig+0x93c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007156:	2b00      	cmp	r3, #0
 8007158:	d11a      	bne.n	8007190 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800715a:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <HAL_RCC_OscConfig+0x93c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <HAL_RCC_OscConfig+0x93c>)
 8007160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007164:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007166:	f7fc fccd 	bl	8003b04 <HAL_GetTick>
 800716a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800716e:	e009      	b.n	8007184 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007170:	f7fc fcc8 	bl	8003b04 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b64      	cmp	r3, #100	; 0x64
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e3b1      	b.n	80078e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007184:	4b0c      	ldr	r3, [pc, #48]	; (80071b8 <HAL_RCC_OscConfig+0x93c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ef      	beq.n	8007170 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007194:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d10d      	bne.n	80071bc <HAL_RCC_OscConfig+0x940>
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	4a02      	ldr	r2, [pc, #8]	; (80071b0 <HAL_RCC_OscConfig+0x934>)
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	6213      	str	r3, [r2, #32]
 80071ac:	e03c      	b.n	8007228 <HAL_RCC_OscConfig+0x9ac>
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000
 80071b4:	10908120 	.word	0x10908120
 80071b8:	40007000 	.word	0x40007000
 80071bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10c      	bne.n	80071e6 <HAL_RCC_OscConfig+0x96a>
 80071cc:	4bc1      	ldr	r3, [pc, #772]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	4ac0      	ldr	r2, [pc, #768]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80071d2:	f023 0301 	bic.w	r3, r3, #1
 80071d6:	6213      	str	r3, [r2, #32]
 80071d8:	4bbe      	ldr	r3, [pc, #760]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	4abd      	ldr	r2, [pc, #756]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80071de:	f023 0304 	bic.w	r3, r3, #4
 80071e2:	6213      	str	r3, [r2, #32]
 80071e4:	e020      	b.n	8007228 <HAL_RCC_OscConfig+0x9ac>
 80071e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2b05      	cmp	r3, #5
 80071f4:	d10c      	bne.n	8007210 <HAL_RCC_OscConfig+0x994>
 80071f6:	4bb7      	ldr	r3, [pc, #732]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	4ab6      	ldr	r2, [pc, #728]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80071fc:	f043 0304 	orr.w	r3, r3, #4
 8007200:	6213      	str	r3, [r2, #32]
 8007202:	4bb4      	ldr	r3, [pc, #720]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	4ab3      	ldr	r2, [pc, #716]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	6213      	str	r3, [r2, #32]
 800720e:	e00b      	b.n	8007228 <HAL_RCC_OscConfig+0x9ac>
 8007210:	4bb0      	ldr	r3, [pc, #704]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	4aaf      	ldr	r2, [pc, #700]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 8007216:	f023 0301 	bic.w	r3, r3, #1
 800721a:	6213      	str	r3, [r2, #32]
 800721c:	4bad      	ldr	r3, [pc, #692]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	4aac      	ldr	r2, [pc, #688]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 8007222:	f023 0304 	bic.w	r3, r3, #4
 8007226:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800722c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8081 	beq.w	800733c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800723a:	f7fc fc63 	bl	8003b04 <HAL_GetTick>
 800723e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007242:	e00b      	b.n	800725c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007244:	f7fc fc5e 	bl	8003b04 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	f241 3288 	movw	r2, #5000	; 0x1388
 8007254:	4293      	cmp	r3, r2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e345      	b.n	80078e8 <HAL_RCC_OscConfig+0x106c>
 800725c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007260:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007264:	2202      	movs	r2, #2
 8007266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800726c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	fa93 f2a3 	rbit	r2, r3
 8007276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800727a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007284:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007288:	2202      	movs	r2, #2
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007290:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	fa93 f2a3 	rbit	r2, r3
 800729a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800729e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80072a2:	601a      	str	r2, [r3, #0]
  return result;
 80072a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80072ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ae:	fab3 f383 	clz	r3, r3
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f043 0302 	orr.w	r3, r3, #2
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d102      	bne.n	80072c8 <HAL_RCC_OscConfig+0xa4c>
 80072c2:	4b84      	ldr	r3, [pc, #528]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	e013      	b.n	80072f0 <HAL_RCC_OscConfig+0xa74>
 80072c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80072d0:	2202      	movs	r2, #2
 80072d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	fa93 f2a3 	rbit	r2, r3
 80072e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	4b79      	ldr	r3, [pc, #484]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80072f8:	2102      	movs	r1, #2
 80072fa:	6011      	str	r1, [r2, #0]
 80072fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007300:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	fa92 f1a2 	rbit	r1, r2
 800730a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800730e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007312:	6011      	str	r1, [r2, #0]
  return result;
 8007314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007318:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800731c:	6812      	ldr	r2, [r2, #0]
 800731e:	fab2 f282 	clz	r2, r2
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	f002 021f 	and.w	r2, r2, #31
 800732e:	2101      	movs	r1, #1
 8007330:	fa01 f202 	lsl.w	r2, r1, r2
 8007334:	4013      	ands	r3, r2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d084      	beq.n	8007244 <HAL_RCC_OscConfig+0x9c8>
 800733a:	e07f      	b.n	800743c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800733c:	f7fc fbe2 	bl	8003b04 <HAL_GetTick>
 8007340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007344:	e00b      	b.n	800735e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fc fbdd 	bl	8003b04 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f241 3288 	movw	r2, #5000	; 0x1388
 8007356:	4293      	cmp	r3, r2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e2c4      	b.n	80078e8 <HAL_RCC_OscConfig+0x106c>
 800735e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007362:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007366:	2202      	movs	r2, #2
 8007368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800736e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	fa93 f2a3 	rbit	r2, r3
 8007378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800737c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007386:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800738a:	2202      	movs	r2, #2
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007392:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	fa93 f2a3 	rbit	r2, r3
 800739c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80073a4:	601a      	str	r2, [r3, #0]
  return result;
 80073a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80073ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073b0:	fab3 f383 	clz	r3, r3
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f043 0302 	orr.w	r3, r3, #2
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d102      	bne.n	80073ca <HAL_RCC_OscConfig+0xb4e>
 80073c4:	4b43      	ldr	r3, [pc, #268]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	e013      	b.n	80073f2 <HAL_RCC_OscConfig+0xb76>
 80073ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80073d2:	2202      	movs	r2, #2
 80073d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	fa93 f2a3 	rbit	r2, r3
 80073e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	4b39      	ldr	r3, [pc, #228]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80073f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80073fa:	2102      	movs	r1, #2
 80073fc:	6011      	str	r1, [r2, #0]
 80073fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007402:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	fa92 f1a2 	rbit	r1, r2
 800740c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007410:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007414:	6011      	str	r1, [r2, #0]
  return result;
 8007416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800741a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800741e:	6812      	ldr	r2, [r2, #0]
 8007420:	fab2 f282 	clz	r2, r2
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	f002 021f 	and.w	r2, r2, #31
 8007430:	2101      	movs	r1, #1
 8007432:	fa01 f202 	lsl.w	r2, r1, r2
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d184      	bne.n	8007346 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800743c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007440:	2b01      	cmp	r3, #1
 8007442:	d105      	bne.n	8007450 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007444:	4b23      	ldr	r3, [pc, #140]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	4a22      	ldr	r2, [pc, #136]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 800744a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800744e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007454:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8242 	beq.w	80078e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007462:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <HAL_RCC_OscConfig+0xc58>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	2b08      	cmp	r3, #8
 800746c:	f000 8213 	beq.w	8007896 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	2b02      	cmp	r3, #2
 800747e:	f040 8162 	bne.w	8007746 <HAL_RCC_OscConfig+0xeca>
 8007482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007486:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800748a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800748e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007494:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	fa93 f2a3 	rbit	r2, r3
 800749e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80074a6:	601a      	str	r2, [r3, #0]
  return result;
 80074a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80074b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b2:	fab3 f383 	clz	r3, r3
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	461a      	mov	r2, r3
 80074c4:	2300      	movs	r3, #0
 80074c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c8:	f7fc fb1c 	bl	8003b04 <HAL_GetTick>
 80074cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074d0:	e00c      	b.n	80074ec <HAL_RCC_OscConfig+0xc70>
 80074d2:	bf00      	nop
 80074d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074d8:	f7fc fb14 	bl	8003b04 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e1fd      	b.n	80078e8 <HAL_RCC_OscConfig+0x106c>
 80074ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80074f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80074f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	fa93 f2a3 	rbit	r2, r3
 8007508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800750c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007510:	601a      	str	r2, [r3, #0]
  return result;
 8007512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007516:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800751a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800751c:	fab3 f383 	clz	r3, r3
 8007520:	b2db      	uxtb	r3, r3
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d102      	bne.n	8007536 <HAL_RCC_OscConfig+0xcba>
 8007530:	4bb0      	ldr	r3, [pc, #704]	; (80077f4 <HAL_RCC_OscConfig+0xf78>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	e027      	b.n	8007586 <HAL_RCC_OscConfig+0xd0a>
 8007536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800753a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800753e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007548:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	fa93 f2a3 	rbit	r2, r3
 8007552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007556:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007560:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800756e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	fa93 f2a3 	rbit	r2, r3
 8007578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800757c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	4b9c      	ldr	r3, [pc, #624]	; (80077f4 <HAL_RCC_OscConfig+0xf78>)
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800758a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800758e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007592:	6011      	str	r1, [r2, #0]
 8007594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007598:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	fa92 f1a2 	rbit	r1, r2
 80075a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80075aa:	6011      	str	r1, [r2, #0]
  return result;
 80075ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	fab2 f282 	clz	r2, r2
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	f042 0220 	orr.w	r2, r2, #32
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	f002 021f 	and.w	r2, r2, #31
 80075c6:	2101      	movs	r1, #1
 80075c8:	fa01 f202 	lsl.w	r2, r1, r2
 80075cc:	4013      	ands	r3, r2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d182      	bne.n	80074d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075d2:	4b88      	ldr	r3, [pc, #544]	; (80077f4 <HAL_RCC_OscConfig+0xf78>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80075da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80075e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	430b      	orrs	r3, r1
 80075f4:	497f      	ldr	r1, [pc, #508]	; (80077f4 <HAL_RCC_OscConfig+0xf78>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	604b      	str	r3, [r1, #4]
 80075fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075fe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007602:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800760c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	fa93 f2a3 	rbit	r2, r3
 8007616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800761a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800761e:	601a      	str	r2, [r3, #0]
  return result;
 8007620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007624:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007628:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800762a:	fab3 f383 	clz	r3, r3
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	461a      	mov	r2, r3
 800763c:	2301      	movs	r3, #1
 800763e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007640:	f7fc fa60 	bl	8003b04 <HAL_GetTick>
 8007644:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007648:	e009      	b.n	800765e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800764a:	f7fc fa5b 	bl	8003b04 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d901      	bls.n	800765e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e144      	b.n	80078e8 <HAL_RCC_OscConfig+0x106c>
 800765e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007662:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800766a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800766c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007670:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	fa93 f2a3 	rbit	r2, r3
 800767a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800767e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007682:	601a      	str	r2, [r3, #0]
  return result;
 8007684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007688:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800768c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800768e:	fab3 f383 	clz	r3, r3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f043 0301 	orr.w	r3, r3, #1
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d102      	bne.n	80076a8 <HAL_RCC_OscConfig+0xe2c>
 80076a2:	4b54      	ldr	r3, [pc, #336]	; (80077f4 <HAL_RCC_OscConfig+0xf78>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	e027      	b.n	80076f8 <HAL_RCC_OscConfig+0xe7c>
 80076a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80076b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	fa93 f2a3 	rbit	r2, r3
 80076c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076d2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80076d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	fa93 f2a3 	rbit	r2, r3
 80076ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	4b3f      	ldr	r3, [pc, #252]	; (80077f4 <HAL_RCC_OscConfig+0xf78>)
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076fc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007700:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007704:	6011      	str	r1, [r2, #0]
 8007706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800770a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	fa92 f1a2 	rbit	r1, r2
 8007714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007718:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800771c:	6011      	str	r1, [r2, #0]
  return result;
 800771e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007722:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	fab2 f282 	clz	r2, r2
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	f042 0220 	orr.w	r2, r2, #32
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	f002 021f 	and.w	r2, r2, #31
 8007738:	2101      	movs	r1, #1
 800773a:	fa01 f202 	lsl.w	r2, r1, r2
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d082      	beq.n	800764a <HAL_RCC_OscConfig+0xdce>
 8007744:	e0cf      	b.n	80078e6 <HAL_RCC_OscConfig+0x106a>
 8007746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800774a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800774e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007758:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	fa93 f2a3 	rbit	r2, r3
 8007762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007766:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800776a:	601a      	str	r2, [r3, #0]
  return result;
 800776c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007770:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007774:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007776:	fab3 f383 	clz	r3, r3
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007780:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	461a      	mov	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800778c:	f7fc f9ba 	bl	8003b04 <HAL_GetTick>
 8007790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007794:	e009      	b.n	80077aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007796:	f7fc f9b5 	bl	8003b04 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e09e      	b.n	80078e8 <HAL_RCC_OscConfig+0x106c>
 80077aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80077b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80077b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077bc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	fa93 f2a3 	rbit	r2, r3
 80077c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80077ce:	601a      	str	r2, [r3, #0]
  return result;
 80077d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80077d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077da:	fab3 f383 	clz	r3, r3
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	095b      	lsrs	r3, r3, #5
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d104      	bne.n	80077f8 <HAL_RCC_OscConfig+0xf7c>
 80077ee:	4b01      	ldr	r3, [pc, #4]	; (80077f4 <HAL_RCC_OscConfig+0xf78>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	e029      	b.n	8007848 <HAL_RCC_OscConfig+0xfcc>
 80077f4:	40021000 	.word	0x40021000
 80077f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800780a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	fa93 f2a3 	rbit	r2, r3
 8007814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007818:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007822:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007830:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	fa93 f2a3 	rbit	r2, r3
 800783a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800783e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <HAL_RCC_OscConfig+0x1078>)
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800784c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007850:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007854:	6011      	str	r1, [r2, #0]
 8007856:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800785a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800785e:	6812      	ldr	r2, [r2, #0]
 8007860:	fa92 f1a2 	rbit	r1, r2
 8007864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007868:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800786c:	6011      	str	r1, [r2, #0]
  return result;
 800786e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007872:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007876:	6812      	ldr	r2, [r2, #0]
 8007878:	fab2 f282 	clz	r2, r2
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	f042 0220 	orr.w	r2, r2, #32
 8007882:	b2d2      	uxtb	r2, r2
 8007884:	f002 021f 	and.w	r2, r2, #31
 8007888:	2101      	movs	r1, #1
 800788a:	fa01 f202 	lsl.w	r2, r1, r2
 800788e:	4013      	ands	r3, r2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d180      	bne.n	8007796 <HAL_RCC_OscConfig+0xf1a>
 8007894:	e027      	b.n	80078e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800789a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e01e      	b.n	80078e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <HAL_RCC_OscConfig+0x1078>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80078b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80078b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80078ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d10b      	bne.n	80078e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80078ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80078ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80078d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80078de:	429a      	cmp	r2, r3
 80078e0:	d001      	beq.n	80078e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40021000 	.word	0x40021000

080078f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b09e      	sub	sp, #120	; 0x78
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e162      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007910:	4b90      	ldr	r3, [pc, #576]	; (8007b54 <HAL_RCC_ClockConfig+0x25c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d910      	bls.n	8007940 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800791e:	4b8d      	ldr	r3, [pc, #564]	; (8007b54 <HAL_RCC_ClockConfig+0x25c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 0207 	bic.w	r2, r3, #7
 8007926:	498b      	ldr	r1, [pc, #556]	; (8007b54 <HAL_RCC_ClockConfig+0x25c>)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	4313      	orrs	r3, r2
 800792c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800792e:	4b89      	ldr	r3, [pc, #548]	; (8007b54 <HAL_RCC_ClockConfig+0x25c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d001      	beq.n	8007940 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e14a      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d008      	beq.n	800795e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800794c:	4b82      	ldr	r3, [pc, #520]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	497f      	ldr	r1, [pc, #508]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 800795a:	4313      	orrs	r3, r2
 800795c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 80dc 	beq.w	8007b24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d13c      	bne.n	80079ee <HAL_RCC_ClockConfig+0xf6>
 8007974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007978:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800797a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800797c:	fa93 f3a3 	rbit	r3, r3
 8007980:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007984:	fab3 f383 	clz	r3, r3
 8007988:	b2db      	uxtb	r3, r3
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	b2db      	uxtb	r3, r3
 800798e:	f043 0301 	orr.w	r3, r3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d102      	bne.n	800799e <HAL_RCC_ClockConfig+0xa6>
 8007998:	4b6f      	ldr	r3, [pc, #444]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	e00f      	b.n	80079be <HAL_RCC_ClockConfig+0xc6>
 800799e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079a6:	fa93 f3a3 	rbit	r3, r3
 80079aa:	667b      	str	r3, [r7, #100]	; 0x64
 80079ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079b0:	663b      	str	r3, [r7, #96]	; 0x60
 80079b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079b4:	fa93 f3a3 	rbit	r3, r3
 80079b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079ba:	4b67      	ldr	r3, [pc, #412]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80079c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80079c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079c6:	fa92 f2a2 	rbit	r2, r2
 80079ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80079cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079ce:	fab2 f282 	clz	r2, r2
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	f042 0220 	orr.w	r2, r2, #32
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	f002 021f 	and.w	r2, r2, #31
 80079de:	2101      	movs	r1, #1
 80079e0:	fa01 f202 	lsl.w	r2, r1, r2
 80079e4:	4013      	ands	r3, r2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d17b      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e0f3      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d13c      	bne.n	8007a70 <HAL_RCC_ClockConfig+0x178>
 80079f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fe:	fa93 f3a3 	rbit	r3, r3
 8007a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a06:	fab3 f383 	clz	r3, r3
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	095b      	lsrs	r3, r3, #5
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f043 0301 	orr.w	r3, r3, #1
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d102      	bne.n	8007a20 <HAL_RCC_ClockConfig+0x128>
 8007a1a:	4b4f      	ldr	r3, [pc, #316]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	e00f      	b.n	8007a40 <HAL_RCC_ClockConfig+0x148>
 8007a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a28:	fa93 f3a3 	rbit	r3, r3
 8007a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a32:	643b      	str	r3, [r7, #64]	; 0x40
 8007a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a36:	fa93 f3a3 	rbit	r3, r3
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a3c:	4b46      	ldr	r3, [pc, #280]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a44:	63ba      	str	r2, [r7, #56]	; 0x38
 8007a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a48:	fa92 f2a2 	rbit	r2, r2
 8007a4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a50:	fab2 f282 	clz	r2, r2
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	f042 0220 	orr.w	r2, r2, #32
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	f002 021f 	and.w	r2, r2, #31
 8007a60:	2101      	movs	r1, #1
 8007a62:	fa01 f202 	lsl.w	r2, r1, r2
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d13a      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e0b2      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x2de>
 8007a70:	2302      	movs	r3, #2
 8007a72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	fa93 f3a3 	rbit	r3, r3
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a7e:	fab3 f383 	clz	r3, r3
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f043 0301 	orr.w	r3, r3, #1
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d102      	bne.n	8007a98 <HAL_RCC_ClockConfig+0x1a0>
 8007a92:	4b31      	ldr	r3, [pc, #196]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	e00d      	b.n	8007ab4 <HAL_RCC_ClockConfig+0x1bc>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	fa93 f3a3 	rbit	r3, r3
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	623b      	str	r3, [r7, #32]
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	fa93 f3a3 	rbit	r3, r3
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	4b29      	ldr	r3, [pc, #164]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	61ba      	str	r2, [r7, #24]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	fa92 f2a2 	rbit	r2, r2
 8007abe:	617a      	str	r2, [r7, #20]
  return result;
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	fab2 f282 	clz	r2, r2
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	f042 0220 	orr.w	r2, r2, #32
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	f002 021f 	and.w	r2, r2, #31
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ad8:	4013      	ands	r3, r2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e079      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ae2:	4b1d      	ldr	r3, [pc, #116]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f023 0203 	bic.w	r2, r3, #3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	491a      	ldr	r1, [pc, #104]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007af4:	f7fc f806 	bl	8003b04 <HAL_GetTick>
 8007af8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007afa:	e00a      	b.n	8007b12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007afc:	f7fc f802 	bl	8003b04 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e061      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b12:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <HAL_RCC_ClockConfig+0x260>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f003 020c 	and.w	r2, r3, #12
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d1eb      	bne.n	8007afc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <HAL_RCC_ClockConfig+0x25c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d214      	bcs.n	8007b5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <HAL_RCC_ClockConfig+0x25c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f023 0207 	bic.w	r2, r3, #7
 8007b3a:	4906      	ldr	r1, [pc, #24]	; (8007b54 <HAL_RCC_ClockConfig+0x25c>)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b42:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <HAL_RCC_ClockConfig+0x25c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d005      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e040      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x2de>
 8007b54:	40022000 	.word	0x40022000
 8007b58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d008      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b68:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	491a      	ldr	r1, [pc, #104]	; (8007be0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b86:	4b16      	ldr	r3, [pc, #88]	; (8007be0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4912      	ldr	r1, [pc, #72]	; (8007be0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007b9a:	f000 f829 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <HAL_RCC_ClockConfig+0x2e8>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ba8:	22f0      	movs	r2, #240	; 0xf0
 8007baa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	fa92 f2a2 	rbit	r2, r2
 8007bb2:	60fa      	str	r2, [r7, #12]
  return result;
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	fab2 f282 	clz	r2, r2
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	40d3      	lsrs	r3, r2
 8007bbe:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <HAL_RCC_ClockConfig+0x2ec>)
 8007bc0:	5cd3      	ldrb	r3, [r2, r3]
 8007bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8007bc6:	4a08      	ldr	r2, [pc, #32]	; (8007be8 <HAL_RCC_ClockConfig+0x2f0>)
 8007bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007bca:	4b08      	ldr	r3, [pc, #32]	; (8007bec <HAL_RCC_ClockConfig+0x2f4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fb ff54 	bl	8003a7c <HAL_InitTick>
  
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3778      	adds	r7, #120	; 0x78
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40021000 	.word	0x40021000
 8007be4:	0800dc74 	.word	0x0800dc74
 8007be8:	20000010 	.word	0x20000010
 8007bec:	20000014 	.word	0x20000014

08007bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b08b      	sub	sp, #44	; 0x2c
 8007bf4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	627b      	str	r3, [r7, #36]	; 0x24
 8007c02:	2300      	movs	r3, #0
 8007c04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007c0a:	4b29      	ldr	r3, [pc, #164]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f003 030c 	and.w	r3, r3, #12
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d002      	beq.n	8007c20 <HAL_RCC_GetSysClockFreq+0x30>
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d003      	beq.n	8007c26 <HAL_RCC_GetSysClockFreq+0x36>
 8007c1e:	e03c      	b.n	8007c9a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c20:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c22:	623b      	str	r3, [r7, #32]
      break;
 8007c24:	e03c      	b.n	8007ca0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007c2c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007c30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	fa92 f2a2 	rbit	r2, r2
 8007c38:	607a      	str	r2, [r7, #4]
  return result;
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	fab2 f282 	clz	r2, r2
 8007c40:	b2d2      	uxtb	r2, r2
 8007c42:	40d3      	lsrs	r3, r2
 8007c44:	4a1c      	ldr	r2, [pc, #112]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007c46:	5cd3      	ldrb	r3, [r2, r3]
 8007c48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007c4a:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	220f      	movs	r2, #15
 8007c54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	fa92 f2a2 	rbit	r2, r2
 8007c5c:	60fa      	str	r2, [r7, #12]
  return result;
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	fab2 f282 	clz	r2, r2
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	40d3      	lsrs	r3, r2
 8007c68:	4a14      	ldr	r2, [pc, #80]	; (8007cbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c6a:	5cd3      	ldrb	r3, [r2, r3]
 8007c6c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d008      	beq.n	8007c8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007c78:	4a0e      	ldr	r2, [pc, #56]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	fb02 f303 	mul.w	r3, r2, r3
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
 8007c88:	e004      	b.n	8007c94 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	4a0c      	ldr	r2, [pc, #48]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	623b      	str	r3, [r7, #32]
      break;
 8007c98:	e002      	b.n	8007ca0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c9a:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007c9c:	623b      	str	r3, [r7, #32]
      break;
 8007c9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	372c      	adds	r7, #44	; 0x2c
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	00f42400 	.word	0x00f42400
 8007cb8:	0800dc8c 	.word	0x0800dc8c
 8007cbc:	0800dc9c 	.word	0x0800dc9c
 8007cc0:	003d0900 	.word	0x003d0900
 8007cc4:	007a1200 	.word	0x007a1200

08007cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ccc:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8007cce:	681b      	ldr	r3, [r3, #0]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000010 	.word	0x20000010

08007ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007ce6:	f7ff ffef 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8007cea:	4601      	mov	r1, r0
 8007cec:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cf4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007cf8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	fa92 f2a2 	rbit	r2, r2
 8007d00:	603a      	str	r2, [r7, #0]
  return result;
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	fab2 f282 	clz	r2, r2
 8007d08:	b2d2      	uxtb	r2, r2
 8007d0a:	40d3      	lsrs	r3, r2
 8007d0c:	4a04      	ldr	r2, [pc, #16]	; (8007d20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007d0e:	5cd3      	ldrb	r3, [r2, r3]
 8007d10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	40021000 	.word	0x40021000
 8007d20:	0800dc84 	.word	0x0800dc84

08007d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007d2a:	f7ff ffcd 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8007d2e:	4601      	mov	r1, r0
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007d38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007d3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	fa92 f2a2 	rbit	r2, r2
 8007d44:	603a      	str	r2, [r7, #0]
  return result;
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	fab2 f282 	clz	r2, r2
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	40d3      	lsrs	r3, r2
 8007d50:	4a04      	ldr	r2, [pc, #16]	; (8007d64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007d52:	5cd3      	ldrb	r3, [r2, r3]
 8007d54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40021000 	.word	0x40021000
 8007d64:	0800dc84 	.word	0x0800dc84

08007d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b092      	sub	sp, #72	; 0x48
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80d4 	beq.w	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d8c:	4b4e      	ldr	r3, [pc, #312]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10e      	bne.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d98:	4b4b      	ldr	r3, [pc, #300]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	4a4a      	ldr	r2, [pc, #296]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007da2:	61d3      	str	r3, [r2, #28]
 8007da4:	4b48      	ldr	r3, [pc, #288]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dac:	60bb      	str	r3, [r7, #8]
 8007dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007db6:	4b45      	ldr	r3, [pc, #276]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d118      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dc2:	4b42      	ldr	r3, [pc, #264]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a41      	ldr	r2, [pc, #260]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dce:	f7fb fe99 	bl	8003b04 <HAL_GetTick>
 8007dd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dd4:	e008      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dd6:	f7fb fe95 	bl	8003b04 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b64      	cmp	r3, #100	; 0x64
 8007de2:	d901      	bls.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e169      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007de8:	4b38      	ldr	r3, [pc, #224]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d0f0      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007df4:	4b34      	ldr	r3, [pc, #208]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8084 	beq.w	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d07c      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e14:	4b2c      	ldr	r3, [pc, #176]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	fa93 f3a3 	rbit	r3, r3
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e2e:	fab3 f383 	clz	r3, r3
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	4b26      	ldr	r3, [pc, #152]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	2301      	movs	r3, #1
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	fa93 f3a3 	rbit	r3, r3
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e52:	fab3 f383 	clz	r3, r3
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e5c:	4413      	add	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	461a      	mov	r2, r3
 8007e62:	2300      	movs	r3, #0
 8007e64:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007e66:	4a18      	ldr	r2, [pc, #96]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d04b      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e76:	f7fb fe45 	bl	8003b04 <HAL_GetTick>
 8007e7a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e7c:	e00a      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e7e:	f7fb fe41 	bl	8003b04 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d901      	bls.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e113      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007e94:	2302      	movs	r3, #2
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	fa93 f3a3 	rbit	r3, r3
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	623b      	str	r3, [r7, #32]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	fa93 f3a3 	rbit	r3, r3
 8007eaa:	61fb      	str	r3, [r7, #28]
  return result;
 8007eac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eae:	fab3 f383 	clz	r3, r3
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f043 0302 	orr.w	r3, r3, #2
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d108      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007ec2:	4b01      	ldr	r3, [pc, #4]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	e00d      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007ec8:	40021000 	.word	0x40021000
 8007ecc:	40007000 	.word	0x40007000
 8007ed0:	10908100 	.word	0x10908100
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	fa93 f3a3 	rbit	r3, r3
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	4b78      	ldr	r3, [pc, #480]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	613a      	str	r2, [r7, #16]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	fa92 f2a2 	rbit	r2, r2
 8007eee:	60fa      	str	r2, [r7, #12]
  return result;
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	fab2 f282 	clz	r2, r2
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	f002 021f 	and.w	r2, r2, #31
 8007f02:	2101      	movs	r1, #1
 8007f04:	fa01 f202 	lsl.w	r2, r1, r2
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0b7      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007f0e:	4b6d      	ldr	r3, [pc, #436]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	496a      	ldr	r1, [pc, #424]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007f20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d105      	bne.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f28:	4b66      	ldr	r3, [pc, #408]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	4a65      	ldr	r2, [pc, #404]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f40:	4b60      	ldr	r3, [pc, #384]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f44:	f023 0203 	bic.w	r2, r3, #3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	495d      	ldr	r1, [pc, #372]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f5e:	4b59      	ldr	r3, [pc, #356]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	4956      	ldr	r1, [pc, #344]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d008      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f7c:	4b51      	ldr	r3, [pc, #324]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	494e      	ldr	r1, [pc, #312]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d008      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f9a:	4b4a      	ldr	r3, [pc, #296]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	f023 0210 	bic.w	r2, r3, #16
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	4947      	ldr	r1, [pc, #284]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007fb8:	4b42      	ldr	r3, [pc, #264]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	493f      	ldr	r1, [pc, #252]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d008      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007fd6:	4b3b      	ldr	r3, [pc, #236]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	f023 0220 	bic.w	r2, r3, #32
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	4938      	ldr	r1, [pc, #224]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d008      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ff4:	4b33      	ldr	r3, [pc, #204]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	4930      	ldr	r1, [pc, #192]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008002:	4313      	orrs	r3, r2
 8008004:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008012:	4b2c      	ldr	r3, [pc, #176]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	4929      	ldr	r1, [pc, #164]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008020:	4313      	orrs	r3, r2
 8008022:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800802c:	2b00      	cmp	r3, #0
 800802e:	d008      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008030:	4b24      	ldr	r3, [pc, #144]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	4921      	ldr	r1, [pc, #132]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800803e:	4313      	orrs	r3, r2
 8008040:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800804e:	4b1d      	ldr	r3, [pc, #116]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	491a      	ldr	r1, [pc, #104]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800805c:	4313      	orrs	r3, r2
 800805e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008068:	2b00      	cmp	r3, #0
 800806a:	d008      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800806c:	4b15      	ldr	r3, [pc, #84]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	4912      	ldr	r1, [pc, #72]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800807a:	4313      	orrs	r3, r2
 800807c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d008      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800808a:	4b0e      	ldr	r3, [pc, #56]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800808c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008096:	490b      	ldr	r1, [pc, #44]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008098:	4313      	orrs	r3, r2
 800809a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80080a8:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b4:	4903      	ldr	r1, [pc, #12]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3748      	adds	r7, #72	; 0x48
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	40021000 	.word	0x40021000

080080c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e09d      	b.n	8008216 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d108      	bne.n	80080f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ea:	d009      	beq.n	8008100 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	61da      	str	r2, [r3, #28]
 80080f2:	e005      	b.n	8008100 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fb fa44 	bl	80035a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008136:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008140:	d902      	bls.n	8008148 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e002      	b.n	800814e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800814c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008156:	d007      	beq.n	8008168 <HAL_SPI_Init+0xa0>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008160:	d002      	beq.n	8008168 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081aa:	ea42 0103 	orr.w	r1, r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	f003 0204 	and.w	r2, r3, #4
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d6:	f003 0308 	and.w	r3, r3, #8
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80081e4:	ea42 0103 	orr.w	r1, r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69da      	ldr	r2, [r3, #28]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008204:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b088      	sub	sp, #32
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	603b      	str	r3, [r7, #0]
 800822a:	4613      	mov	r3, r2
 800822c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_SPI_Transmit+0x22>
 800823c:	2302      	movs	r3, #2
 800823e:	e15f      	b.n	8008500 <HAL_SPI_Transmit+0x2e2>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008248:	f7fb fc5c 	bl	8003b04 <HAL_GetTick>
 800824c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b01      	cmp	r3, #1
 800825c:	d002      	beq.n	8008264 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800825e:	2302      	movs	r3, #2
 8008260:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008262:	e148      	b.n	80084f6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <HAL_SPI_Transmit+0x52>
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008274:	e13f      	b.n	80084f6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2203      	movs	r2, #3
 800827a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	88fa      	ldrh	r2, [r7, #6]
 800828e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	88fa      	ldrh	r2, [r7, #6]
 8008294:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082c0:	d10f      	bne.n	80082e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ec:	2b40      	cmp	r3, #64	; 0x40
 80082ee:	d007      	beq.n	8008300 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008308:	d94f      	bls.n	80083aa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <HAL_SPI_Transmit+0xfa>
 8008312:	8afb      	ldrh	r3, [r7, #22]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d142      	bne.n	800839e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	881a      	ldrh	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	1c9a      	adds	r2, r3, #2
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800833c:	e02f      	b.n	800839e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b02      	cmp	r3, #2
 800834a:	d112      	bne.n	8008372 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	881a      	ldrh	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	1c9a      	adds	r2, r3, #2
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008370:	e015      	b.n	800839e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008372:	f7fb fbc7 	bl	8003b04 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d803      	bhi.n	800838a <HAL_SPI_Transmit+0x16c>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008388:	d102      	bne.n	8008390 <HAL_SPI_Transmit+0x172>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800839c:	e0ab      	b.n	80084f6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1ca      	bne.n	800833e <HAL_SPI_Transmit+0x120>
 80083a8:	e080      	b.n	80084ac <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <HAL_SPI_Transmit+0x19a>
 80083b2:	8afb      	ldrh	r3, [r7, #22]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d174      	bne.n	80084a2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083bc:	b29b      	uxth	r3, r3
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d912      	bls.n	80083e8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	881a      	ldrh	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	1c9a      	adds	r2, r3, #2
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b02      	subs	r3, #2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083e6:	e05c      	b.n	80084a2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800840e:	e048      	b.n	80084a2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b02      	cmp	r3, #2
 800841c:	d12b      	bne.n	8008476 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008422:	b29b      	uxth	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	d912      	bls.n	800844e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	881a      	ldrh	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	1c9a      	adds	r2, r3, #2
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008442:	b29b      	uxth	r3, r3
 8008444:	3b02      	subs	r3, #2
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800844c:	e029      	b.n	80084a2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008474:	e015      	b.n	80084a2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008476:	f7fb fb45 	bl	8003b04 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d803      	bhi.n	800848e <HAL_SPI_Transmit+0x270>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800848c:	d102      	bne.n	8008494 <HAL_SPI_Transmit+0x276>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80084a0:	e029      	b.n	80084f6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1b1      	bne.n	8008410 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 f947 	bl	8008744 <SPI_EndRxTxTransaction>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2220      	movs	r2, #32
 80084c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	613b      	str	r3, [r7, #16]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e003      	b.n	80084f6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3720      	adds	r7, #32
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	4613      	mov	r3, r2
 8008516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008518:	f7fb faf4 	bl	8003b04 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4413      	add	r3, r2
 8008526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008528:	f7fb faec 	bl	8003b04 <HAL_GetTick>
 800852c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800852e:	4b39      	ldr	r3, [pc, #228]	; (8008614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	015b      	lsls	r3, r3, #5
 8008534:	0d1b      	lsrs	r3, r3, #20
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	fb02 f303 	mul.w	r3, r2, r3
 800853c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800853e:	e054      	b.n	80085ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008546:	d050      	beq.n	80085ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008548:	f7fb fadc 	bl	8003b04 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	429a      	cmp	r2, r3
 8008556:	d902      	bls.n	800855e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d13d      	bne.n	80085da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800856c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008576:	d111      	bne.n	800859c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008580:	d004      	beq.n	800858c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800858a:	d107      	bne.n	800859c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085a4:	d10f      	bne.n	80085c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e017      	b.n	800860a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	689a      	ldr	r2, [r3, #8]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4013      	ands	r3, r2
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	bf0c      	ite	eq
 80085fa:	2301      	moveq	r3, #1
 80085fc:	2300      	movne	r3, #0
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	429a      	cmp	r2, r3
 8008606:	d19b      	bne.n	8008540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3720      	adds	r7, #32
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000010 	.word	0x20000010

08008618 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08a      	sub	sp, #40	; 0x28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800862a:	f7fb fa6b 	bl	8003b04 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	1a9b      	subs	r3, r3, r2
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	4413      	add	r3, r2
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800863a:	f7fb fa63 	bl	8003b04 <HAL_GetTick>
 800863e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008648:	4b3d      	ldr	r3, [pc, #244]	; (8008740 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	00da      	lsls	r2, r3, #3
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	0d1b      	lsrs	r3, r3, #20
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	fb02 f303 	mul.w	r3, r2, r3
 800865e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008660:	e060      	b.n	8008724 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008668:	d107      	bne.n	800867a <SPI_WaitFifoStateUntilTimeout+0x62>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d104      	bne.n	800867a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008678:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008680:	d050      	beq.n	8008724 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008682:	f7fb fa3f 	bl	8003b04 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868e:	429a      	cmp	r2, r3
 8008690:	d902      	bls.n	8008698 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	2b00      	cmp	r3, #0
 8008696:	d13d      	bne.n	8008714 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086b0:	d111      	bne.n	80086d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ba:	d004      	beq.n	80086c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c4:	d107      	bne.n	80086d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086de:	d10f      	bne.n	8008700 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e010      	b.n	8008736 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	3b01      	subs	r3, #1
 8008722:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4013      	ands	r3, r2
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	d196      	bne.n	8008662 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3728      	adds	r7, #40	; 0x28
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20000010 	.word	0x20000010

08008744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af02      	add	r7, sp, #8
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2200      	movs	r2, #0
 8008758:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f7ff ff5b 	bl	8008618 <SPI_WaitFifoStateUntilTimeout>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d007      	beq.n	8008778 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876c:	f043 0220 	orr.w	r2, r3, #32
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e027      	b.n	80087c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2200      	movs	r2, #0
 8008780:	2180      	movs	r1, #128	; 0x80
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff fec0 	bl	8008508 <SPI_WaitFlagStateUntilTimeout>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d007      	beq.n	800879e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008792:	f043 0220 	orr.w	r2, r3, #32
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e014      	b.n	80087c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f7ff ff34 	bl	8008618 <SPI_WaitFifoStateUntilTimeout>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ba:	f043 0220 	orr.w	r2, r3, #32
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e000      	b.n	80087c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e049      	b.n	8008876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fa ff18 	bl	800362c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3304      	adds	r3, #4
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f000 fc20 	bl	8009054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b01      	cmp	r3, #1
 8008892:	d001      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e04a      	b.n	800892e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0201 	orr.w	r2, r2, #1
 80088ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a21      	ldr	r2, [pc, #132]	; (800893c <HAL_TIM_Base_Start_IT+0xbc>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d018      	beq.n	80088ec <HAL_TIM_Base_Start_IT+0x6c>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c2:	d013      	beq.n	80088ec <HAL_TIM_Base_Start_IT+0x6c>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a1d      	ldr	r2, [pc, #116]	; (8008940 <HAL_TIM_Base_Start_IT+0xc0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00e      	beq.n	80088ec <HAL_TIM_Base_Start_IT+0x6c>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a1c      	ldr	r2, [pc, #112]	; (8008944 <HAL_TIM_Base_Start_IT+0xc4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d009      	beq.n	80088ec <HAL_TIM_Base_Start_IT+0x6c>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a1a      	ldr	r2, [pc, #104]	; (8008948 <HAL_TIM_Base_Start_IT+0xc8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d004      	beq.n	80088ec <HAL_TIM_Base_Start_IT+0x6c>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a19      	ldr	r2, [pc, #100]	; (800894c <HAL_TIM_Base_Start_IT+0xcc>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d115      	bne.n	8008918 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	4b17      	ldr	r3, [pc, #92]	; (8008950 <HAL_TIM_Base_Start_IT+0xd0>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b06      	cmp	r3, #6
 80088fc:	d015      	beq.n	800892a <HAL_TIM_Base_Start_IT+0xaa>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008904:	d011      	beq.n	800892a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0201 	orr.w	r2, r2, #1
 8008914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008916:	e008      	b.n	800892a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f042 0201 	orr.w	r2, r2, #1
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	e000      	b.n	800892c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800892a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	40012c00 	.word	0x40012c00
 8008940:	40000400 	.word	0x40000400
 8008944:	40000800 	.word	0x40000800
 8008948:	40013400 	.word	0x40013400
 800894c:	40014000 	.word	0x40014000
 8008950:	00010007 	.word	0x00010007

08008954 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0201 	bic.w	r2, r2, #1
 800896a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6a1a      	ldr	r2, [r3, #32]
 8008972:	f241 1311 	movw	r3, #4369	; 0x1111
 8008976:	4013      	ands	r3, r2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10f      	bne.n	800899c <HAL_TIM_Base_Stop_IT+0x48>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	f240 4344 	movw	r3, #1092	; 0x444
 8008986:	4013      	ands	r3, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d107      	bne.n	800899c <HAL_TIM_Base_Stop_IT+0x48>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e049      	b.n	8008a58 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d106      	bne.n	80089de <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f841 	bl	8008a60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2202      	movs	r2, #2
 80089e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f000 fb2f 	bl	8009054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e041      	b.n	8008b0c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d106      	bne.n	8008aa2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f839 	bl	8008b14 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f000 facd 	bl	8009054 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0208 	bic.w	r2, r2, #8
 8008ac8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6819      	ldr	r1, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d122      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d11b      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f06f 0202 	mvn.w	r2, #2
 8008b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fa53 	bl	8009016 <HAL_TIM_IC_CaptureCallback>
 8008b70:	e005      	b.n	8008b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa45 	bl	8009002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fa56 	bl	800902a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d122      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d11b      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f06f 0204 	mvn.w	r2, #4
 8008ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2202      	movs	r2, #2
 8008bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fa29 	bl	8009016 <HAL_TIM_IC_CaptureCallback>
 8008bc4:	e005      	b.n	8008bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fa1b 	bl	8009002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fa2c 	bl	800902a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	d122      	bne.n	8008c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d11b      	bne.n	8008c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f06f 0208 	mvn.w	r2, #8
 8008bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2204      	movs	r2, #4
 8008c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f9ff 	bl	8009016 <HAL_TIM_IC_CaptureCallback>
 8008c18:	e005      	b.n	8008c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f9f1 	bl	8009002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa02 	bl	800902a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	f003 0310 	and.w	r3, r3, #16
 8008c36:	2b10      	cmp	r3, #16
 8008c38:	d122      	bne.n	8008c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f003 0310 	and.w	r3, r3, #16
 8008c44:	2b10      	cmp	r3, #16
 8008c46:	d11b      	bne.n	8008c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f06f 0210 	mvn.w	r2, #16
 8008c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2208      	movs	r2, #8
 8008c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f9d5 	bl	8009016 <HAL_TIM_IC_CaptureCallback>
 8008c6c:	e005      	b.n	8008c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f9c7 	bl	8009002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f9d8 	bl	800902a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d10e      	bne.n	8008cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d107      	bne.n	8008cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f06f 0201 	mvn.w	r2, #1
 8008ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f9a1 	bl	8008fee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb6:	2b80      	cmp	r3, #128	; 0x80
 8008cb8:	d10e      	bne.n	8008cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc4:	2b80      	cmp	r3, #128	; 0x80
 8008cc6:	d107      	bne.n	8008cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fe48 	bl	8009968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce6:	d10e      	bne.n	8008d06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf2:	2b80      	cmp	r3, #128	; 0x80
 8008cf4:	d107      	bne.n	8008d06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fe3b 	bl	800997c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d10:	2b40      	cmp	r3, #64	; 0x40
 8008d12:	d10e      	bne.n	8008d32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1e:	2b40      	cmp	r3, #64	; 0x40
 8008d20:	d107      	bne.n	8008d32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f986 	bl	800903e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d10e      	bne.n	8008d5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d107      	bne.n	8008d5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f06f 0220 	mvn.w	r2, #32
 8008d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fdfb 	bl	8009954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e066      	b.n	8008e54 <HAL_TIM_OC_ConfigChannel+0xec>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b14      	cmp	r3, #20
 8008d92:	d857      	bhi.n	8008e44 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008d94:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9a:	bf00      	nop
 8008d9c:	08008df1 	.word	0x08008df1
 8008da0:	08008e45 	.word	0x08008e45
 8008da4:	08008e45 	.word	0x08008e45
 8008da8:	08008e45 	.word	0x08008e45
 8008dac:	08008dff 	.word	0x08008dff
 8008db0:	08008e45 	.word	0x08008e45
 8008db4:	08008e45 	.word	0x08008e45
 8008db8:	08008e45 	.word	0x08008e45
 8008dbc:	08008e0d 	.word	0x08008e0d
 8008dc0:	08008e45 	.word	0x08008e45
 8008dc4:	08008e45 	.word	0x08008e45
 8008dc8:	08008e45 	.word	0x08008e45
 8008dcc:	08008e1b 	.word	0x08008e1b
 8008dd0:	08008e45 	.word	0x08008e45
 8008dd4:	08008e45 	.word	0x08008e45
 8008dd8:	08008e45 	.word	0x08008e45
 8008ddc:	08008e29 	.word	0x08008e29
 8008de0:	08008e45 	.word	0x08008e45
 8008de4:	08008e45 	.word	0x08008e45
 8008de8:	08008e45 	.word	0x08008e45
 8008dec:	08008e37 	.word	0x08008e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68b9      	ldr	r1, [r7, #8]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f9bc 	bl	8009174 <TIM_OC1_SetConfig>
      break;
 8008dfc:	e025      	b.n	8008e4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fa45 	bl	8009294 <TIM_OC2_SetConfig>
      break;
 8008e0a:	e01e      	b.n	8008e4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fac8 	bl	80093a8 <TIM_OC3_SetConfig>
      break;
 8008e18:	e017      	b.n	8008e4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fb49 	bl	80094b8 <TIM_OC4_SetConfig>
      break;
 8008e26:	e010      	b.n	8008e4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fbac 	bl	800958c <TIM_OC5_SetConfig>
      break;
 8008e34:	e009      	b.n	8008e4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fc09 	bl	8009654 <TIM_OC6_SetConfig>
      break;
 8008e42:	e002      	b.n	8008e4a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
      break;
 8008e48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d101      	bne.n	8008e78 <HAL_TIM_ConfigClockSource+0x1c>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e0b6      	b.n	8008fe6 <HAL_TIM_ConfigClockSource+0x18a>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eb4:	d03e      	beq.n	8008f34 <HAL_TIM_ConfigClockSource+0xd8>
 8008eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eba:	f200 8087 	bhi.w	8008fcc <HAL_TIM_ConfigClockSource+0x170>
 8008ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ec2:	f000 8086 	beq.w	8008fd2 <HAL_TIM_ConfigClockSource+0x176>
 8008ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eca:	d87f      	bhi.n	8008fcc <HAL_TIM_ConfigClockSource+0x170>
 8008ecc:	2b70      	cmp	r3, #112	; 0x70
 8008ece:	d01a      	beq.n	8008f06 <HAL_TIM_ConfigClockSource+0xaa>
 8008ed0:	2b70      	cmp	r3, #112	; 0x70
 8008ed2:	d87b      	bhi.n	8008fcc <HAL_TIM_ConfigClockSource+0x170>
 8008ed4:	2b60      	cmp	r3, #96	; 0x60
 8008ed6:	d050      	beq.n	8008f7a <HAL_TIM_ConfigClockSource+0x11e>
 8008ed8:	2b60      	cmp	r3, #96	; 0x60
 8008eda:	d877      	bhi.n	8008fcc <HAL_TIM_ConfigClockSource+0x170>
 8008edc:	2b50      	cmp	r3, #80	; 0x50
 8008ede:	d03c      	beq.n	8008f5a <HAL_TIM_ConfigClockSource+0xfe>
 8008ee0:	2b50      	cmp	r3, #80	; 0x50
 8008ee2:	d873      	bhi.n	8008fcc <HAL_TIM_ConfigClockSource+0x170>
 8008ee4:	2b40      	cmp	r3, #64	; 0x40
 8008ee6:	d058      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x13e>
 8008ee8:	2b40      	cmp	r3, #64	; 0x40
 8008eea:	d86f      	bhi.n	8008fcc <HAL_TIM_ConfigClockSource+0x170>
 8008eec:	2b30      	cmp	r3, #48	; 0x30
 8008eee:	d064      	beq.n	8008fba <HAL_TIM_ConfigClockSource+0x15e>
 8008ef0:	2b30      	cmp	r3, #48	; 0x30
 8008ef2:	d86b      	bhi.n	8008fcc <HAL_TIM_ConfigClockSource+0x170>
 8008ef4:	2b20      	cmp	r3, #32
 8008ef6:	d060      	beq.n	8008fba <HAL_TIM_ConfigClockSource+0x15e>
 8008ef8:	2b20      	cmp	r3, #32
 8008efa:	d867      	bhi.n	8008fcc <HAL_TIM_ConfigClockSource+0x170>
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d05c      	beq.n	8008fba <HAL_TIM_ConfigClockSource+0x15e>
 8008f00:	2b10      	cmp	r3, #16
 8008f02:	d05a      	beq.n	8008fba <HAL_TIM_ConfigClockSource+0x15e>
 8008f04:	e062      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	6899      	ldr	r1, [r3, #8]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f000 fc7d 	bl	8009814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	609a      	str	r2, [r3, #8]
      break;
 8008f32:	e04f      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	6899      	ldr	r1, [r3, #8]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f000 fc66 	bl	8009814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f56:	609a      	str	r2, [r3, #8]
      break;
 8008f58:	e03c      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	6859      	ldr	r1, [r3, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f000 fbda 	bl	8009720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2150      	movs	r1, #80	; 0x50
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fc33 	bl	80097de <TIM_ITRx_SetConfig>
      break;
 8008f78:	e02c      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	6859      	ldr	r1, [r3, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f000 fbf9 	bl	800977e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2160      	movs	r1, #96	; 0x60
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fc23 	bl	80097de <TIM_ITRx_SetConfig>
      break;
 8008f98:	e01c      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	6859      	ldr	r1, [r3, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f000 fbba 	bl	8009720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2140      	movs	r1, #64	; 0x40
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fc13 	bl	80097de <TIM_ITRx_SetConfig>
      break;
 8008fb8:	e00c      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	f000 fc0a 	bl	80097de <TIM_ITRx_SetConfig>
      break;
 8008fca:	e003      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd0:	e000      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a3c      	ldr	r2, [pc, #240]	; (8009158 <TIM_Base_SetConfig+0x104>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d00f      	beq.n	800908c <TIM_Base_SetConfig+0x38>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009072:	d00b      	beq.n	800908c <TIM_Base_SetConfig+0x38>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a39      	ldr	r2, [pc, #228]	; (800915c <TIM_Base_SetConfig+0x108>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d007      	beq.n	800908c <TIM_Base_SetConfig+0x38>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a38      	ldr	r2, [pc, #224]	; (8009160 <TIM_Base_SetConfig+0x10c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_Base_SetConfig+0x38>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a37      	ldr	r2, [pc, #220]	; (8009164 <TIM_Base_SetConfig+0x110>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d108      	bne.n	800909e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a2d      	ldr	r2, [pc, #180]	; (8009158 <TIM_Base_SetConfig+0x104>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d01b      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ac:	d017      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a2a      	ldr	r2, [pc, #168]	; (800915c <TIM_Base_SetConfig+0x108>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d013      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a29      	ldr	r2, [pc, #164]	; (8009160 <TIM_Base_SetConfig+0x10c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00f      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a28      	ldr	r2, [pc, #160]	; (8009164 <TIM_Base_SetConfig+0x110>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00b      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a27      	ldr	r2, [pc, #156]	; (8009168 <TIM_Base_SetConfig+0x114>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d007      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a26      	ldr	r2, [pc, #152]	; (800916c <TIM_Base_SetConfig+0x118>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d003      	beq.n	80090de <TIM_Base_SetConfig+0x8a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a25      	ldr	r2, [pc, #148]	; (8009170 <TIM_Base_SetConfig+0x11c>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d108      	bne.n	80090f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a10      	ldr	r2, [pc, #64]	; (8009158 <TIM_Base_SetConfig+0x104>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d00f      	beq.n	800913c <TIM_Base_SetConfig+0xe8>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a11      	ldr	r2, [pc, #68]	; (8009164 <TIM_Base_SetConfig+0x110>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00b      	beq.n	800913c <TIM_Base_SetConfig+0xe8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a10      	ldr	r2, [pc, #64]	; (8009168 <TIM_Base_SetConfig+0x114>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d007      	beq.n	800913c <TIM_Base_SetConfig+0xe8>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a0f      	ldr	r2, [pc, #60]	; (800916c <TIM_Base_SetConfig+0x118>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d003      	beq.n	800913c <TIM_Base_SetConfig+0xe8>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a0e      	ldr	r2, [pc, #56]	; (8009170 <TIM_Base_SetConfig+0x11c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d103      	bne.n	8009144 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	691a      	ldr	r2, [r3, #16]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	615a      	str	r2, [r3, #20]
}
 800914a:	bf00      	nop
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	40012c00 	.word	0x40012c00
 800915c:	40000400 	.word	0x40000400
 8009160:	40000800 	.word	0x40000800
 8009164:	40013400 	.word	0x40013400
 8009168:	40014000 	.word	0x40014000
 800916c:	40014400 	.word	0x40014400
 8009170:	40014800 	.word	0x40014800

08009174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f023 0201 	bic.w	r2, r3, #1
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f023 0302 	bic.w	r3, r3, #2
 80091c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a2c      	ldr	r2, [pc, #176]	; (8009280 <TIM_OC1_SetConfig+0x10c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d00f      	beq.n	80091f4 <TIM_OC1_SetConfig+0x80>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a2b      	ldr	r2, [pc, #172]	; (8009284 <TIM_OC1_SetConfig+0x110>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00b      	beq.n	80091f4 <TIM_OC1_SetConfig+0x80>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a2a      	ldr	r2, [pc, #168]	; (8009288 <TIM_OC1_SetConfig+0x114>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d007      	beq.n	80091f4 <TIM_OC1_SetConfig+0x80>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a29      	ldr	r2, [pc, #164]	; (800928c <TIM_OC1_SetConfig+0x118>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d003      	beq.n	80091f4 <TIM_OC1_SetConfig+0x80>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a28      	ldr	r2, [pc, #160]	; (8009290 <TIM_OC1_SetConfig+0x11c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d10c      	bne.n	800920e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f023 0308 	bic.w	r3, r3, #8
 80091fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4313      	orrs	r3, r2
 8009204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f023 0304 	bic.w	r3, r3, #4
 800920c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a1b      	ldr	r2, [pc, #108]	; (8009280 <TIM_OC1_SetConfig+0x10c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00f      	beq.n	8009236 <TIM_OC1_SetConfig+0xc2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a1a      	ldr	r2, [pc, #104]	; (8009284 <TIM_OC1_SetConfig+0x110>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00b      	beq.n	8009236 <TIM_OC1_SetConfig+0xc2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a19      	ldr	r2, [pc, #100]	; (8009288 <TIM_OC1_SetConfig+0x114>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d007      	beq.n	8009236 <TIM_OC1_SetConfig+0xc2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a18      	ldr	r2, [pc, #96]	; (800928c <TIM_OC1_SetConfig+0x118>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d003      	beq.n	8009236 <TIM_OC1_SetConfig+0xc2>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a17      	ldr	r2, [pc, #92]	; (8009290 <TIM_OC1_SetConfig+0x11c>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d111      	bne.n	800925a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800923c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	621a      	str	r2, [r3, #32]
}
 8009274:	bf00      	nop
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	40012c00 	.word	0x40012c00
 8009284:	40013400 	.word	0x40013400
 8009288:	40014000 	.word	0x40014000
 800928c:	40014400 	.word	0x40014400
 8009290:	40014800 	.word	0x40014800

08009294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	f023 0210 	bic.w	r2, r3, #16
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	021b      	lsls	r3, r3, #8
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f023 0320 	bic.w	r3, r3, #32
 80092e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a28      	ldr	r2, [pc, #160]	; (8009394 <TIM_OC2_SetConfig+0x100>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d003      	beq.n	8009300 <TIM_OC2_SetConfig+0x6c>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a27      	ldr	r2, [pc, #156]	; (8009398 <TIM_OC2_SetConfig+0x104>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d10d      	bne.n	800931c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	011b      	lsls	r3, r3, #4
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	4313      	orrs	r3, r2
 8009312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800931a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a1d      	ldr	r2, [pc, #116]	; (8009394 <TIM_OC2_SetConfig+0x100>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00f      	beq.n	8009344 <TIM_OC2_SetConfig+0xb0>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a1c      	ldr	r2, [pc, #112]	; (8009398 <TIM_OC2_SetConfig+0x104>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00b      	beq.n	8009344 <TIM_OC2_SetConfig+0xb0>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a1b      	ldr	r2, [pc, #108]	; (800939c <TIM_OC2_SetConfig+0x108>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d007      	beq.n	8009344 <TIM_OC2_SetConfig+0xb0>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a1a      	ldr	r2, [pc, #104]	; (80093a0 <TIM_OC2_SetConfig+0x10c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d003      	beq.n	8009344 <TIM_OC2_SetConfig+0xb0>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a19      	ldr	r2, [pc, #100]	; (80093a4 <TIM_OC2_SetConfig+0x110>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d113      	bne.n	800936c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800934a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009352:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	4313      	orrs	r3, r2
 800935e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	4313      	orrs	r3, r2
 800936a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40012c00 	.word	0x40012c00
 8009398:	40013400 	.word	0x40013400
 800939c:	40014000 	.word	0x40014000
 80093a0:	40014400 	.word	0x40014400
 80093a4:	40014800 	.word	0x40014800

080093a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a27      	ldr	r2, [pc, #156]	; (80094a4 <TIM_OC3_SetConfig+0xfc>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d003      	beq.n	8009412 <TIM_OC3_SetConfig+0x6a>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a26      	ldr	r2, [pc, #152]	; (80094a8 <TIM_OC3_SetConfig+0x100>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d10d      	bne.n	800942e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	021b      	lsls	r3, r3, #8
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800942c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a1c      	ldr	r2, [pc, #112]	; (80094a4 <TIM_OC3_SetConfig+0xfc>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00f      	beq.n	8009456 <TIM_OC3_SetConfig+0xae>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a1b      	ldr	r2, [pc, #108]	; (80094a8 <TIM_OC3_SetConfig+0x100>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00b      	beq.n	8009456 <TIM_OC3_SetConfig+0xae>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <TIM_OC3_SetConfig+0x104>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d007      	beq.n	8009456 <TIM_OC3_SetConfig+0xae>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <TIM_OC3_SetConfig+0x108>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_OC3_SetConfig+0xae>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <TIM_OC3_SetConfig+0x10c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d113      	bne.n	800947e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800945c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4313      	orrs	r3, r2
 8009470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	4313      	orrs	r3, r2
 800947c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	621a      	str	r2, [r3, #32]
}
 8009498:	bf00      	nop
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	40012c00 	.word	0x40012c00
 80094a8:	40013400 	.word	0x40013400
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40014400 	.word	0x40014400
 80094b4:	40014800 	.word	0x40014800

080094b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	031b      	lsls	r3, r3, #12
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	4313      	orrs	r3, r2
 8009512:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a18      	ldr	r2, [pc, #96]	; (8009578 <TIM_OC4_SetConfig+0xc0>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00f      	beq.n	800953c <TIM_OC4_SetConfig+0x84>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a17      	ldr	r2, [pc, #92]	; (800957c <TIM_OC4_SetConfig+0xc4>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d00b      	beq.n	800953c <TIM_OC4_SetConfig+0x84>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a16      	ldr	r2, [pc, #88]	; (8009580 <TIM_OC4_SetConfig+0xc8>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d007      	beq.n	800953c <TIM_OC4_SetConfig+0x84>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a15      	ldr	r2, [pc, #84]	; (8009584 <TIM_OC4_SetConfig+0xcc>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d003      	beq.n	800953c <TIM_OC4_SetConfig+0x84>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a14      	ldr	r2, [pc, #80]	; (8009588 <TIM_OC4_SetConfig+0xd0>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d109      	bne.n	8009550 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	019b      	lsls	r3, r3, #6
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	4313      	orrs	r3, r2
 800954e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	621a      	str	r2, [r3, #32]
}
 800956a:	bf00      	nop
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	40012c00 	.word	0x40012c00
 800957c:	40013400 	.word	0x40013400
 8009580:	40014000 	.word	0x40014000
 8009584:	40014400 	.word	0x40014400
 8009588:	40014800 	.word	0x40014800

0800958c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	041b      	lsls	r3, r3, #16
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	4313      	orrs	r3, r2
 80095dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a17      	ldr	r2, [pc, #92]	; (8009640 <TIM_OC5_SetConfig+0xb4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00f      	beq.n	8009606 <TIM_OC5_SetConfig+0x7a>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a16      	ldr	r2, [pc, #88]	; (8009644 <TIM_OC5_SetConfig+0xb8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d00b      	beq.n	8009606 <TIM_OC5_SetConfig+0x7a>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a15      	ldr	r2, [pc, #84]	; (8009648 <TIM_OC5_SetConfig+0xbc>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d007      	beq.n	8009606 <TIM_OC5_SetConfig+0x7a>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a14      	ldr	r2, [pc, #80]	; (800964c <TIM_OC5_SetConfig+0xc0>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d003      	beq.n	8009606 <TIM_OC5_SetConfig+0x7a>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a13      	ldr	r2, [pc, #76]	; (8009650 <TIM_OC5_SetConfig+0xc4>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d109      	bne.n	800961a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800960c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	4313      	orrs	r3, r2
 8009618:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	621a      	str	r2, [r3, #32]
}
 8009634:	bf00      	nop
 8009636:	371c      	adds	r7, #28
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	40012c00 	.word	0x40012c00
 8009644:	40013400 	.word	0x40013400
 8009648:	40014000 	.word	0x40014000
 800964c:	40014400 	.word	0x40014400
 8009650:	40014800 	.word	0x40014800

08009654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	021b      	lsls	r3, r3, #8
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	4313      	orrs	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800969a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	051b      	lsls	r3, r3, #20
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a18      	ldr	r2, [pc, #96]	; (800970c <TIM_OC6_SetConfig+0xb8>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00f      	beq.n	80096d0 <TIM_OC6_SetConfig+0x7c>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a17      	ldr	r2, [pc, #92]	; (8009710 <TIM_OC6_SetConfig+0xbc>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d00b      	beq.n	80096d0 <TIM_OC6_SetConfig+0x7c>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a16      	ldr	r2, [pc, #88]	; (8009714 <TIM_OC6_SetConfig+0xc0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d007      	beq.n	80096d0 <TIM_OC6_SetConfig+0x7c>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a15      	ldr	r2, [pc, #84]	; (8009718 <TIM_OC6_SetConfig+0xc4>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_OC6_SetConfig+0x7c>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a14      	ldr	r2, [pc, #80]	; (800971c <TIM_OC6_SetConfig+0xc8>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d109      	bne.n	80096e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	029b      	lsls	r3, r3, #10
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	621a      	str	r2, [r3, #32]
}
 80096fe:	bf00      	nop
 8009700:	371c      	adds	r7, #28
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	40012c00 	.word	0x40012c00
 8009710:	40013400 	.word	0x40013400
 8009714:	40014000 	.word	0x40014000
 8009718:	40014400 	.word	0x40014400
 800971c:	40014800 	.word	0x40014800

08009720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f023 0201 	bic.w	r2, r3, #1
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800974a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f023 030a 	bic.w	r3, r3, #10
 800975c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	4313      	orrs	r3, r2
 8009764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	621a      	str	r2, [r3, #32]
}
 8009772:	bf00      	nop
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800977e:	b480      	push	{r7}
 8009780:	b087      	sub	sp, #28
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f023 0210 	bic.w	r2, r3, #16
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	031b      	lsls	r3, r3, #12
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097de:	b480      	push	{r7}
 80097e0:	b085      	sub	sp, #20
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	f043 0307 	orr.w	r3, r3, #7
 8009800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	609a      	str	r2, [r3, #8]
}
 8009808:	bf00      	nop
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800982e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	021a      	lsls	r2, r3, #8
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	431a      	orrs	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4313      	orrs	r3, r2
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	4313      	orrs	r3, r2
 8009840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	697a      	ldr	r2, [r7, #20]
 8009846:	609a      	str	r2, [r3, #8]
}
 8009848:	bf00      	nop
 800984a:	371c      	adds	r7, #28
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009864:	2b01      	cmp	r3, #1
 8009866:	d101      	bne.n	800986c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009868:	2302      	movs	r3, #2
 800986a:	e063      	b.n	8009934 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a2b      	ldr	r2, [pc, #172]	; (8009940 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d004      	beq.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a2a      	ldr	r2, [pc, #168]	; (8009944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d108      	bne.n	80098b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a1b      	ldr	r2, [pc, #108]	; (8009940 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d018      	beq.n	8009908 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098de:	d013      	beq.n	8009908 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a18      	ldr	r2, [pc, #96]	; (8009948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00e      	beq.n	8009908 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a17      	ldr	r2, [pc, #92]	; (800994c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d009      	beq.n	8009908 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a12      	ldr	r2, [pc, #72]	; (8009944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d004      	beq.n	8009908 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a13      	ldr	r2, [pc, #76]	; (8009950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d10c      	bne.n	8009922 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800990e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	4313      	orrs	r3, r2
 8009918:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	40012c00 	.word	0x40012c00
 8009944:	40013400 	.word	0x40013400
 8009948:	40000400 	.word	0x40000400
 800994c:	40000800 	.word	0x40000800
 8009950:	40014000 	.word	0x40014000

08009954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e040      	b.n	8009a24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7f9 fe60 	bl	8003678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2224      	movs	r2, #36	; 0x24
 80099bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0201 	bic.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f8e2 	bl	8009b98 <UART_SetConfig>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d101      	bne.n	80099de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e022      	b.n	8009a24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 faaa 	bl	8009f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f042 0201 	orr.w	r2, r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fb31 	bl	800a084 <UART_CheckIdleState>
 8009a22:	4603      	mov	r3, r0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08a      	sub	sp, #40	; 0x28
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	f040 80a3 	bne.w	8009b8e <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <HAL_UART_Receive+0x28>
 8009a4e:	88fb      	ldrh	r3, [r7, #6]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e09b      	b.n	8009b90 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2222      	movs	r2, #34	; 0x22
 8009a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a6e:	f7fa f849 	bl	8003b04 <HAL_GetTick>
 8009a72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	88fa      	ldrh	r2, [r7, #6]
 8009a78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	88fa      	ldrh	r2, [r7, #6]
 8009a80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a8c:	d10e      	bne.n	8009aac <HAL_UART_Receive+0x80>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d105      	bne.n	8009aa2 <HAL_UART_Receive+0x76>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009aa0:	e01a      	b.n	8009ad8 <HAL_UART_Receive+0xac>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	22ff      	movs	r2, #255	; 0xff
 8009aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009aaa:	e015      	b.n	8009ad8 <HAL_UART_Receive+0xac>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10d      	bne.n	8009ad0 <HAL_UART_Receive+0xa4>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <HAL_UART_Receive+0x9a>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	22ff      	movs	r2, #255	; 0xff
 8009ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ac4:	e008      	b.n	8009ad8 <HAL_UART_Receive+0xac>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	227f      	movs	r2, #127	; 0x7f
 8009aca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ace:	e003      	b.n	8009ad8 <HAL_UART_Receive+0xac>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ade:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae8:	d108      	bne.n	8009afc <HAL_UART_Receive+0xd0>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	e003      	b.n	8009b04 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009b04:	e037      	b.n	8009b76 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2120      	movs	r1, #32
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 fb5f 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d005      	beq.n	8009b28 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e033      	b.n	8009b90 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10c      	bne.n	8009b48 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	8a7b      	ldrh	r3, [r7, #18]
 8009b38:	4013      	ands	r3, r2
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	3302      	adds	r3, #2
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	e00d      	b.n	8009b64 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	8a7b      	ldrh	r3, [r7, #18]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	4013      	ands	r3, r2
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	3301      	adds	r3, #1
 8009b62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1c1      	bne.n	8009b06 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2220      	movs	r2, #32
 8009b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e000      	b.n	8009b90 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8009b8e:	2302      	movs	r3, #2
  }
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3720      	adds	r7, #32
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	431a      	orrs	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009bc6:	f023 030c 	bic.w	r3, r3, #12
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	6979      	ldr	r1, [r7, #20]
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68da      	ldr	r2, [r3, #12]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4aa7      	ldr	r2, [pc, #668]	; (8009eb0 <UART_SetConfig+0x318>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d120      	bne.n	8009c5a <UART_SetConfig+0xc2>
 8009c18:	4ba6      	ldr	r3, [pc, #664]	; (8009eb4 <UART_SetConfig+0x31c>)
 8009c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d817      	bhi.n	8009c54 <UART_SetConfig+0xbc>
 8009c24:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <UART_SetConfig+0x94>)
 8009c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2a:	bf00      	nop
 8009c2c:	08009c3d 	.word	0x08009c3d
 8009c30:	08009c49 	.word	0x08009c49
 8009c34:	08009c4f 	.word	0x08009c4f
 8009c38:	08009c43 	.word	0x08009c43
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	77fb      	strb	r3, [r7, #31]
 8009c40:	e0b5      	b.n	8009dae <UART_SetConfig+0x216>
 8009c42:	2302      	movs	r3, #2
 8009c44:	77fb      	strb	r3, [r7, #31]
 8009c46:	e0b2      	b.n	8009dae <UART_SetConfig+0x216>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	77fb      	strb	r3, [r7, #31]
 8009c4c:	e0af      	b.n	8009dae <UART_SetConfig+0x216>
 8009c4e:	2308      	movs	r3, #8
 8009c50:	77fb      	strb	r3, [r7, #31]
 8009c52:	e0ac      	b.n	8009dae <UART_SetConfig+0x216>
 8009c54:	2310      	movs	r3, #16
 8009c56:	77fb      	strb	r3, [r7, #31]
 8009c58:	e0a9      	b.n	8009dae <UART_SetConfig+0x216>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a96      	ldr	r2, [pc, #600]	; (8009eb8 <UART_SetConfig+0x320>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d124      	bne.n	8009cae <UART_SetConfig+0x116>
 8009c64:	4b93      	ldr	r3, [pc, #588]	; (8009eb4 <UART_SetConfig+0x31c>)
 8009c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c70:	d011      	beq.n	8009c96 <UART_SetConfig+0xfe>
 8009c72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c76:	d817      	bhi.n	8009ca8 <UART_SetConfig+0x110>
 8009c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c7c:	d011      	beq.n	8009ca2 <UART_SetConfig+0x10a>
 8009c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c82:	d811      	bhi.n	8009ca8 <UART_SetConfig+0x110>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <UART_SetConfig+0xf8>
 8009c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c8c:	d006      	beq.n	8009c9c <UART_SetConfig+0x104>
 8009c8e:	e00b      	b.n	8009ca8 <UART_SetConfig+0x110>
 8009c90:	2300      	movs	r3, #0
 8009c92:	77fb      	strb	r3, [r7, #31]
 8009c94:	e08b      	b.n	8009dae <UART_SetConfig+0x216>
 8009c96:	2302      	movs	r3, #2
 8009c98:	77fb      	strb	r3, [r7, #31]
 8009c9a:	e088      	b.n	8009dae <UART_SetConfig+0x216>
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	77fb      	strb	r3, [r7, #31]
 8009ca0:	e085      	b.n	8009dae <UART_SetConfig+0x216>
 8009ca2:	2308      	movs	r3, #8
 8009ca4:	77fb      	strb	r3, [r7, #31]
 8009ca6:	e082      	b.n	8009dae <UART_SetConfig+0x216>
 8009ca8:	2310      	movs	r3, #16
 8009caa:	77fb      	strb	r3, [r7, #31]
 8009cac:	e07f      	b.n	8009dae <UART_SetConfig+0x216>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a82      	ldr	r2, [pc, #520]	; (8009ebc <UART_SetConfig+0x324>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d124      	bne.n	8009d02 <UART_SetConfig+0x16a>
 8009cb8:	4b7e      	ldr	r3, [pc, #504]	; (8009eb4 <UART_SetConfig+0x31c>)
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009cc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009cc4:	d011      	beq.n	8009cea <UART_SetConfig+0x152>
 8009cc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009cca:	d817      	bhi.n	8009cfc <UART_SetConfig+0x164>
 8009ccc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009cd0:	d011      	beq.n	8009cf6 <UART_SetConfig+0x15e>
 8009cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009cd6:	d811      	bhi.n	8009cfc <UART_SetConfig+0x164>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <UART_SetConfig+0x14c>
 8009cdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ce0:	d006      	beq.n	8009cf0 <UART_SetConfig+0x158>
 8009ce2:	e00b      	b.n	8009cfc <UART_SetConfig+0x164>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	77fb      	strb	r3, [r7, #31]
 8009ce8:	e061      	b.n	8009dae <UART_SetConfig+0x216>
 8009cea:	2302      	movs	r3, #2
 8009cec:	77fb      	strb	r3, [r7, #31]
 8009cee:	e05e      	b.n	8009dae <UART_SetConfig+0x216>
 8009cf0:	2304      	movs	r3, #4
 8009cf2:	77fb      	strb	r3, [r7, #31]
 8009cf4:	e05b      	b.n	8009dae <UART_SetConfig+0x216>
 8009cf6:	2308      	movs	r3, #8
 8009cf8:	77fb      	strb	r3, [r7, #31]
 8009cfa:	e058      	b.n	8009dae <UART_SetConfig+0x216>
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	77fb      	strb	r3, [r7, #31]
 8009d00:	e055      	b.n	8009dae <UART_SetConfig+0x216>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a6e      	ldr	r2, [pc, #440]	; (8009ec0 <UART_SetConfig+0x328>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d124      	bne.n	8009d56 <UART_SetConfig+0x1be>
 8009d0c:	4b69      	ldr	r3, [pc, #420]	; (8009eb4 <UART_SetConfig+0x31c>)
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d18:	d011      	beq.n	8009d3e <UART_SetConfig+0x1a6>
 8009d1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d1e:	d817      	bhi.n	8009d50 <UART_SetConfig+0x1b8>
 8009d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d24:	d011      	beq.n	8009d4a <UART_SetConfig+0x1b2>
 8009d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d2a:	d811      	bhi.n	8009d50 <UART_SetConfig+0x1b8>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <UART_SetConfig+0x1a0>
 8009d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d34:	d006      	beq.n	8009d44 <UART_SetConfig+0x1ac>
 8009d36:	e00b      	b.n	8009d50 <UART_SetConfig+0x1b8>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	77fb      	strb	r3, [r7, #31]
 8009d3c:	e037      	b.n	8009dae <UART_SetConfig+0x216>
 8009d3e:	2302      	movs	r3, #2
 8009d40:	77fb      	strb	r3, [r7, #31]
 8009d42:	e034      	b.n	8009dae <UART_SetConfig+0x216>
 8009d44:	2304      	movs	r3, #4
 8009d46:	77fb      	strb	r3, [r7, #31]
 8009d48:	e031      	b.n	8009dae <UART_SetConfig+0x216>
 8009d4a:	2308      	movs	r3, #8
 8009d4c:	77fb      	strb	r3, [r7, #31]
 8009d4e:	e02e      	b.n	8009dae <UART_SetConfig+0x216>
 8009d50:	2310      	movs	r3, #16
 8009d52:	77fb      	strb	r3, [r7, #31]
 8009d54:	e02b      	b.n	8009dae <UART_SetConfig+0x216>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a5a      	ldr	r2, [pc, #360]	; (8009ec4 <UART_SetConfig+0x32c>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d124      	bne.n	8009daa <UART_SetConfig+0x212>
 8009d60:	4b54      	ldr	r3, [pc, #336]	; (8009eb4 <UART_SetConfig+0x31c>)
 8009d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009d68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d6c:	d011      	beq.n	8009d92 <UART_SetConfig+0x1fa>
 8009d6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d72:	d817      	bhi.n	8009da4 <UART_SetConfig+0x20c>
 8009d74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d78:	d011      	beq.n	8009d9e <UART_SetConfig+0x206>
 8009d7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d7e:	d811      	bhi.n	8009da4 <UART_SetConfig+0x20c>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <UART_SetConfig+0x1f4>
 8009d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d88:	d006      	beq.n	8009d98 <UART_SetConfig+0x200>
 8009d8a:	e00b      	b.n	8009da4 <UART_SetConfig+0x20c>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	77fb      	strb	r3, [r7, #31]
 8009d90:	e00d      	b.n	8009dae <UART_SetConfig+0x216>
 8009d92:	2302      	movs	r3, #2
 8009d94:	77fb      	strb	r3, [r7, #31]
 8009d96:	e00a      	b.n	8009dae <UART_SetConfig+0x216>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	77fb      	strb	r3, [r7, #31]
 8009d9c:	e007      	b.n	8009dae <UART_SetConfig+0x216>
 8009d9e:	2308      	movs	r3, #8
 8009da0:	77fb      	strb	r3, [r7, #31]
 8009da2:	e004      	b.n	8009dae <UART_SetConfig+0x216>
 8009da4:	2310      	movs	r3, #16
 8009da6:	77fb      	strb	r3, [r7, #31]
 8009da8:	e001      	b.n	8009dae <UART_SetConfig+0x216>
 8009daa:	2310      	movs	r3, #16
 8009dac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db6:	d15b      	bne.n	8009e70 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8009db8:	7ffb      	ldrb	r3, [r7, #31]
 8009dba:	2b08      	cmp	r3, #8
 8009dbc:	d827      	bhi.n	8009e0e <UART_SetConfig+0x276>
 8009dbe:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <UART_SetConfig+0x22c>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009de9 	.word	0x08009de9
 8009dc8:	08009df1 	.word	0x08009df1
 8009dcc:	08009df9 	.word	0x08009df9
 8009dd0:	08009e0f 	.word	0x08009e0f
 8009dd4:	08009dff 	.word	0x08009dff
 8009dd8:	08009e0f 	.word	0x08009e0f
 8009ddc:	08009e0f 	.word	0x08009e0f
 8009de0:	08009e0f 	.word	0x08009e0f
 8009de4:	08009e07 	.word	0x08009e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009de8:	f7fd ff7a 	bl	8007ce0 <HAL_RCC_GetPCLK1Freq>
 8009dec:	61b8      	str	r0, [r7, #24]
        break;
 8009dee:	e013      	b.n	8009e18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009df0:	f7fd ff98 	bl	8007d24 <HAL_RCC_GetPCLK2Freq>
 8009df4:	61b8      	str	r0, [r7, #24]
        break;
 8009df6:	e00f      	b.n	8009e18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009df8:	4b33      	ldr	r3, [pc, #204]	; (8009ec8 <UART_SetConfig+0x330>)
 8009dfa:	61bb      	str	r3, [r7, #24]
        break;
 8009dfc:	e00c      	b.n	8009e18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dfe:	f7fd fef7 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 8009e02:	61b8      	str	r0, [r7, #24]
        break;
 8009e04:	e008      	b.n	8009e18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e0a:	61bb      	str	r3, [r7, #24]
        break;
 8009e0c:	e004      	b.n	8009e18 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	77bb      	strb	r3, [r7, #30]
        break;
 8009e16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 8082 	beq.w	8009f24 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	005a      	lsls	r2, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	085b      	lsrs	r3, r3, #1
 8009e2a:	441a      	add	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2b0f      	cmp	r3, #15
 8009e3a:	d916      	bls.n	8009e6a <UART_SetConfig+0x2d2>
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e42:	d212      	bcs.n	8009e6a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f023 030f 	bic.w	r3, r3, #15
 8009e4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	085b      	lsrs	r3, r3, #1
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f003 0307 	and.w	r3, r3, #7
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	89fb      	ldrh	r3, [r7, #14]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	89fa      	ldrh	r2, [r7, #14]
 8009e66:	60da      	str	r2, [r3, #12]
 8009e68:	e05c      	b.n	8009f24 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	77bb      	strb	r3, [r7, #30]
 8009e6e:	e059      	b.n	8009f24 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e70:	7ffb      	ldrb	r3, [r7, #31]
 8009e72:	2b08      	cmp	r3, #8
 8009e74:	d835      	bhi.n	8009ee2 <UART_SetConfig+0x34a>
 8009e76:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <UART_SetConfig+0x2e4>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009ecd 	.word	0x08009ecd
 8009e88:	08009ee3 	.word	0x08009ee3
 8009e8c:	08009ed3 	.word	0x08009ed3
 8009e90:	08009ee3 	.word	0x08009ee3
 8009e94:	08009ee3 	.word	0x08009ee3
 8009e98:	08009ee3 	.word	0x08009ee3
 8009e9c:	08009edb 	.word	0x08009edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ea0:	f7fd ff1e 	bl	8007ce0 <HAL_RCC_GetPCLK1Freq>
 8009ea4:	61b8      	str	r0, [r7, #24]
        break;
 8009ea6:	e021      	b.n	8009eec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ea8:	f7fd ff3c 	bl	8007d24 <HAL_RCC_GetPCLK2Freq>
 8009eac:	61b8      	str	r0, [r7, #24]
        break;
 8009eae:	e01d      	b.n	8009eec <UART_SetConfig+0x354>
 8009eb0:	40013800 	.word	0x40013800
 8009eb4:	40021000 	.word	0x40021000
 8009eb8:	40004400 	.word	0x40004400
 8009ebc:	40004800 	.word	0x40004800
 8009ec0:	40004c00 	.word	0x40004c00
 8009ec4:	40005000 	.word	0x40005000
 8009ec8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ecc:	4b1b      	ldr	r3, [pc, #108]	; (8009f3c <UART_SetConfig+0x3a4>)
 8009ece:	61bb      	str	r3, [r7, #24]
        break;
 8009ed0:	e00c      	b.n	8009eec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ed2:	f7fd fe8d 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 8009ed6:	61b8      	str	r0, [r7, #24]
        break;
 8009ed8:	e008      	b.n	8009eec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ede:	61bb      	str	r3, [r7, #24]
        break;
 8009ee0:	e004      	b.n	8009eec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8009eea:	bf00      	nop
    }

    if (pclk != 0U)
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d018      	beq.n	8009f24 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	085a      	lsrs	r2, r3, #1
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	441a      	add	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2b0f      	cmp	r3, #15
 8009f0a:	d909      	bls.n	8009f20 <UART_SetConfig+0x388>
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f12:	d205      	bcs.n	8009f20 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	60da      	str	r2, [r3, #12]
 8009f1e:	e001      	b.n	8009f24 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009f30:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3720      	adds	r7, #32
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	007a1200 	.word	0x007a1200

08009f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00a      	beq.n	8009f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	f003 0302 	and.w	r3, r3, #2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	f003 0304 	and.w	r3, r3, #4
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00a      	beq.n	8009fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	f003 0308 	and.w	r3, r3, #8
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	f003 0320 	and.w	r3, r3, #32
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01a      	beq.n	800a056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a03e:	d10a      	bne.n	800a056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	605a      	str	r2, [r3, #4]
  }
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b098      	sub	sp, #96	; 0x60
 800a088:	af02      	add	r7, sp, #8
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a094:	f7f9 fd36 	bl	8003b04 <HAL_GetTick>
 800a098:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d12e      	bne.n	800a106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f88c 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d021      	beq.n	800a106 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a0e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e6      	bne.n	800a0c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e062      	b.n	800a1cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b04      	cmp	r3, #4
 800a112:	d149      	bne.n	800a1a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a11c:	2200      	movs	r2, #0
 800a11e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f856 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d03c      	beq.n	800a1a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	e853 3f00 	ldrex	r3, [r3]
 800a13a:	623b      	str	r3, [r7, #32]
   return(result);
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a142:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	461a      	mov	r2, r3
 800a14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a14c:	633b      	str	r3, [r7, #48]	; 0x30
 800a14e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e6      	bne.n	800a12e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3308      	adds	r3, #8
 800a166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	e853 3f00 	ldrex	r3, [r3]
 800a16e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0301 	bic.w	r3, r3, #1
 800a176:	64bb      	str	r3, [r7, #72]	; 0x48
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3308      	adds	r3, #8
 800a17e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a180:	61fa      	str	r2, [r7, #28]
 800a182:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	69b9      	ldr	r1, [r7, #24]
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	617b      	str	r3, [r7, #20]
   return(result);
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e5      	bne.n	800a160 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2220      	movs	r2, #32
 800a198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e011      	b.n	800a1cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3758      	adds	r7, #88	; 0x58
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e4:	e049      	b.n	800a27a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ec:	d045      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ee:	f7f9 fc89 	bl	8003b04 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d302      	bcc.n	800a204 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e048      	b.n	800a29a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d031      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	2b08      	cmp	r3, #8
 800a222:	d110      	bne.n	800a246 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2208      	movs	r2, #8
 800a22a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f838 	bl	800a2a2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2208      	movs	r2, #8
 800a236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e029      	b.n	800a29a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a254:	d111      	bne.n	800a27a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a25e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 f81e 	bl	800a2a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e00f      	b.n	800a29a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69da      	ldr	r2, [r3, #28]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4013      	ands	r3, r2
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	429a      	cmp	r2, r3
 800a288:	bf0c      	ite	eq
 800a28a:	2301      	moveq	r3, #1
 800a28c:	2300      	movne	r3, #0
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	461a      	mov	r2, r3
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	429a      	cmp	r2, r3
 800a296:	d0a6      	beq.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b095      	sub	sp, #84	; 0x54
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2d0:	e841 2300 	strex	r3, r2, [r1]
 800a2d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e6      	bne.n	800a2aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	f023 0301 	bic.w	r3, r3, #1
 800a2f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e5      	bne.n	800a2dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a314:	2b01      	cmp	r3, #1
 800a316:	d118      	bne.n	800a34a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	e853 3f00 	ldrex	r3, [r3]
 800a324:	60bb      	str	r3, [r7, #8]
   return(result);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f023 0310 	bic.w	r3, r3, #16
 800a32c:	647b      	str	r3, [r7, #68]	; 0x44
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a336:	61bb      	str	r3, [r7, #24]
 800a338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	6979      	ldr	r1, [r7, #20]
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	613b      	str	r3, [r7, #16]
   return(result);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e6      	bne.n	800a318 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a35e:	bf00      	nop
 800a360:	3754      	adds	r7, #84	; 0x54
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
	...

0800a36c <__errno>:
 800a36c:	4b01      	ldr	r3, [pc, #4]	; (800a374 <__errno+0x8>)
 800a36e:	6818      	ldr	r0, [r3, #0]
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	2000001c 	.word	0x2000001c

0800a378 <__libc_init_array>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	4d0d      	ldr	r5, [pc, #52]	; (800a3b0 <__libc_init_array+0x38>)
 800a37c:	4c0d      	ldr	r4, [pc, #52]	; (800a3b4 <__libc_init_array+0x3c>)
 800a37e:	1b64      	subs	r4, r4, r5
 800a380:	10a4      	asrs	r4, r4, #2
 800a382:	2600      	movs	r6, #0
 800a384:	42a6      	cmp	r6, r4
 800a386:	d109      	bne.n	800a39c <__libc_init_array+0x24>
 800a388:	4d0b      	ldr	r5, [pc, #44]	; (800a3b8 <__libc_init_array+0x40>)
 800a38a:	4c0c      	ldr	r4, [pc, #48]	; (800a3bc <__libc_init_array+0x44>)
 800a38c:	f002 ffe2 	bl	800d354 <_init>
 800a390:	1b64      	subs	r4, r4, r5
 800a392:	10a4      	asrs	r4, r4, #2
 800a394:	2600      	movs	r6, #0
 800a396:	42a6      	cmp	r6, r4
 800a398:	d105      	bne.n	800a3a6 <__libc_init_array+0x2e>
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3a0:	4798      	blx	r3
 800a3a2:	3601      	adds	r6, #1
 800a3a4:	e7ee      	b.n	800a384 <__libc_init_array+0xc>
 800a3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3aa:	4798      	blx	r3
 800a3ac:	3601      	adds	r6, #1
 800a3ae:	e7f2      	b.n	800a396 <__libc_init_array+0x1e>
 800a3b0:	0800e08c 	.word	0x0800e08c
 800a3b4:	0800e08c 	.word	0x0800e08c
 800a3b8:	0800e08c 	.word	0x0800e08c
 800a3bc:	0800e090 	.word	0x0800e090

0800a3c0 <malloc>:
 800a3c0:	4b02      	ldr	r3, [pc, #8]	; (800a3cc <malloc+0xc>)
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	6818      	ldr	r0, [r3, #0]
 800a3c6:	f000 b877 	b.w	800a4b8 <_malloc_r>
 800a3ca:	bf00      	nop
 800a3cc:	2000001c 	.word	0x2000001c

0800a3d0 <memset>:
 800a3d0:	4402      	add	r2, r0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d100      	bne.n	800a3da <memset+0xa>
 800a3d8:	4770      	bx	lr
 800a3da:	f803 1b01 	strb.w	r1, [r3], #1
 800a3de:	e7f9      	b.n	800a3d4 <memset+0x4>

0800a3e0 <_free_r>:
 800a3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d044      	beq.n	800a470 <_free_r+0x90>
 800a3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a3f2:	bfb8      	it	lt
 800a3f4:	18e4      	addlt	r4, r4, r3
 800a3f6:	f001 fbfb 	bl	800bbf0 <__malloc_lock>
 800a3fa:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <_free_r+0x94>)
 800a3fc:	9801      	ldr	r0, [sp, #4]
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	b933      	cbnz	r3, 800a410 <_free_r+0x30>
 800a402:	6063      	str	r3, [r4, #4]
 800a404:	6014      	str	r4, [r2, #0]
 800a406:	b003      	add	sp, #12
 800a408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a40c:	f001 bbf6 	b.w	800bbfc <__malloc_unlock>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d908      	bls.n	800a426 <_free_r+0x46>
 800a414:	6825      	ldr	r5, [r4, #0]
 800a416:	1961      	adds	r1, r4, r5
 800a418:	428b      	cmp	r3, r1
 800a41a:	bf01      	itttt	eq
 800a41c:	6819      	ldreq	r1, [r3, #0]
 800a41e:	685b      	ldreq	r3, [r3, #4]
 800a420:	1949      	addeq	r1, r1, r5
 800a422:	6021      	streq	r1, [r4, #0]
 800a424:	e7ed      	b.n	800a402 <_free_r+0x22>
 800a426:	461a      	mov	r2, r3
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	b10b      	cbz	r3, 800a430 <_free_r+0x50>
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	d9fa      	bls.n	800a426 <_free_r+0x46>
 800a430:	6811      	ldr	r1, [r2, #0]
 800a432:	1855      	adds	r5, r2, r1
 800a434:	42a5      	cmp	r5, r4
 800a436:	d10b      	bne.n	800a450 <_free_r+0x70>
 800a438:	6824      	ldr	r4, [r4, #0]
 800a43a:	4421      	add	r1, r4
 800a43c:	1854      	adds	r4, r2, r1
 800a43e:	42a3      	cmp	r3, r4
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	d1e0      	bne.n	800a406 <_free_r+0x26>
 800a444:	681c      	ldr	r4, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	6053      	str	r3, [r2, #4]
 800a44a:	4421      	add	r1, r4
 800a44c:	6011      	str	r1, [r2, #0]
 800a44e:	e7da      	b.n	800a406 <_free_r+0x26>
 800a450:	d902      	bls.n	800a458 <_free_r+0x78>
 800a452:	230c      	movs	r3, #12
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	e7d6      	b.n	800a406 <_free_r+0x26>
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1961      	adds	r1, r4, r5
 800a45c:	428b      	cmp	r3, r1
 800a45e:	bf04      	itt	eq
 800a460:	6819      	ldreq	r1, [r3, #0]
 800a462:	685b      	ldreq	r3, [r3, #4]
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	bf04      	itt	eq
 800a468:	1949      	addeq	r1, r1, r5
 800a46a:	6021      	streq	r1, [r4, #0]
 800a46c:	6054      	str	r4, [r2, #4]
 800a46e:	e7ca      	b.n	800a406 <_free_r+0x26>
 800a470:	b003      	add	sp, #12
 800a472:	bd30      	pop	{r4, r5, pc}
 800a474:	20000558 	.word	0x20000558

0800a478 <sbrk_aligned>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	4e0e      	ldr	r6, [pc, #56]	; (800a4b4 <sbrk_aligned+0x3c>)
 800a47c:	460c      	mov	r4, r1
 800a47e:	6831      	ldr	r1, [r6, #0]
 800a480:	4605      	mov	r5, r0
 800a482:	b911      	cbnz	r1, 800a48a <sbrk_aligned+0x12>
 800a484:	f000 fcf6 	bl	800ae74 <_sbrk_r>
 800a488:	6030      	str	r0, [r6, #0]
 800a48a:	4621      	mov	r1, r4
 800a48c:	4628      	mov	r0, r5
 800a48e:	f000 fcf1 	bl	800ae74 <_sbrk_r>
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	d00a      	beq.n	800a4ac <sbrk_aligned+0x34>
 800a496:	1cc4      	adds	r4, r0, #3
 800a498:	f024 0403 	bic.w	r4, r4, #3
 800a49c:	42a0      	cmp	r0, r4
 800a49e:	d007      	beq.n	800a4b0 <sbrk_aligned+0x38>
 800a4a0:	1a21      	subs	r1, r4, r0
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f000 fce6 	bl	800ae74 <_sbrk_r>
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d101      	bne.n	800a4b0 <sbrk_aligned+0x38>
 800a4ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	2000055c 	.word	0x2000055c

0800a4b8 <_malloc_r>:
 800a4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4bc:	1ccd      	adds	r5, r1, #3
 800a4be:	f025 0503 	bic.w	r5, r5, #3
 800a4c2:	3508      	adds	r5, #8
 800a4c4:	2d0c      	cmp	r5, #12
 800a4c6:	bf38      	it	cc
 800a4c8:	250c      	movcc	r5, #12
 800a4ca:	2d00      	cmp	r5, #0
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	db01      	blt.n	800a4d4 <_malloc_r+0x1c>
 800a4d0:	42a9      	cmp	r1, r5
 800a4d2:	d905      	bls.n	800a4e0 <_malloc_r+0x28>
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	2600      	movs	r6, #0
 800a4da:	4630      	mov	r0, r6
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e0:	4e2e      	ldr	r6, [pc, #184]	; (800a59c <_malloc_r+0xe4>)
 800a4e2:	f001 fb85 	bl	800bbf0 <__malloc_lock>
 800a4e6:	6833      	ldr	r3, [r6, #0]
 800a4e8:	461c      	mov	r4, r3
 800a4ea:	bb34      	cbnz	r4, 800a53a <_malloc_r+0x82>
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f7ff ffc2 	bl	800a478 <sbrk_aligned>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	d14d      	bne.n	800a596 <_malloc_r+0xde>
 800a4fa:	6834      	ldr	r4, [r6, #0]
 800a4fc:	4626      	mov	r6, r4
 800a4fe:	2e00      	cmp	r6, #0
 800a500:	d140      	bne.n	800a584 <_malloc_r+0xcc>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	4631      	mov	r1, r6
 800a506:	4638      	mov	r0, r7
 800a508:	eb04 0803 	add.w	r8, r4, r3
 800a50c:	f000 fcb2 	bl	800ae74 <_sbrk_r>
 800a510:	4580      	cmp	r8, r0
 800a512:	d13a      	bne.n	800a58a <_malloc_r+0xd2>
 800a514:	6821      	ldr	r1, [r4, #0]
 800a516:	3503      	adds	r5, #3
 800a518:	1a6d      	subs	r5, r5, r1
 800a51a:	f025 0503 	bic.w	r5, r5, #3
 800a51e:	3508      	adds	r5, #8
 800a520:	2d0c      	cmp	r5, #12
 800a522:	bf38      	it	cc
 800a524:	250c      	movcc	r5, #12
 800a526:	4629      	mov	r1, r5
 800a528:	4638      	mov	r0, r7
 800a52a:	f7ff ffa5 	bl	800a478 <sbrk_aligned>
 800a52e:	3001      	adds	r0, #1
 800a530:	d02b      	beq.n	800a58a <_malloc_r+0xd2>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	442b      	add	r3, r5
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	e00e      	b.n	800a558 <_malloc_r+0xa0>
 800a53a:	6822      	ldr	r2, [r4, #0]
 800a53c:	1b52      	subs	r2, r2, r5
 800a53e:	d41e      	bmi.n	800a57e <_malloc_r+0xc6>
 800a540:	2a0b      	cmp	r2, #11
 800a542:	d916      	bls.n	800a572 <_malloc_r+0xba>
 800a544:	1961      	adds	r1, r4, r5
 800a546:	42a3      	cmp	r3, r4
 800a548:	6025      	str	r5, [r4, #0]
 800a54a:	bf18      	it	ne
 800a54c:	6059      	strne	r1, [r3, #4]
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	bf08      	it	eq
 800a552:	6031      	streq	r1, [r6, #0]
 800a554:	5162      	str	r2, [r4, r5]
 800a556:	604b      	str	r3, [r1, #4]
 800a558:	4638      	mov	r0, r7
 800a55a:	f104 060b 	add.w	r6, r4, #11
 800a55e:	f001 fb4d 	bl	800bbfc <__malloc_unlock>
 800a562:	f026 0607 	bic.w	r6, r6, #7
 800a566:	1d23      	adds	r3, r4, #4
 800a568:	1af2      	subs	r2, r6, r3
 800a56a:	d0b6      	beq.n	800a4da <_malloc_r+0x22>
 800a56c:	1b9b      	subs	r3, r3, r6
 800a56e:	50a3      	str	r3, [r4, r2]
 800a570:	e7b3      	b.n	800a4da <_malloc_r+0x22>
 800a572:	6862      	ldr	r2, [r4, #4]
 800a574:	42a3      	cmp	r3, r4
 800a576:	bf0c      	ite	eq
 800a578:	6032      	streq	r2, [r6, #0]
 800a57a:	605a      	strne	r2, [r3, #4]
 800a57c:	e7ec      	b.n	800a558 <_malloc_r+0xa0>
 800a57e:	4623      	mov	r3, r4
 800a580:	6864      	ldr	r4, [r4, #4]
 800a582:	e7b2      	b.n	800a4ea <_malloc_r+0x32>
 800a584:	4634      	mov	r4, r6
 800a586:	6876      	ldr	r6, [r6, #4]
 800a588:	e7b9      	b.n	800a4fe <_malloc_r+0x46>
 800a58a:	230c      	movs	r3, #12
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	4638      	mov	r0, r7
 800a590:	f001 fb34 	bl	800bbfc <__malloc_unlock>
 800a594:	e7a1      	b.n	800a4da <_malloc_r+0x22>
 800a596:	6025      	str	r5, [r4, #0]
 800a598:	e7de      	b.n	800a558 <_malloc_r+0xa0>
 800a59a:	bf00      	nop
 800a59c:	20000558 	.word	0x20000558

0800a5a0 <__cvt>:
 800a5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	ec55 4b10 	vmov	r4, r5, d0
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	460e      	mov	r6, r1
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	bfbb      	ittet	lt
 800a5b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a5b6:	461d      	movlt	r5, r3
 800a5b8:	2300      	movge	r3, #0
 800a5ba:	232d      	movlt	r3, #45	; 0x2d
 800a5bc:	700b      	strb	r3, [r1, #0]
 800a5be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a5c4:	4691      	mov	r9, r2
 800a5c6:	f023 0820 	bic.w	r8, r3, #32
 800a5ca:	bfbc      	itt	lt
 800a5cc:	4622      	movlt	r2, r4
 800a5ce:	4614      	movlt	r4, r2
 800a5d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5d4:	d005      	beq.n	800a5e2 <__cvt+0x42>
 800a5d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5da:	d100      	bne.n	800a5de <__cvt+0x3e>
 800a5dc:	3601      	adds	r6, #1
 800a5de:	2102      	movs	r1, #2
 800a5e0:	e000      	b.n	800a5e4 <__cvt+0x44>
 800a5e2:	2103      	movs	r1, #3
 800a5e4:	ab03      	add	r3, sp, #12
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	ab02      	add	r3, sp, #8
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	ec45 4b10 	vmov	d0, r4, r5
 800a5f0:	4653      	mov	r3, sl
 800a5f2:	4632      	mov	r2, r6
 800a5f4:	f000 fcfc 	bl	800aff0 <_dtoa_r>
 800a5f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	d102      	bne.n	800a606 <__cvt+0x66>
 800a600:	f019 0f01 	tst.w	r9, #1
 800a604:	d022      	beq.n	800a64c <__cvt+0xac>
 800a606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a60a:	eb07 0906 	add.w	r9, r7, r6
 800a60e:	d110      	bne.n	800a632 <__cvt+0x92>
 800a610:	783b      	ldrb	r3, [r7, #0]
 800a612:	2b30      	cmp	r3, #48	; 0x30
 800a614:	d10a      	bne.n	800a62c <__cvt+0x8c>
 800a616:	2200      	movs	r2, #0
 800a618:	2300      	movs	r3, #0
 800a61a:	4620      	mov	r0, r4
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7f6 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 800a622:	b918      	cbnz	r0, 800a62c <__cvt+0x8c>
 800a624:	f1c6 0601 	rsb	r6, r6, #1
 800a628:	f8ca 6000 	str.w	r6, [sl]
 800a62c:	f8da 3000 	ldr.w	r3, [sl]
 800a630:	4499      	add	r9, r3
 800a632:	2200      	movs	r2, #0
 800a634:	2300      	movs	r3, #0
 800a636:	4620      	mov	r0, r4
 800a638:	4629      	mov	r1, r5
 800a63a:	f7f6 fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800a63e:	b108      	cbz	r0, 800a644 <__cvt+0xa4>
 800a640:	f8cd 900c 	str.w	r9, [sp, #12]
 800a644:	2230      	movs	r2, #48	; 0x30
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	454b      	cmp	r3, r9
 800a64a:	d307      	bcc.n	800a65c <__cvt+0xbc>
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a650:	1bdb      	subs	r3, r3, r7
 800a652:	4638      	mov	r0, r7
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	b004      	add	sp, #16
 800a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65c:	1c59      	adds	r1, r3, #1
 800a65e:	9103      	str	r1, [sp, #12]
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	e7f0      	b.n	800a646 <__cvt+0xa6>

0800a664 <__exponent>:
 800a664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a666:	4603      	mov	r3, r0
 800a668:	2900      	cmp	r1, #0
 800a66a:	bfb8      	it	lt
 800a66c:	4249      	neglt	r1, r1
 800a66e:	f803 2b02 	strb.w	r2, [r3], #2
 800a672:	bfb4      	ite	lt
 800a674:	222d      	movlt	r2, #45	; 0x2d
 800a676:	222b      	movge	r2, #43	; 0x2b
 800a678:	2909      	cmp	r1, #9
 800a67a:	7042      	strb	r2, [r0, #1]
 800a67c:	dd2a      	ble.n	800a6d4 <__exponent+0x70>
 800a67e:	f10d 0407 	add.w	r4, sp, #7
 800a682:	46a4      	mov	ip, r4
 800a684:	270a      	movs	r7, #10
 800a686:	46a6      	mov	lr, r4
 800a688:	460a      	mov	r2, r1
 800a68a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a68e:	fb07 1516 	mls	r5, r7, r6, r1
 800a692:	3530      	adds	r5, #48	; 0x30
 800a694:	2a63      	cmp	r2, #99	; 0x63
 800a696:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a69a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a69e:	4631      	mov	r1, r6
 800a6a0:	dcf1      	bgt.n	800a686 <__exponent+0x22>
 800a6a2:	3130      	adds	r1, #48	; 0x30
 800a6a4:	f1ae 0502 	sub.w	r5, lr, #2
 800a6a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a6ac:	1c44      	adds	r4, r0, #1
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4561      	cmp	r1, ip
 800a6b2:	d30a      	bcc.n	800a6ca <__exponent+0x66>
 800a6b4:	f10d 0209 	add.w	r2, sp, #9
 800a6b8:	eba2 020e 	sub.w	r2, r2, lr
 800a6bc:	4565      	cmp	r5, ip
 800a6be:	bf88      	it	hi
 800a6c0:	2200      	movhi	r2, #0
 800a6c2:	4413      	add	r3, r2
 800a6c4:	1a18      	subs	r0, r3, r0
 800a6c6:	b003      	add	sp, #12
 800a6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a6d2:	e7ed      	b.n	800a6b0 <__exponent+0x4c>
 800a6d4:	2330      	movs	r3, #48	; 0x30
 800a6d6:	3130      	adds	r1, #48	; 0x30
 800a6d8:	7083      	strb	r3, [r0, #2]
 800a6da:	70c1      	strb	r1, [r0, #3]
 800a6dc:	1d03      	adds	r3, r0, #4
 800a6de:	e7f1      	b.n	800a6c4 <__exponent+0x60>

0800a6e0 <_printf_float>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	ed2d 8b02 	vpush	{d8}
 800a6e8:	b08d      	sub	sp, #52	; 0x34
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6f0:	4616      	mov	r6, r2
 800a6f2:	461f      	mov	r7, r3
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	f001 fa69 	bl	800bbcc <_localeconv_r>
 800a6fa:	f8d0 a000 	ldr.w	sl, [r0]
 800a6fe:	4650      	mov	r0, sl
 800a700:	f7f5 fd66 	bl	80001d0 <strlen>
 800a704:	2300      	movs	r3, #0
 800a706:	930a      	str	r3, [sp, #40]	; 0x28
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	9305      	str	r3, [sp, #20]
 800a70c:	f8d8 3000 	ldr.w	r3, [r8]
 800a710:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a714:	3307      	adds	r3, #7
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	f103 0208 	add.w	r2, r3, #8
 800a71e:	f8c8 2000 	str.w	r2, [r8]
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a72a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a72e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a732:	9307      	str	r3, [sp, #28]
 800a734:	f8cd 8018 	str.w	r8, [sp, #24]
 800a738:	ee08 0a10 	vmov	s16, r0
 800a73c:	4b9f      	ldr	r3, [pc, #636]	; (800a9bc <_printf_float+0x2dc>)
 800a73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a746:	f7f6 f9f1 	bl	8000b2c <__aeabi_dcmpun>
 800a74a:	bb88      	cbnz	r0, 800a7b0 <_printf_float+0xd0>
 800a74c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a750:	4b9a      	ldr	r3, [pc, #616]	; (800a9bc <_printf_float+0x2dc>)
 800a752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a756:	f7f6 f9cb 	bl	8000af0 <__aeabi_dcmple>
 800a75a:	bb48      	cbnz	r0, 800a7b0 <_printf_float+0xd0>
 800a75c:	2200      	movs	r2, #0
 800a75e:	2300      	movs	r3, #0
 800a760:	4640      	mov	r0, r8
 800a762:	4649      	mov	r1, r9
 800a764:	f7f6 f9ba 	bl	8000adc <__aeabi_dcmplt>
 800a768:	b110      	cbz	r0, 800a770 <_printf_float+0x90>
 800a76a:	232d      	movs	r3, #45	; 0x2d
 800a76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a770:	4b93      	ldr	r3, [pc, #588]	; (800a9c0 <_printf_float+0x2e0>)
 800a772:	4894      	ldr	r0, [pc, #592]	; (800a9c4 <_printf_float+0x2e4>)
 800a774:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a778:	bf94      	ite	ls
 800a77a:	4698      	movls	r8, r3
 800a77c:	4680      	movhi	r8, r0
 800a77e:	2303      	movs	r3, #3
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	9b05      	ldr	r3, [sp, #20]
 800a784:	f023 0204 	bic.w	r2, r3, #4
 800a788:	6022      	str	r2, [r4, #0]
 800a78a:	f04f 0900 	mov.w	r9, #0
 800a78e:	9700      	str	r7, [sp, #0]
 800a790:	4633      	mov	r3, r6
 800a792:	aa0b      	add	r2, sp, #44	; 0x2c
 800a794:	4621      	mov	r1, r4
 800a796:	4628      	mov	r0, r5
 800a798:	f000 f9d8 	bl	800ab4c <_printf_common>
 800a79c:	3001      	adds	r0, #1
 800a79e:	f040 8090 	bne.w	800a8c2 <_printf_float+0x1e2>
 800a7a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7a6:	b00d      	add	sp, #52	; 0x34
 800a7a8:	ecbd 8b02 	vpop	{d8}
 800a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	f7f6 f9b8 	bl	8000b2c <__aeabi_dcmpun>
 800a7bc:	b140      	cbz	r0, 800a7d0 <_printf_float+0xf0>
 800a7be:	464b      	mov	r3, r9
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bfbc      	itt	lt
 800a7c4:	232d      	movlt	r3, #45	; 0x2d
 800a7c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a7ca:	487f      	ldr	r0, [pc, #508]	; (800a9c8 <_printf_float+0x2e8>)
 800a7cc:	4b7f      	ldr	r3, [pc, #508]	; (800a9cc <_printf_float+0x2ec>)
 800a7ce:	e7d1      	b.n	800a774 <_printf_float+0x94>
 800a7d0:	6863      	ldr	r3, [r4, #4]
 800a7d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7d6:	9206      	str	r2, [sp, #24]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	d13f      	bne.n	800a85c <_printf_float+0x17c>
 800a7dc:	2306      	movs	r3, #6
 800a7de:	6063      	str	r3, [r4, #4]
 800a7e0:	9b05      	ldr	r3, [sp, #20]
 800a7e2:	6861      	ldr	r1, [r4, #4]
 800a7e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	ab0a      	add	r3, sp, #40	; 0x28
 800a7ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7f2:	ab09      	add	r3, sp, #36	; 0x24
 800a7f4:	ec49 8b10 	vmov	d0, r8, r9
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	6022      	str	r2, [r4, #0]
 800a7fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a800:	4628      	mov	r0, r5
 800a802:	f7ff fecd 	bl	800a5a0 <__cvt>
 800a806:	9b06      	ldr	r3, [sp, #24]
 800a808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a80a:	2b47      	cmp	r3, #71	; 0x47
 800a80c:	4680      	mov	r8, r0
 800a80e:	d108      	bne.n	800a822 <_printf_float+0x142>
 800a810:	1cc8      	adds	r0, r1, #3
 800a812:	db02      	blt.n	800a81a <_printf_float+0x13a>
 800a814:	6863      	ldr	r3, [r4, #4]
 800a816:	4299      	cmp	r1, r3
 800a818:	dd41      	ble.n	800a89e <_printf_float+0x1be>
 800a81a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a81e:	fa5f fb8b 	uxtb.w	fp, fp
 800a822:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a826:	d820      	bhi.n	800a86a <_printf_float+0x18a>
 800a828:	3901      	subs	r1, #1
 800a82a:	465a      	mov	r2, fp
 800a82c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a830:	9109      	str	r1, [sp, #36]	; 0x24
 800a832:	f7ff ff17 	bl	800a664 <__exponent>
 800a836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a838:	1813      	adds	r3, r2, r0
 800a83a:	2a01      	cmp	r2, #1
 800a83c:	4681      	mov	r9, r0
 800a83e:	6123      	str	r3, [r4, #16]
 800a840:	dc02      	bgt.n	800a848 <_printf_float+0x168>
 800a842:	6822      	ldr	r2, [r4, #0]
 800a844:	07d2      	lsls	r2, r2, #31
 800a846:	d501      	bpl.n	800a84c <_printf_float+0x16c>
 800a848:	3301      	adds	r3, #1
 800a84a:	6123      	str	r3, [r4, #16]
 800a84c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a850:	2b00      	cmp	r3, #0
 800a852:	d09c      	beq.n	800a78e <_printf_float+0xae>
 800a854:	232d      	movs	r3, #45	; 0x2d
 800a856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a85a:	e798      	b.n	800a78e <_printf_float+0xae>
 800a85c:	9a06      	ldr	r2, [sp, #24]
 800a85e:	2a47      	cmp	r2, #71	; 0x47
 800a860:	d1be      	bne.n	800a7e0 <_printf_float+0x100>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1bc      	bne.n	800a7e0 <_printf_float+0x100>
 800a866:	2301      	movs	r3, #1
 800a868:	e7b9      	b.n	800a7de <_printf_float+0xfe>
 800a86a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a86e:	d118      	bne.n	800a8a2 <_printf_float+0x1c2>
 800a870:	2900      	cmp	r1, #0
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	dd0b      	ble.n	800a88e <_printf_float+0x1ae>
 800a876:	6121      	str	r1, [r4, #16]
 800a878:	b913      	cbnz	r3, 800a880 <_printf_float+0x1a0>
 800a87a:	6822      	ldr	r2, [r4, #0]
 800a87c:	07d0      	lsls	r0, r2, #31
 800a87e:	d502      	bpl.n	800a886 <_printf_float+0x1a6>
 800a880:	3301      	adds	r3, #1
 800a882:	440b      	add	r3, r1
 800a884:	6123      	str	r3, [r4, #16]
 800a886:	65a1      	str	r1, [r4, #88]	; 0x58
 800a888:	f04f 0900 	mov.w	r9, #0
 800a88c:	e7de      	b.n	800a84c <_printf_float+0x16c>
 800a88e:	b913      	cbnz	r3, 800a896 <_printf_float+0x1b6>
 800a890:	6822      	ldr	r2, [r4, #0]
 800a892:	07d2      	lsls	r2, r2, #31
 800a894:	d501      	bpl.n	800a89a <_printf_float+0x1ba>
 800a896:	3302      	adds	r3, #2
 800a898:	e7f4      	b.n	800a884 <_printf_float+0x1a4>
 800a89a:	2301      	movs	r3, #1
 800a89c:	e7f2      	b.n	800a884 <_printf_float+0x1a4>
 800a89e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8a4:	4299      	cmp	r1, r3
 800a8a6:	db05      	blt.n	800a8b4 <_printf_float+0x1d4>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	6121      	str	r1, [r4, #16]
 800a8ac:	07d8      	lsls	r0, r3, #31
 800a8ae:	d5ea      	bpl.n	800a886 <_printf_float+0x1a6>
 800a8b0:	1c4b      	adds	r3, r1, #1
 800a8b2:	e7e7      	b.n	800a884 <_printf_float+0x1a4>
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	bfd4      	ite	le
 800a8b8:	f1c1 0202 	rsble	r2, r1, #2
 800a8bc:	2201      	movgt	r2, #1
 800a8be:	4413      	add	r3, r2
 800a8c0:	e7e0      	b.n	800a884 <_printf_float+0x1a4>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	055a      	lsls	r2, r3, #21
 800a8c6:	d407      	bmi.n	800a8d8 <_printf_float+0x1f8>
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	4642      	mov	r2, r8
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	d12c      	bne.n	800a930 <_printf_float+0x250>
 800a8d6:	e764      	b.n	800a7a2 <_printf_float+0xc2>
 800a8d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8dc:	f240 80e0 	bls.w	800aaa0 <_printf_float+0x3c0>
 800a8e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f7f6 f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d034      	beq.n	800a95a <_printf_float+0x27a>
 800a8f0:	4a37      	ldr	r2, [pc, #220]	; (800a9d0 <_printf_float+0x2f0>)
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	f43f af51 	beq.w	800a7a2 <_printf_float+0xc2>
 800a900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a904:	429a      	cmp	r2, r3
 800a906:	db02      	blt.n	800a90e <_printf_float+0x22e>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	07d8      	lsls	r0, r3, #31
 800a90c:	d510      	bpl.n	800a930 <_printf_float+0x250>
 800a90e:	ee18 3a10 	vmov	r3, s16
 800a912:	4652      	mov	r2, sl
 800a914:	4631      	mov	r1, r6
 800a916:	4628      	mov	r0, r5
 800a918:	47b8      	blx	r7
 800a91a:	3001      	adds	r0, #1
 800a91c:	f43f af41 	beq.w	800a7a2 <_printf_float+0xc2>
 800a920:	f04f 0800 	mov.w	r8, #0
 800a924:	f104 091a 	add.w	r9, r4, #26
 800a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a92a:	3b01      	subs	r3, #1
 800a92c:	4543      	cmp	r3, r8
 800a92e:	dc09      	bgt.n	800a944 <_printf_float+0x264>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	079b      	lsls	r3, r3, #30
 800a934:	f100 8105 	bmi.w	800ab42 <_printf_float+0x462>
 800a938:	68e0      	ldr	r0, [r4, #12]
 800a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93c:	4298      	cmp	r0, r3
 800a93e:	bfb8      	it	lt
 800a940:	4618      	movlt	r0, r3
 800a942:	e730      	b.n	800a7a6 <_printf_float+0xc6>
 800a944:	2301      	movs	r3, #1
 800a946:	464a      	mov	r2, r9
 800a948:	4631      	mov	r1, r6
 800a94a:	4628      	mov	r0, r5
 800a94c:	47b8      	blx	r7
 800a94e:	3001      	adds	r0, #1
 800a950:	f43f af27 	beq.w	800a7a2 <_printf_float+0xc2>
 800a954:	f108 0801 	add.w	r8, r8, #1
 800a958:	e7e6      	b.n	800a928 <_printf_float+0x248>
 800a95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dc39      	bgt.n	800a9d4 <_printf_float+0x2f4>
 800a960:	4a1b      	ldr	r2, [pc, #108]	; (800a9d0 <_printf_float+0x2f0>)
 800a962:	2301      	movs	r3, #1
 800a964:	4631      	mov	r1, r6
 800a966:	4628      	mov	r0, r5
 800a968:	47b8      	blx	r7
 800a96a:	3001      	adds	r0, #1
 800a96c:	f43f af19 	beq.w	800a7a2 <_printf_float+0xc2>
 800a970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a974:	4313      	orrs	r3, r2
 800a976:	d102      	bne.n	800a97e <_printf_float+0x29e>
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	07d9      	lsls	r1, r3, #31
 800a97c:	d5d8      	bpl.n	800a930 <_printf_float+0x250>
 800a97e:	ee18 3a10 	vmov	r3, s16
 800a982:	4652      	mov	r2, sl
 800a984:	4631      	mov	r1, r6
 800a986:	4628      	mov	r0, r5
 800a988:	47b8      	blx	r7
 800a98a:	3001      	adds	r0, #1
 800a98c:	f43f af09 	beq.w	800a7a2 <_printf_float+0xc2>
 800a990:	f04f 0900 	mov.w	r9, #0
 800a994:	f104 0a1a 	add.w	sl, r4, #26
 800a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99a:	425b      	negs	r3, r3
 800a99c:	454b      	cmp	r3, r9
 800a99e:	dc01      	bgt.n	800a9a4 <_printf_float+0x2c4>
 800a9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a2:	e792      	b.n	800a8ca <_printf_float+0x1ea>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	4652      	mov	r2, sl
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	f43f aef7 	beq.w	800a7a2 <_printf_float+0xc2>
 800a9b4:	f109 0901 	add.w	r9, r9, #1
 800a9b8:	e7ee      	b.n	800a998 <_printf_float+0x2b8>
 800a9ba:	bf00      	nop
 800a9bc:	7fefffff 	.word	0x7fefffff
 800a9c0:	0800dcb0 	.word	0x0800dcb0
 800a9c4:	0800dcb4 	.word	0x0800dcb4
 800a9c8:	0800dcbc 	.word	0x0800dcbc
 800a9cc:	0800dcb8 	.word	0x0800dcb8
 800a9d0:	0800dcc0 	.word	0x0800dcc0
 800a9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	bfa8      	it	ge
 800a9dc:	461a      	movge	r2, r3
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	4691      	mov	r9, r2
 800a9e2:	dc37      	bgt.n	800aa54 <_printf_float+0x374>
 800a9e4:	f04f 0b00 	mov.w	fp, #0
 800a9e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9ec:	f104 021a 	add.w	r2, r4, #26
 800a9f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	eba3 0309 	sub.w	r3, r3, r9
 800a9f8:	455b      	cmp	r3, fp
 800a9fa:	dc33      	bgt.n	800aa64 <_printf_float+0x384>
 800a9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa00:	429a      	cmp	r2, r3
 800aa02:	db3b      	blt.n	800aa7c <_printf_float+0x39c>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	07da      	lsls	r2, r3, #31
 800aa08:	d438      	bmi.n	800aa7c <_printf_float+0x39c>
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	9a05      	ldr	r2, [sp, #20]
 800aa0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa10:	1a9a      	subs	r2, r3, r2
 800aa12:	eba3 0901 	sub.w	r9, r3, r1
 800aa16:	4591      	cmp	r9, r2
 800aa18:	bfa8      	it	ge
 800aa1a:	4691      	movge	r9, r2
 800aa1c:	f1b9 0f00 	cmp.w	r9, #0
 800aa20:	dc35      	bgt.n	800aa8e <_printf_float+0x3ae>
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa2a:	f104 0a1a 	add.w	sl, r4, #26
 800aa2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa32:	1a9b      	subs	r3, r3, r2
 800aa34:	eba3 0309 	sub.w	r3, r3, r9
 800aa38:	4543      	cmp	r3, r8
 800aa3a:	f77f af79 	ble.w	800a930 <_printf_float+0x250>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4652      	mov	r2, sl
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f aeaa 	beq.w	800a7a2 <_printf_float+0xc2>
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	e7ec      	b.n	800aa2e <_printf_float+0x34e>
 800aa54:	4613      	mov	r3, r2
 800aa56:	4631      	mov	r1, r6
 800aa58:	4642      	mov	r2, r8
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b8      	blx	r7
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d1c0      	bne.n	800a9e4 <_printf_float+0x304>
 800aa62:	e69e      	b.n	800a7a2 <_printf_float+0xc2>
 800aa64:	2301      	movs	r3, #1
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	9205      	str	r2, [sp, #20]
 800aa6c:	47b8      	blx	r7
 800aa6e:	3001      	adds	r0, #1
 800aa70:	f43f ae97 	beq.w	800a7a2 <_printf_float+0xc2>
 800aa74:	9a05      	ldr	r2, [sp, #20]
 800aa76:	f10b 0b01 	add.w	fp, fp, #1
 800aa7a:	e7b9      	b.n	800a9f0 <_printf_float+0x310>
 800aa7c:	ee18 3a10 	vmov	r3, s16
 800aa80:	4652      	mov	r2, sl
 800aa82:	4631      	mov	r1, r6
 800aa84:	4628      	mov	r0, r5
 800aa86:	47b8      	blx	r7
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d1be      	bne.n	800aa0a <_printf_float+0x32a>
 800aa8c:	e689      	b.n	800a7a2 <_printf_float+0xc2>
 800aa8e:	9a05      	ldr	r2, [sp, #20]
 800aa90:	464b      	mov	r3, r9
 800aa92:	4442      	add	r2, r8
 800aa94:	4631      	mov	r1, r6
 800aa96:	4628      	mov	r0, r5
 800aa98:	47b8      	blx	r7
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	d1c1      	bne.n	800aa22 <_printf_float+0x342>
 800aa9e:	e680      	b.n	800a7a2 <_printf_float+0xc2>
 800aaa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaa2:	2a01      	cmp	r2, #1
 800aaa4:	dc01      	bgt.n	800aaaa <_printf_float+0x3ca>
 800aaa6:	07db      	lsls	r3, r3, #31
 800aaa8:	d538      	bpl.n	800ab1c <_printf_float+0x43c>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	4642      	mov	r2, r8
 800aaae:	4631      	mov	r1, r6
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b8      	blx	r7
 800aab4:	3001      	adds	r0, #1
 800aab6:	f43f ae74 	beq.w	800a7a2 <_printf_float+0xc2>
 800aaba:	ee18 3a10 	vmov	r3, s16
 800aabe:	4652      	mov	r2, sl
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	47b8      	blx	r7
 800aac6:	3001      	adds	r0, #1
 800aac8:	f43f ae6b 	beq.w	800a7a2 <_printf_float+0xc2>
 800aacc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aad0:	2200      	movs	r2, #0
 800aad2:	2300      	movs	r3, #0
 800aad4:	f7f5 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 800aad8:	b9d8      	cbnz	r0, 800ab12 <_printf_float+0x432>
 800aada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aadc:	f108 0201 	add.w	r2, r8, #1
 800aae0:	3b01      	subs	r3, #1
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b8      	blx	r7
 800aae8:	3001      	adds	r0, #1
 800aaea:	d10e      	bne.n	800ab0a <_printf_float+0x42a>
 800aaec:	e659      	b.n	800a7a2 <_printf_float+0xc2>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f43f ae52 	beq.w	800a7a2 <_printf_float+0xc2>
 800aafe:	f108 0801 	add.w	r8, r8, #1
 800ab02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab04:	3b01      	subs	r3, #1
 800ab06:	4543      	cmp	r3, r8
 800ab08:	dcf1      	bgt.n	800aaee <_printf_float+0x40e>
 800ab0a:	464b      	mov	r3, r9
 800ab0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab10:	e6dc      	b.n	800a8cc <_printf_float+0x1ec>
 800ab12:	f04f 0800 	mov.w	r8, #0
 800ab16:	f104 0a1a 	add.w	sl, r4, #26
 800ab1a:	e7f2      	b.n	800ab02 <_printf_float+0x422>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	4642      	mov	r2, r8
 800ab20:	e7df      	b.n	800aae2 <_printf_float+0x402>
 800ab22:	2301      	movs	r3, #1
 800ab24:	464a      	mov	r2, r9
 800ab26:	4631      	mov	r1, r6
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b8      	blx	r7
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f43f ae38 	beq.w	800a7a2 <_printf_float+0xc2>
 800ab32:	f108 0801 	add.w	r8, r8, #1
 800ab36:	68e3      	ldr	r3, [r4, #12]
 800ab38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab3a:	1a5b      	subs	r3, r3, r1
 800ab3c:	4543      	cmp	r3, r8
 800ab3e:	dcf0      	bgt.n	800ab22 <_printf_float+0x442>
 800ab40:	e6fa      	b.n	800a938 <_printf_float+0x258>
 800ab42:	f04f 0800 	mov.w	r8, #0
 800ab46:	f104 0919 	add.w	r9, r4, #25
 800ab4a:	e7f4      	b.n	800ab36 <_printf_float+0x456>

0800ab4c <_printf_common>:
 800ab4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab50:	4616      	mov	r6, r2
 800ab52:	4699      	mov	r9, r3
 800ab54:	688a      	ldr	r2, [r1, #8]
 800ab56:	690b      	ldr	r3, [r1, #16]
 800ab58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	bfb8      	it	lt
 800ab60:	4613      	movlt	r3, r2
 800ab62:	6033      	str	r3, [r6, #0]
 800ab64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab68:	4607      	mov	r7, r0
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	b10a      	cbz	r2, 800ab72 <_printf_common+0x26>
 800ab6e:	3301      	adds	r3, #1
 800ab70:	6033      	str	r3, [r6, #0]
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	0699      	lsls	r1, r3, #26
 800ab76:	bf42      	ittt	mi
 800ab78:	6833      	ldrmi	r3, [r6, #0]
 800ab7a:	3302      	addmi	r3, #2
 800ab7c:	6033      	strmi	r3, [r6, #0]
 800ab7e:	6825      	ldr	r5, [r4, #0]
 800ab80:	f015 0506 	ands.w	r5, r5, #6
 800ab84:	d106      	bne.n	800ab94 <_printf_common+0x48>
 800ab86:	f104 0a19 	add.w	sl, r4, #25
 800ab8a:	68e3      	ldr	r3, [r4, #12]
 800ab8c:	6832      	ldr	r2, [r6, #0]
 800ab8e:	1a9b      	subs	r3, r3, r2
 800ab90:	42ab      	cmp	r3, r5
 800ab92:	dc26      	bgt.n	800abe2 <_printf_common+0x96>
 800ab94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab98:	1e13      	subs	r3, r2, #0
 800ab9a:	6822      	ldr	r2, [r4, #0]
 800ab9c:	bf18      	it	ne
 800ab9e:	2301      	movne	r3, #1
 800aba0:	0692      	lsls	r2, r2, #26
 800aba2:	d42b      	bmi.n	800abfc <_printf_common+0xb0>
 800aba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aba8:	4649      	mov	r1, r9
 800abaa:	4638      	mov	r0, r7
 800abac:	47c0      	blx	r8
 800abae:	3001      	adds	r0, #1
 800abb0:	d01e      	beq.n	800abf0 <_printf_common+0xa4>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	68e5      	ldr	r5, [r4, #12]
 800abb6:	6832      	ldr	r2, [r6, #0]
 800abb8:	f003 0306 	and.w	r3, r3, #6
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	bf08      	it	eq
 800abc0:	1aad      	subeq	r5, r5, r2
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	6922      	ldr	r2, [r4, #16]
 800abc6:	bf0c      	ite	eq
 800abc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abcc:	2500      	movne	r5, #0
 800abce:	4293      	cmp	r3, r2
 800abd0:	bfc4      	itt	gt
 800abd2:	1a9b      	subgt	r3, r3, r2
 800abd4:	18ed      	addgt	r5, r5, r3
 800abd6:	2600      	movs	r6, #0
 800abd8:	341a      	adds	r4, #26
 800abda:	42b5      	cmp	r5, r6
 800abdc:	d11a      	bne.n	800ac14 <_printf_common+0xc8>
 800abde:	2000      	movs	r0, #0
 800abe0:	e008      	b.n	800abf4 <_printf_common+0xa8>
 800abe2:	2301      	movs	r3, #1
 800abe4:	4652      	mov	r2, sl
 800abe6:	4649      	mov	r1, r9
 800abe8:	4638      	mov	r0, r7
 800abea:	47c0      	blx	r8
 800abec:	3001      	adds	r0, #1
 800abee:	d103      	bne.n	800abf8 <_printf_common+0xac>
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf8:	3501      	adds	r5, #1
 800abfa:	e7c6      	b.n	800ab8a <_printf_common+0x3e>
 800abfc:	18e1      	adds	r1, r4, r3
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	2030      	movs	r0, #48	; 0x30
 800ac02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac06:	4422      	add	r2, r4
 800ac08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac10:	3302      	adds	r3, #2
 800ac12:	e7c7      	b.n	800aba4 <_printf_common+0x58>
 800ac14:	2301      	movs	r3, #1
 800ac16:	4622      	mov	r2, r4
 800ac18:	4649      	mov	r1, r9
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	47c0      	blx	r8
 800ac1e:	3001      	adds	r0, #1
 800ac20:	d0e6      	beq.n	800abf0 <_printf_common+0xa4>
 800ac22:	3601      	adds	r6, #1
 800ac24:	e7d9      	b.n	800abda <_printf_common+0x8e>
	...

0800ac28 <_printf_i>:
 800ac28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	7e0f      	ldrb	r7, [r1, #24]
 800ac2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac30:	2f78      	cmp	r7, #120	; 0x78
 800ac32:	4691      	mov	r9, r2
 800ac34:	4680      	mov	r8, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	469a      	mov	sl, r3
 800ac3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac3e:	d807      	bhi.n	800ac50 <_printf_i+0x28>
 800ac40:	2f62      	cmp	r7, #98	; 0x62
 800ac42:	d80a      	bhi.n	800ac5a <_printf_i+0x32>
 800ac44:	2f00      	cmp	r7, #0
 800ac46:	f000 80d8 	beq.w	800adfa <_printf_i+0x1d2>
 800ac4a:	2f58      	cmp	r7, #88	; 0x58
 800ac4c:	f000 80a3 	beq.w	800ad96 <_printf_i+0x16e>
 800ac50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac58:	e03a      	b.n	800acd0 <_printf_i+0xa8>
 800ac5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac5e:	2b15      	cmp	r3, #21
 800ac60:	d8f6      	bhi.n	800ac50 <_printf_i+0x28>
 800ac62:	a101      	add	r1, pc, #4	; (adr r1, 800ac68 <_printf_i+0x40>)
 800ac64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac68:	0800acc1 	.word	0x0800acc1
 800ac6c:	0800acd5 	.word	0x0800acd5
 800ac70:	0800ac51 	.word	0x0800ac51
 800ac74:	0800ac51 	.word	0x0800ac51
 800ac78:	0800ac51 	.word	0x0800ac51
 800ac7c:	0800ac51 	.word	0x0800ac51
 800ac80:	0800acd5 	.word	0x0800acd5
 800ac84:	0800ac51 	.word	0x0800ac51
 800ac88:	0800ac51 	.word	0x0800ac51
 800ac8c:	0800ac51 	.word	0x0800ac51
 800ac90:	0800ac51 	.word	0x0800ac51
 800ac94:	0800ade1 	.word	0x0800ade1
 800ac98:	0800ad05 	.word	0x0800ad05
 800ac9c:	0800adc3 	.word	0x0800adc3
 800aca0:	0800ac51 	.word	0x0800ac51
 800aca4:	0800ac51 	.word	0x0800ac51
 800aca8:	0800ae03 	.word	0x0800ae03
 800acac:	0800ac51 	.word	0x0800ac51
 800acb0:	0800ad05 	.word	0x0800ad05
 800acb4:	0800ac51 	.word	0x0800ac51
 800acb8:	0800ac51 	.word	0x0800ac51
 800acbc:	0800adcb 	.word	0x0800adcb
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	1d1a      	adds	r2, r3, #4
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	602a      	str	r2, [r5, #0]
 800acc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800accc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0a3      	b.n	800ae1c <_printf_i+0x1f4>
 800acd4:	6820      	ldr	r0, [r4, #0]
 800acd6:	6829      	ldr	r1, [r5, #0]
 800acd8:	0606      	lsls	r6, r0, #24
 800acda:	f101 0304 	add.w	r3, r1, #4
 800acde:	d50a      	bpl.n	800acf6 <_printf_i+0xce>
 800ace0:	680e      	ldr	r6, [r1, #0]
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	2e00      	cmp	r6, #0
 800ace6:	da03      	bge.n	800acf0 <_printf_i+0xc8>
 800ace8:	232d      	movs	r3, #45	; 0x2d
 800acea:	4276      	negs	r6, r6
 800acec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf0:	485e      	ldr	r0, [pc, #376]	; (800ae6c <_printf_i+0x244>)
 800acf2:	230a      	movs	r3, #10
 800acf4:	e019      	b.n	800ad2a <_printf_i+0x102>
 800acf6:	680e      	ldr	r6, [r1, #0]
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acfe:	bf18      	it	ne
 800ad00:	b236      	sxthne	r6, r6
 800ad02:	e7ef      	b.n	800ace4 <_printf_i+0xbc>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	6820      	ldr	r0, [r4, #0]
 800ad08:	1d19      	adds	r1, r3, #4
 800ad0a:	6029      	str	r1, [r5, #0]
 800ad0c:	0601      	lsls	r1, r0, #24
 800ad0e:	d501      	bpl.n	800ad14 <_printf_i+0xec>
 800ad10:	681e      	ldr	r6, [r3, #0]
 800ad12:	e002      	b.n	800ad1a <_printf_i+0xf2>
 800ad14:	0646      	lsls	r6, r0, #25
 800ad16:	d5fb      	bpl.n	800ad10 <_printf_i+0xe8>
 800ad18:	881e      	ldrh	r6, [r3, #0]
 800ad1a:	4854      	ldr	r0, [pc, #336]	; (800ae6c <_printf_i+0x244>)
 800ad1c:	2f6f      	cmp	r7, #111	; 0x6f
 800ad1e:	bf0c      	ite	eq
 800ad20:	2308      	moveq	r3, #8
 800ad22:	230a      	movne	r3, #10
 800ad24:	2100      	movs	r1, #0
 800ad26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad2a:	6865      	ldr	r5, [r4, #4]
 800ad2c:	60a5      	str	r5, [r4, #8]
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	bfa2      	ittt	ge
 800ad32:	6821      	ldrge	r1, [r4, #0]
 800ad34:	f021 0104 	bicge.w	r1, r1, #4
 800ad38:	6021      	strge	r1, [r4, #0]
 800ad3a:	b90e      	cbnz	r6, 800ad40 <_printf_i+0x118>
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	d04d      	beq.n	800addc <_printf_i+0x1b4>
 800ad40:	4615      	mov	r5, r2
 800ad42:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad46:	fb03 6711 	mls	r7, r3, r1, r6
 800ad4a:	5dc7      	ldrb	r7, [r0, r7]
 800ad4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad50:	4637      	mov	r7, r6
 800ad52:	42bb      	cmp	r3, r7
 800ad54:	460e      	mov	r6, r1
 800ad56:	d9f4      	bls.n	800ad42 <_printf_i+0x11a>
 800ad58:	2b08      	cmp	r3, #8
 800ad5a:	d10b      	bne.n	800ad74 <_printf_i+0x14c>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	07de      	lsls	r6, r3, #31
 800ad60:	d508      	bpl.n	800ad74 <_printf_i+0x14c>
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	6861      	ldr	r1, [r4, #4]
 800ad66:	4299      	cmp	r1, r3
 800ad68:	bfde      	ittt	le
 800ad6a:	2330      	movle	r3, #48	; 0x30
 800ad6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ad74:	1b52      	subs	r2, r2, r5
 800ad76:	6122      	str	r2, [r4, #16]
 800ad78:	f8cd a000 	str.w	sl, [sp]
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	aa03      	add	r2, sp, #12
 800ad80:	4621      	mov	r1, r4
 800ad82:	4640      	mov	r0, r8
 800ad84:	f7ff fee2 	bl	800ab4c <_printf_common>
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d14c      	bne.n	800ae26 <_printf_i+0x1fe>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad90:	b004      	add	sp, #16
 800ad92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad96:	4835      	ldr	r0, [pc, #212]	; (800ae6c <_printf_i+0x244>)
 800ad98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad9c:	6829      	ldr	r1, [r5, #0]
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ada4:	6029      	str	r1, [r5, #0]
 800ada6:	061d      	lsls	r5, r3, #24
 800ada8:	d514      	bpl.n	800add4 <_printf_i+0x1ac>
 800adaa:	07df      	lsls	r7, r3, #31
 800adac:	bf44      	itt	mi
 800adae:	f043 0320 	orrmi.w	r3, r3, #32
 800adb2:	6023      	strmi	r3, [r4, #0]
 800adb4:	b91e      	cbnz	r6, 800adbe <_printf_i+0x196>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	f023 0320 	bic.w	r3, r3, #32
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	2310      	movs	r3, #16
 800adc0:	e7b0      	b.n	800ad24 <_printf_i+0xfc>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	f043 0320 	orr.w	r3, r3, #32
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	2378      	movs	r3, #120	; 0x78
 800adcc:	4828      	ldr	r0, [pc, #160]	; (800ae70 <_printf_i+0x248>)
 800adce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800add2:	e7e3      	b.n	800ad9c <_printf_i+0x174>
 800add4:	0659      	lsls	r1, r3, #25
 800add6:	bf48      	it	mi
 800add8:	b2b6      	uxthmi	r6, r6
 800adda:	e7e6      	b.n	800adaa <_printf_i+0x182>
 800addc:	4615      	mov	r5, r2
 800adde:	e7bb      	b.n	800ad58 <_printf_i+0x130>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	6826      	ldr	r6, [r4, #0]
 800ade4:	6961      	ldr	r1, [r4, #20]
 800ade6:	1d18      	adds	r0, r3, #4
 800ade8:	6028      	str	r0, [r5, #0]
 800adea:	0635      	lsls	r5, r6, #24
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	d501      	bpl.n	800adf4 <_printf_i+0x1cc>
 800adf0:	6019      	str	r1, [r3, #0]
 800adf2:	e002      	b.n	800adfa <_printf_i+0x1d2>
 800adf4:	0670      	lsls	r0, r6, #25
 800adf6:	d5fb      	bpl.n	800adf0 <_printf_i+0x1c8>
 800adf8:	8019      	strh	r1, [r3, #0]
 800adfa:	2300      	movs	r3, #0
 800adfc:	6123      	str	r3, [r4, #16]
 800adfe:	4615      	mov	r5, r2
 800ae00:	e7ba      	b.n	800ad78 <_printf_i+0x150>
 800ae02:	682b      	ldr	r3, [r5, #0]
 800ae04:	1d1a      	adds	r2, r3, #4
 800ae06:	602a      	str	r2, [r5, #0]
 800ae08:	681d      	ldr	r5, [r3, #0]
 800ae0a:	6862      	ldr	r2, [r4, #4]
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f7f5 f9e6 	bl	80001e0 <memchr>
 800ae14:	b108      	cbz	r0, 800ae1a <_printf_i+0x1f2>
 800ae16:	1b40      	subs	r0, r0, r5
 800ae18:	6060      	str	r0, [r4, #4]
 800ae1a:	6863      	ldr	r3, [r4, #4]
 800ae1c:	6123      	str	r3, [r4, #16]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae24:	e7a8      	b.n	800ad78 <_printf_i+0x150>
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	47d0      	blx	sl
 800ae30:	3001      	adds	r0, #1
 800ae32:	d0ab      	beq.n	800ad8c <_printf_i+0x164>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	079b      	lsls	r3, r3, #30
 800ae38:	d413      	bmi.n	800ae62 <_printf_i+0x23a>
 800ae3a:	68e0      	ldr	r0, [r4, #12]
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	4298      	cmp	r0, r3
 800ae40:	bfb8      	it	lt
 800ae42:	4618      	movlt	r0, r3
 800ae44:	e7a4      	b.n	800ad90 <_printf_i+0x168>
 800ae46:	2301      	movs	r3, #1
 800ae48:	4632      	mov	r2, r6
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	47d0      	blx	sl
 800ae50:	3001      	adds	r0, #1
 800ae52:	d09b      	beq.n	800ad8c <_printf_i+0x164>
 800ae54:	3501      	adds	r5, #1
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	9903      	ldr	r1, [sp, #12]
 800ae5a:	1a5b      	subs	r3, r3, r1
 800ae5c:	42ab      	cmp	r3, r5
 800ae5e:	dcf2      	bgt.n	800ae46 <_printf_i+0x21e>
 800ae60:	e7eb      	b.n	800ae3a <_printf_i+0x212>
 800ae62:	2500      	movs	r5, #0
 800ae64:	f104 0619 	add.w	r6, r4, #25
 800ae68:	e7f5      	b.n	800ae56 <_printf_i+0x22e>
 800ae6a:	bf00      	nop
 800ae6c:	0800dcc2 	.word	0x0800dcc2
 800ae70:	0800dcd3 	.word	0x0800dcd3

0800ae74 <_sbrk_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d06      	ldr	r5, [pc, #24]	; (800ae90 <_sbrk_r+0x1c>)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	602b      	str	r3, [r5, #0]
 800ae80:	f7f8 fd74 	bl	800396c <_sbrk>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	d102      	bne.n	800ae8e <_sbrk_r+0x1a>
 800ae88:	682b      	ldr	r3, [r5, #0]
 800ae8a:	b103      	cbz	r3, 800ae8e <_sbrk_r+0x1a>
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	20000560 	.word	0x20000560

0800ae94 <siprintf>:
 800ae94:	b40e      	push	{r1, r2, r3}
 800ae96:	b500      	push	{lr}
 800ae98:	b09c      	sub	sp, #112	; 0x70
 800ae9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae9c:	9002      	str	r0, [sp, #8]
 800ae9e:	9006      	str	r0, [sp, #24]
 800aea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aea4:	4809      	ldr	r0, [pc, #36]	; (800aecc <siprintf+0x38>)
 800aea6:	9107      	str	r1, [sp, #28]
 800aea8:	9104      	str	r1, [sp, #16]
 800aeaa:	4909      	ldr	r1, [pc, #36]	; (800aed0 <siprintf+0x3c>)
 800aeac:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb0:	9105      	str	r1, [sp, #20]
 800aeb2:	6800      	ldr	r0, [r0, #0]
 800aeb4:	9301      	str	r3, [sp, #4]
 800aeb6:	a902      	add	r1, sp, #8
 800aeb8:	f001 fa9c 	bl	800c3f4 <_svfiprintf_r>
 800aebc:	9b02      	ldr	r3, [sp, #8]
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	b01c      	add	sp, #112	; 0x70
 800aec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aec8:	b003      	add	sp, #12
 800aeca:	4770      	bx	lr
 800aecc:	2000001c 	.word	0x2000001c
 800aed0:	ffff0208 	.word	0xffff0208

0800aed4 <quorem>:
 800aed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed8:	6903      	ldr	r3, [r0, #16]
 800aeda:	690c      	ldr	r4, [r1, #16]
 800aedc:	42a3      	cmp	r3, r4
 800aede:	4607      	mov	r7, r0
 800aee0:	f2c0 8081 	blt.w	800afe6 <quorem+0x112>
 800aee4:	3c01      	subs	r4, #1
 800aee6:	f101 0814 	add.w	r8, r1, #20
 800aeea:	f100 0514 	add.w	r5, r0, #20
 800aeee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aef2:	9301      	str	r3, [sp, #4]
 800aef4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aefc:	3301      	adds	r3, #1
 800aefe:	429a      	cmp	r2, r3
 800af00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af08:	fbb2 f6f3 	udiv	r6, r2, r3
 800af0c:	d331      	bcc.n	800af72 <quorem+0x9e>
 800af0e:	f04f 0e00 	mov.w	lr, #0
 800af12:	4640      	mov	r0, r8
 800af14:	46ac      	mov	ip, r5
 800af16:	46f2      	mov	sl, lr
 800af18:	f850 2b04 	ldr.w	r2, [r0], #4
 800af1c:	b293      	uxth	r3, r2
 800af1e:	fb06 e303 	mla	r3, r6, r3, lr
 800af22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af26:	b29b      	uxth	r3, r3
 800af28:	ebaa 0303 	sub.w	r3, sl, r3
 800af2c:	f8dc a000 	ldr.w	sl, [ip]
 800af30:	0c12      	lsrs	r2, r2, #16
 800af32:	fa13 f38a 	uxtah	r3, r3, sl
 800af36:	fb06 e202 	mla	r2, r6, r2, lr
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	9b00      	ldr	r3, [sp, #0]
 800af3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af42:	b292      	uxth	r2, r2
 800af44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af4c:	f8bd 3000 	ldrh.w	r3, [sp]
 800af50:	4581      	cmp	r9, r0
 800af52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af56:	f84c 3b04 	str.w	r3, [ip], #4
 800af5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af5e:	d2db      	bcs.n	800af18 <quorem+0x44>
 800af60:	f855 300b 	ldr.w	r3, [r5, fp]
 800af64:	b92b      	cbnz	r3, 800af72 <quorem+0x9e>
 800af66:	9b01      	ldr	r3, [sp, #4]
 800af68:	3b04      	subs	r3, #4
 800af6a:	429d      	cmp	r5, r3
 800af6c:	461a      	mov	r2, r3
 800af6e:	d32e      	bcc.n	800afce <quorem+0xfa>
 800af70:	613c      	str	r4, [r7, #16]
 800af72:	4638      	mov	r0, r7
 800af74:	f001 f8ca 	bl	800c10c <__mcmp>
 800af78:	2800      	cmp	r0, #0
 800af7a:	db24      	blt.n	800afc6 <quorem+0xf2>
 800af7c:	3601      	adds	r6, #1
 800af7e:	4628      	mov	r0, r5
 800af80:	f04f 0c00 	mov.w	ip, #0
 800af84:	f858 2b04 	ldr.w	r2, [r8], #4
 800af88:	f8d0 e000 	ldr.w	lr, [r0]
 800af8c:	b293      	uxth	r3, r2
 800af8e:	ebac 0303 	sub.w	r3, ip, r3
 800af92:	0c12      	lsrs	r2, r2, #16
 800af94:	fa13 f38e 	uxtah	r3, r3, lr
 800af98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afa6:	45c1      	cmp	r9, r8
 800afa8:	f840 3b04 	str.w	r3, [r0], #4
 800afac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800afb0:	d2e8      	bcs.n	800af84 <quorem+0xb0>
 800afb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afba:	b922      	cbnz	r2, 800afc6 <quorem+0xf2>
 800afbc:	3b04      	subs	r3, #4
 800afbe:	429d      	cmp	r5, r3
 800afc0:	461a      	mov	r2, r3
 800afc2:	d30a      	bcc.n	800afda <quorem+0x106>
 800afc4:	613c      	str	r4, [r7, #16]
 800afc6:	4630      	mov	r0, r6
 800afc8:	b003      	add	sp, #12
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afce:	6812      	ldr	r2, [r2, #0]
 800afd0:	3b04      	subs	r3, #4
 800afd2:	2a00      	cmp	r2, #0
 800afd4:	d1cc      	bne.n	800af70 <quorem+0x9c>
 800afd6:	3c01      	subs	r4, #1
 800afd8:	e7c7      	b.n	800af6a <quorem+0x96>
 800afda:	6812      	ldr	r2, [r2, #0]
 800afdc:	3b04      	subs	r3, #4
 800afde:	2a00      	cmp	r2, #0
 800afe0:	d1f0      	bne.n	800afc4 <quorem+0xf0>
 800afe2:	3c01      	subs	r4, #1
 800afe4:	e7eb      	b.n	800afbe <quorem+0xea>
 800afe6:	2000      	movs	r0, #0
 800afe8:	e7ee      	b.n	800afc8 <quorem+0xf4>
 800afea:	0000      	movs	r0, r0
 800afec:	0000      	movs	r0, r0
	...

0800aff0 <_dtoa_r>:
 800aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	ed2d 8b04 	vpush	{d8-d9}
 800aff8:	ec57 6b10 	vmov	r6, r7, d0
 800affc:	b093      	sub	sp, #76	; 0x4c
 800affe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b000:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b004:	9106      	str	r1, [sp, #24]
 800b006:	ee10 aa10 	vmov	sl, s0
 800b00a:	4604      	mov	r4, r0
 800b00c:	9209      	str	r2, [sp, #36]	; 0x24
 800b00e:	930c      	str	r3, [sp, #48]	; 0x30
 800b010:	46bb      	mov	fp, r7
 800b012:	b975      	cbnz	r5, 800b032 <_dtoa_r+0x42>
 800b014:	2010      	movs	r0, #16
 800b016:	f7ff f9d3 	bl	800a3c0 <malloc>
 800b01a:	4602      	mov	r2, r0
 800b01c:	6260      	str	r0, [r4, #36]	; 0x24
 800b01e:	b920      	cbnz	r0, 800b02a <_dtoa_r+0x3a>
 800b020:	4ba7      	ldr	r3, [pc, #668]	; (800b2c0 <_dtoa_r+0x2d0>)
 800b022:	21ea      	movs	r1, #234	; 0xea
 800b024:	48a7      	ldr	r0, [pc, #668]	; (800b2c4 <_dtoa_r+0x2d4>)
 800b026:	f001 fae5 	bl	800c5f4 <__assert_func>
 800b02a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b02e:	6005      	str	r5, [r0, #0]
 800b030:	60c5      	str	r5, [r0, #12]
 800b032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b034:	6819      	ldr	r1, [r3, #0]
 800b036:	b151      	cbz	r1, 800b04e <_dtoa_r+0x5e>
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	604a      	str	r2, [r1, #4]
 800b03c:	2301      	movs	r3, #1
 800b03e:	4093      	lsls	r3, r2
 800b040:	608b      	str	r3, [r1, #8]
 800b042:	4620      	mov	r0, r4
 800b044:	f000 fe20 	bl	800bc88 <_Bfree>
 800b048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	1e3b      	subs	r3, r7, #0
 800b050:	bfaa      	itet	ge
 800b052:	2300      	movge	r3, #0
 800b054:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b058:	f8c8 3000 	strge.w	r3, [r8]
 800b05c:	4b9a      	ldr	r3, [pc, #616]	; (800b2c8 <_dtoa_r+0x2d8>)
 800b05e:	bfbc      	itt	lt
 800b060:	2201      	movlt	r2, #1
 800b062:	f8c8 2000 	strlt.w	r2, [r8]
 800b066:	ea33 030b 	bics.w	r3, r3, fp
 800b06a:	d11b      	bne.n	800b0a4 <_dtoa_r+0xb4>
 800b06c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b06e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b078:	4333      	orrs	r3, r6
 800b07a:	f000 8592 	beq.w	800bba2 <_dtoa_r+0xbb2>
 800b07e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b080:	b963      	cbnz	r3, 800b09c <_dtoa_r+0xac>
 800b082:	4b92      	ldr	r3, [pc, #584]	; (800b2cc <_dtoa_r+0x2dc>)
 800b084:	e022      	b.n	800b0cc <_dtoa_r+0xdc>
 800b086:	4b92      	ldr	r3, [pc, #584]	; (800b2d0 <_dtoa_r+0x2e0>)
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	3308      	adds	r3, #8
 800b08c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	9801      	ldr	r0, [sp, #4]
 800b092:	b013      	add	sp, #76	; 0x4c
 800b094:	ecbd 8b04 	vpop	{d8-d9}
 800b098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09c:	4b8b      	ldr	r3, [pc, #556]	; (800b2cc <_dtoa_r+0x2dc>)
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	3303      	adds	r3, #3
 800b0a2:	e7f3      	b.n	800b08c <_dtoa_r+0x9c>
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	4650      	mov	r0, sl
 800b0aa:	4659      	mov	r1, fp
 800b0ac:	f7f5 fd0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0b0:	ec4b ab19 	vmov	d9, sl, fp
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	b158      	cbz	r0, 800b0d0 <_dtoa_r+0xe0>
 800b0b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 856b 	beq.w	800bb9c <_dtoa_r+0xbac>
 800b0c6:	4883      	ldr	r0, [pc, #524]	; (800b2d4 <_dtoa_r+0x2e4>)
 800b0c8:	6018      	str	r0, [r3, #0]
 800b0ca:	1e43      	subs	r3, r0, #1
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	e7df      	b.n	800b090 <_dtoa_r+0xa0>
 800b0d0:	ec4b ab10 	vmov	d0, sl, fp
 800b0d4:	aa10      	add	r2, sp, #64	; 0x40
 800b0d6:	a911      	add	r1, sp, #68	; 0x44
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f001 f8bd 	bl	800c258 <__d2b>
 800b0de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b0e2:	ee08 0a10 	vmov	s16, r0
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	f000 8084 	beq.w	800b1f4 <_dtoa_r+0x204>
 800b0ec:	ee19 3a90 	vmov	r3, s19
 800b0f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b0f8:	4656      	mov	r6, sl
 800b0fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b0fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b102:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b106:	4b74      	ldr	r3, [pc, #464]	; (800b2d8 <_dtoa_r+0x2e8>)
 800b108:	2200      	movs	r2, #0
 800b10a:	4630      	mov	r0, r6
 800b10c:	4639      	mov	r1, r7
 800b10e:	f7f5 f8bb 	bl	8000288 <__aeabi_dsub>
 800b112:	a365      	add	r3, pc, #404	; (adr r3, 800b2a8 <_dtoa_r+0x2b8>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	f7f5 fa6e 	bl	80005f8 <__aeabi_dmul>
 800b11c:	a364      	add	r3, pc, #400	; (adr r3, 800b2b0 <_dtoa_r+0x2c0>)
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	f7f5 f8b3 	bl	800028c <__adddf3>
 800b126:	4606      	mov	r6, r0
 800b128:	4628      	mov	r0, r5
 800b12a:	460f      	mov	r7, r1
 800b12c:	f7f5 f9fa 	bl	8000524 <__aeabi_i2d>
 800b130:	a361      	add	r3, pc, #388	; (adr r3, 800b2b8 <_dtoa_r+0x2c8>)
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	f7f5 fa5f 	bl	80005f8 <__aeabi_dmul>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4630      	mov	r0, r6
 800b140:	4639      	mov	r1, r7
 800b142:	f7f5 f8a3 	bl	800028c <__adddf3>
 800b146:	4606      	mov	r6, r0
 800b148:	460f      	mov	r7, r1
 800b14a:	f7f5 fd05 	bl	8000b58 <__aeabi_d2iz>
 800b14e:	2200      	movs	r2, #0
 800b150:	9000      	str	r0, [sp, #0]
 800b152:	2300      	movs	r3, #0
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800b15c:	b150      	cbz	r0, 800b174 <_dtoa_r+0x184>
 800b15e:	9800      	ldr	r0, [sp, #0]
 800b160:	f7f5 f9e0 	bl	8000524 <__aeabi_i2d>
 800b164:	4632      	mov	r2, r6
 800b166:	463b      	mov	r3, r7
 800b168:	f7f5 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800b16c:	b910      	cbnz	r0, 800b174 <_dtoa_r+0x184>
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	3b01      	subs	r3, #1
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	9b00      	ldr	r3, [sp, #0]
 800b176:	2b16      	cmp	r3, #22
 800b178:	d85a      	bhi.n	800b230 <_dtoa_r+0x240>
 800b17a:	9a00      	ldr	r2, [sp, #0]
 800b17c:	4b57      	ldr	r3, [pc, #348]	; (800b2dc <_dtoa_r+0x2ec>)
 800b17e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	ec51 0b19 	vmov	r0, r1, d9
 800b18a:	f7f5 fca7 	bl	8000adc <__aeabi_dcmplt>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d050      	beq.n	800b234 <_dtoa_r+0x244>
 800b192:	9b00      	ldr	r3, [sp, #0]
 800b194:	3b01      	subs	r3, #1
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	2300      	movs	r3, #0
 800b19a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b19e:	1b5d      	subs	r5, r3, r5
 800b1a0:	1e6b      	subs	r3, r5, #1
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	bf45      	ittet	mi
 800b1a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b1aa:	9304      	strmi	r3, [sp, #16]
 800b1ac:	2300      	movpl	r3, #0
 800b1ae:	2300      	movmi	r3, #0
 800b1b0:	bf4c      	ite	mi
 800b1b2:	9305      	strmi	r3, [sp, #20]
 800b1b4:	9304      	strpl	r3, [sp, #16]
 800b1b6:	9b00      	ldr	r3, [sp, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	db3d      	blt.n	800b238 <_dtoa_r+0x248>
 800b1bc:	9b05      	ldr	r3, [sp, #20]
 800b1be:	9a00      	ldr	r2, [sp, #0]
 800b1c0:	920a      	str	r2, [sp, #40]	; 0x28
 800b1c2:	4413      	add	r3, r2
 800b1c4:	9305      	str	r3, [sp, #20]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9307      	str	r3, [sp, #28]
 800b1ca:	9b06      	ldr	r3, [sp, #24]
 800b1cc:	2b09      	cmp	r3, #9
 800b1ce:	f200 8089 	bhi.w	800b2e4 <_dtoa_r+0x2f4>
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	bfc4      	itt	gt
 800b1d6:	3b04      	subgt	r3, #4
 800b1d8:	9306      	strgt	r3, [sp, #24]
 800b1da:	9b06      	ldr	r3, [sp, #24]
 800b1dc:	f1a3 0302 	sub.w	r3, r3, #2
 800b1e0:	bfcc      	ite	gt
 800b1e2:	2500      	movgt	r5, #0
 800b1e4:	2501      	movle	r5, #1
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	f200 8087 	bhi.w	800b2fa <_dtoa_r+0x30a>
 800b1ec:	e8df f003 	tbb	[pc, r3]
 800b1f0:	59383a2d 	.word	0x59383a2d
 800b1f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1f8:	441d      	add	r5, r3
 800b1fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	bfc1      	itttt	gt
 800b202:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b206:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b20a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b20e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b212:	bfda      	itte	le
 800b214:	f1c3 0320 	rsble	r3, r3, #32
 800b218:	fa06 f003 	lslle.w	r0, r6, r3
 800b21c:	4318      	orrgt	r0, r3
 800b21e:	f7f5 f971 	bl	8000504 <__aeabi_ui2d>
 800b222:	2301      	movs	r3, #1
 800b224:	4606      	mov	r6, r0
 800b226:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b22a:	3d01      	subs	r5, #1
 800b22c:	930e      	str	r3, [sp, #56]	; 0x38
 800b22e:	e76a      	b.n	800b106 <_dtoa_r+0x116>
 800b230:	2301      	movs	r3, #1
 800b232:	e7b2      	b.n	800b19a <_dtoa_r+0x1aa>
 800b234:	900b      	str	r0, [sp, #44]	; 0x2c
 800b236:	e7b1      	b.n	800b19c <_dtoa_r+0x1ac>
 800b238:	9b04      	ldr	r3, [sp, #16]
 800b23a:	9a00      	ldr	r2, [sp, #0]
 800b23c:	1a9b      	subs	r3, r3, r2
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	4253      	negs	r3, r2
 800b242:	9307      	str	r3, [sp, #28]
 800b244:	2300      	movs	r3, #0
 800b246:	930a      	str	r3, [sp, #40]	; 0x28
 800b248:	e7bf      	b.n	800b1ca <_dtoa_r+0x1da>
 800b24a:	2300      	movs	r3, #0
 800b24c:	9308      	str	r3, [sp, #32]
 800b24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b250:	2b00      	cmp	r3, #0
 800b252:	dc55      	bgt.n	800b300 <_dtoa_r+0x310>
 800b254:	2301      	movs	r3, #1
 800b256:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b25a:	461a      	mov	r2, r3
 800b25c:	9209      	str	r2, [sp, #36]	; 0x24
 800b25e:	e00c      	b.n	800b27a <_dtoa_r+0x28a>
 800b260:	2301      	movs	r3, #1
 800b262:	e7f3      	b.n	800b24c <_dtoa_r+0x25c>
 800b264:	2300      	movs	r3, #0
 800b266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b268:	9308      	str	r3, [sp, #32]
 800b26a:	9b00      	ldr	r3, [sp, #0]
 800b26c:	4413      	add	r3, r2
 800b26e:	9302      	str	r3, [sp, #8]
 800b270:	3301      	adds	r3, #1
 800b272:	2b01      	cmp	r3, #1
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	bfb8      	it	lt
 800b278:	2301      	movlt	r3, #1
 800b27a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b27c:	2200      	movs	r2, #0
 800b27e:	6042      	str	r2, [r0, #4]
 800b280:	2204      	movs	r2, #4
 800b282:	f102 0614 	add.w	r6, r2, #20
 800b286:	429e      	cmp	r6, r3
 800b288:	6841      	ldr	r1, [r0, #4]
 800b28a:	d93d      	bls.n	800b308 <_dtoa_r+0x318>
 800b28c:	4620      	mov	r0, r4
 800b28e:	f000 fcbb 	bl	800bc08 <_Balloc>
 800b292:	9001      	str	r0, [sp, #4]
 800b294:	2800      	cmp	r0, #0
 800b296:	d13b      	bne.n	800b310 <_dtoa_r+0x320>
 800b298:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <_dtoa_r+0x2f0>)
 800b29a:	4602      	mov	r2, r0
 800b29c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2a0:	e6c0      	b.n	800b024 <_dtoa_r+0x34>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e7df      	b.n	800b266 <_dtoa_r+0x276>
 800b2a6:	bf00      	nop
 800b2a8:	636f4361 	.word	0x636f4361
 800b2ac:	3fd287a7 	.word	0x3fd287a7
 800b2b0:	8b60c8b3 	.word	0x8b60c8b3
 800b2b4:	3fc68a28 	.word	0x3fc68a28
 800b2b8:	509f79fb 	.word	0x509f79fb
 800b2bc:	3fd34413 	.word	0x3fd34413
 800b2c0:	0800dcf1 	.word	0x0800dcf1
 800b2c4:	0800dd08 	.word	0x0800dd08
 800b2c8:	7ff00000 	.word	0x7ff00000
 800b2cc:	0800dced 	.word	0x0800dced
 800b2d0:	0800dce4 	.word	0x0800dce4
 800b2d4:	0800dcc1 	.word	0x0800dcc1
 800b2d8:	3ff80000 	.word	0x3ff80000
 800b2dc:	0800ddf8 	.word	0x0800ddf8
 800b2e0:	0800dd63 	.word	0x0800dd63
 800b2e4:	2501      	movs	r5, #1
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9306      	str	r3, [sp, #24]
 800b2ea:	9508      	str	r5, [sp, #32]
 800b2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2312      	movs	r3, #18
 800b2f8:	e7b0      	b.n	800b25c <_dtoa_r+0x26c>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	9308      	str	r3, [sp, #32]
 800b2fe:	e7f5      	b.n	800b2ec <_dtoa_r+0x2fc>
 800b300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b302:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b306:	e7b8      	b.n	800b27a <_dtoa_r+0x28a>
 800b308:	3101      	adds	r1, #1
 800b30a:	6041      	str	r1, [r0, #4]
 800b30c:	0052      	lsls	r2, r2, #1
 800b30e:	e7b8      	b.n	800b282 <_dtoa_r+0x292>
 800b310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b312:	9a01      	ldr	r2, [sp, #4]
 800b314:	601a      	str	r2, [r3, #0]
 800b316:	9b03      	ldr	r3, [sp, #12]
 800b318:	2b0e      	cmp	r3, #14
 800b31a:	f200 809d 	bhi.w	800b458 <_dtoa_r+0x468>
 800b31e:	2d00      	cmp	r5, #0
 800b320:	f000 809a 	beq.w	800b458 <_dtoa_r+0x468>
 800b324:	9b00      	ldr	r3, [sp, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	dd32      	ble.n	800b390 <_dtoa_r+0x3a0>
 800b32a:	4ab7      	ldr	r2, [pc, #732]	; (800b608 <_dtoa_r+0x618>)
 800b32c:	f003 030f 	and.w	r3, r3, #15
 800b330:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b334:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b338:	9b00      	ldr	r3, [sp, #0]
 800b33a:	05d8      	lsls	r0, r3, #23
 800b33c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b340:	d516      	bpl.n	800b370 <_dtoa_r+0x380>
 800b342:	4bb2      	ldr	r3, [pc, #712]	; (800b60c <_dtoa_r+0x61c>)
 800b344:	ec51 0b19 	vmov	r0, r1, d9
 800b348:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b34c:	f7f5 fa7e 	bl	800084c <__aeabi_ddiv>
 800b350:	f007 070f 	and.w	r7, r7, #15
 800b354:	4682      	mov	sl, r0
 800b356:	468b      	mov	fp, r1
 800b358:	2503      	movs	r5, #3
 800b35a:	4eac      	ldr	r6, [pc, #688]	; (800b60c <_dtoa_r+0x61c>)
 800b35c:	b957      	cbnz	r7, 800b374 <_dtoa_r+0x384>
 800b35e:	4642      	mov	r2, r8
 800b360:	464b      	mov	r3, r9
 800b362:	4650      	mov	r0, sl
 800b364:	4659      	mov	r1, fp
 800b366:	f7f5 fa71 	bl	800084c <__aeabi_ddiv>
 800b36a:	4682      	mov	sl, r0
 800b36c:	468b      	mov	fp, r1
 800b36e:	e028      	b.n	800b3c2 <_dtoa_r+0x3d2>
 800b370:	2502      	movs	r5, #2
 800b372:	e7f2      	b.n	800b35a <_dtoa_r+0x36a>
 800b374:	07f9      	lsls	r1, r7, #31
 800b376:	d508      	bpl.n	800b38a <_dtoa_r+0x39a>
 800b378:	4640      	mov	r0, r8
 800b37a:	4649      	mov	r1, r9
 800b37c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	3501      	adds	r5, #1
 800b386:	4680      	mov	r8, r0
 800b388:	4689      	mov	r9, r1
 800b38a:	107f      	asrs	r7, r7, #1
 800b38c:	3608      	adds	r6, #8
 800b38e:	e7e5      	b.n	800b35c <_dtoa_r+0x36c>
 800b390:	f000 809b 	beq.w	800b4ca <_dtoa_r+0x4da>
 800b394:	9b00      	ldr	r3, [sp, #0]
 800b396:	4f9d      	ldr	r7, [pc, #628]	; (800b60c <_dtoa_r+0x61c>)
 800b398:	425e      	negs	r6, r3
 800b39a:	4b9b      	ldr	r3, [pc, #620]	; (800b608 <_dtoa_r+0x618>)
 800b39c:	f006 020f 	and.w	r2, r6, #15
 800b3a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	ec51 0b19 	vmov	r0, r1, d9
 800b3ac:	f7f5 f924 	bl	80005f8 <__aeabi_dmul>
 800b3b0:	1136      	asrs	r6, r6, #4
 800b3b2:	4682      	mov	sl, r0
 800b3b4:	468b      	mov	fp, r1
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	2502      	movs	r5, #2
 800b3ba:	2e00      	cmp	r6, #0
 800b3bc:	d17a      	bne.n	800b4b4 <_dtoa_r+0x4c4>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1d3      	bne.n	800b36a <_dtoa_r+0x37a>
 800b3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 8082 	beq.w	800b4ce <_dtoa_r+0x4de>
 800b3ca:	4b91      	ldr	r3, [pc, #580]	; (800b610 <_dtoa_r+0x620>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	4650      	mov	r0, sl
 800b3d0:	4659      	mov	r1, fp
 800b3d2:	f7f5 fb83 	bl	8000adc <__aeabi_dcmplt>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d079      	beq.n	800b4ce <_dtoa_r+0x4de>
 800b3da:	9b03      	ldr	r3, [sp, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d076      	beq.n	800b4ce <_dtoa_r+0x4de>
 800b3e0:	9b02      	ldr	r3, [sp, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	dd36      	ble.n	800b454 <_dtoa_r+0x464>
 800b3e6:	9b00      	ldr	r3, [sp, #0]
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	4659      	mov	r1, fp
 800b3ec:	1e5f      	subs	r7, r3, #1
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	4b88      	ldr	r3, [pc, #544]	; (800b614 <_dtoa_r+0x624>)
 800b3f2:	f7f5 f901 	bl	80005f8 <__aeabi_dmul>
 800b3f6:	9e02      	ldr	r6, [sp, #8]
 800b3f8:	4682      	mov	sl, r0
 800b3fa:	468b      	mov	fp, r1
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	4628      	mov	r0, r5
 800b400:	f7f5 f890 	bl	8000524 <__aeabi_i2d>
 800b404:	4652      	mov	r2, sl
 800b406:	465b      	mov	r3, fp
 800b408:	f7f5 f8f6 	bl	80005f8 <__aeabi_dmul>
 800b40c:	4b82      	ldr	r3, [pc, #520]	; (800b618 <_dtoa_r+0x628>)
 800b40e:	2200      	movs	r2, #0
 800b410:	f7f4 ff3c 	bl	800028c <__adddf3>
 800b414:	46d0      	mov	r8, sl
 800b416:	46d9      	mov	r9, fp
 800b418:	4682      	mov	sl, r0
 800b41a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b41e:	2e00      	cmp	r6, #0
 800b420:	d158      	bne.n	800b4d4 <_dtoa_r+0x4e4>
 800b422:	4b7e      	ldr	r3, [pc, #504]	; (800b61c <_dtoa_r+0x62c>)
 800b424:	2200      	movs	r2, #0
 800b426:	4640      	mov	r0, r8
 800b428:	4649      	mov	r1, r9
 800b42a:	f7f4 ff2d 	bl	8000288 <__aeabi_dsub>
 800b42e:	4652      	mov	r2, sl
 800b430:	465b      	mov	r3, fp
 800b432:	4680      	mov	r8, r0
 800b434:	4689      	mov	r9, r1
 800b436:	f7f5 fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	f040 8295 	bne.w	800b96a <_dtoa_r+0x97a>
 800b440:	4652      	mov	r2, sl
 800b442:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b446:	4640      	mov	r0, r8
 800b448:	4649      	mov	r1, r9
 800b44a:	f7f5 fb47 	bl	8000adc <__aeabi_dcmplt>
 800b44e:	2800      	cmp	r0, #0
 800b450:	f040 8289 	bne.w	800b966 <_dtoa_r+0x976>
 800b454:	ec5b ab19 	vmov	sl, fp, d9
 800b458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f2c0 8148 	blt.w	800b6f0 <_dtoa_r+0x700>
 800b460:	9a00      	ldr	r2, [sp, #0]
 800b462:	2a0e      	cmp	r2, #14
 800b464:	f300 8144 	bgt.w	800b6f0 <_dtoa_r+0x700>
 800b468:	4b67      	ldr	r3, [pc, #412]	; (800b608 <_dtoa_r+0x618>)
 800b46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b46e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b474:	2b00      	cmp	r3, #0
 800b476:	f280 80d5 	bge.w	800b624 <_dtoa_r+0x634>
 800b47a:	9b03      	ldr	r3, [sp, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f300 80d1 	bgt.w	800b624 <_dtoa_r+0x634>
 800b482:	f040 826f 	bne.w	800b964 <_dtoa_r+0x974>
 800b486:	4b65      	ldr	r3, [pc, #404]	; (800b61c <_dtoa_r+0x62c>)
 800b488:	2200      	movs	r2, #0
 800b48a:	4640      	mov	r0, r8
 800b48c:	4649      	mov	r1, r9
 800b48e:	f7f5 f8b3 	bl	80005f8 <__aeabi_dmul>
 800b492:	4652      	mov	r2, sl
 800b494:	465b      	mov	r3, fp
 800b496:	f7f5 fb35 	bl	8000b04 <__aeabi_dcmpge>
 800b49a:	9e03      	ldr	r6, [sp, #12]
 800b49c:	4637      	mov	r7, r6
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f040 8245 	bne.w	800b92e <_dtoa_r+0x93e>
 800b4a4:	9d01      	ldr	r5, [sp, #4]
 800b4a6:	2331      	movs	r3, #49	; 0x31
 800b4a8:	f805 3b01 	strb.w	r3, [r5], #1
 800b4ac:	9b00      	ldr	r3, [sp, #0]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	e240      	b.n	800b936 <_dtoa_r+0x946>
 800b4b4:	07f2      	lsls	r2, r6, #31
 800b4b6:	d505      	bpl.n	800b4c4 <_dtoa_r+0x4d4>
 800b4b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4bc:	f7f5 f89c 	bl	80005f8 <__aeabi_dmul>
 800b4c0:	3501      	adds	r5, #1
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	1076      	asrs	r6, r6, #1
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	e777      	b.n	800b3ba <_dtoa_r+0x3ca>
 800b4ca:	2502      	movs	r5, #2
 800b4cc:	e779      	b.n	800b3c2 <_dtoa_r+0x3d2>
 800b4ce:	9f00      	ldr	r7, [sp, #0]
 800b4d0:	9e03      	ldr	r6, [sp, #12]
 800b4d2:	e794      	b.n	800b3fe <_dtoa_r+0x40e>
 800b4d4:	9901      	ldr	r1, [sp, #4]
 800b4d6:	4b4c      	ldr	r3, [pc, #304]	; (800b608 <_dtoa_r+0x618>)
 800b4d8:	4431      	add	r1, r6
 800b4da:	910d      	str	r1, [sp, #52]	; 0x34
 800b4dc:	9908      	ldr	r1, [sp, #32]
 800b4de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4e6:	2900      	cmp	r1, #0
 800b4e8:	d043      	beq.n	800b572 <_dtoa_r+0x582>
 800b4ea:	494d      	ldr	r1, [pc, #308]	; (800b620 <_dtoa_r+0x630>)
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f7f5 f9ad 	bl	800084c <__aeabi_ddiv>
 800b4f2:	4652      	mov	r2, sl
 800b4f4:	465b      	mov	r3, fp
 800b4f6:	f7f4 fec7 	bl	8000288 <__aeabi_dsub>
 800b4fa:	9d01      	ldr	r5, [sp, #4]
 800b4fc:	4682      	mov	sl, r0
 800b4fe:	468b      	mov	fp, r1
 800b500:	4649      	mov	r1, r9
 800b502:	4640      	mov	r0, r8
 800b504:	f7f5 fb28 	bl	8000b58 <__aeabi_d2iz>
 800b508:	4606      	mov	r6, r0
 800b50a:	f7f5 f80b 	bl	8000524 <__aeabi_i2d>
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	4640      	mov	r0, r8
 800b514:	4649      	mov	r1, r9
 800b516:	f7f4 feb7 	bl	8000288 <__aeabi_dsub>
 800b51a:	3630      	adds	r6, #48	; 0x30
 800b51c:	f805 6b01 	strb.w	r6, [r5], #1
 800b520:	4652      	mov	r2, sl
 800b522:	465b      	mov	r3, fp
 800b524:	4680      	mov	r8, r0
 800b526:	4689      	mov	r9, r1
 800b528:	f7f5 fad8 	bl	8000adc <__aeabi_dcmplt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d163      	bne.n	800b5f8 <_dtoa_r+0x608>
 800b530:	4642      	mov	r2, r8
 800b532:	464b      	mov	r3, r9
 800b534:	4936      	ldr	r1, [pc, #216]	; (800b610 <_dtoa_r+0x620>)
 800b536:	2000      	movs	r0, #0
 800b538:	f7f4 fea6 	bl	8000288 <__aeabi_dsub>
 800b53c:	4652      	mov	r2, sl
 800b53e:	465b      	mov	r3, fp
 800b540:	f7f5 facc 	bl	8000adc <__aeabi_dcmplt>
 800b544:	2800      	cmp	r0, #0
 800b546:	f040 80b5 	bne.w	800b6b4 <_dtoa_r+0x6c4>
 800b54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b54c:	429d      	cmp	r5, r3
 800b54e:	d081      	beq.n	800b454 <_dtoa_r+0x464>
 800b550:	4b30      	ldr	r3, [pc, #192]	; (800b614 <_dtoa_r+0x624>)
 800b552:	2200      	movs	r2, #0
 800b554:	4650      	mov	r0, sl
 800b556:	4659      	mov	r1, fp
 800b558:	f7f5 f84e 	bl	80005f8 <__aeabi_dmul>
 800b55c:	4b2d      	ldr	r3, [pc, #180]	; (800b614 <_dtoa_r+0x624>)
 800b55e:	4682      	mov	sl, r0
 800b560:	468b      	mov	fp, r1
 800b562:	4640      	mov	r0, r8
 800b564:	4649      	mov	r1, r9
 800b566:	2200      	movs	r2, #0
 800b568:	f7f5 f846 	bl	80005f8 <__aeabi_dmul>
 800b56c:	4680      	mov	r8, r0
 800b56e:	4689      	mov	r9, r1
 800b570:	e7c6      	b.n	800b500 <_dtoa_r+0x510>
 800b572:	4650      	mov	r0, sl
 800b574:	4659      	mov	r1, fp
 800b576:	f7f5 f83f 	bl	80005f8 <__aeabi_dmul>
 800b57a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b57c:	9d01      	ldr	r5, [sp, #4]
 800b57e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b580:	4682      	mov	sl, r0
 800b582:	468b      	mov	fp, r1
 800b584:	4649      	mov	r1, r9
 800b586:	4640      	mov	r0, r8
 800b588:	f7f5 fae6 	bl	8000b58 <__aeabi_d2iz>
 800b58c:	4606      	mov	r6, r0
 800b58e:	f7f4 ffc9 	bl	8000524 <__aeabi_i2d>
 800b592:	3630      	adds	r6, #48	; 0x30
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4640      	mov	r0, r8
 800b59a:	4649      	mov	r1, r9
 800b59c:	f7f4 fe74 	bl	8000288 <__aeabi_dsub>
 800b5a0:	f805 6b01 	strb.w	r6, [r5], #1
 800b5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5a6:	429d      	cmp	r5, r3
 800b5a8:	4680      	mov	r8, r0
 800b5aa:	4689      	mov	r9, r1
 800b5ac:	f04f 0200 	mov.w	r2, #0
 800b5b0:	d124      	bne.n	800b5fc <_dtoa_r+0x60c>
 800b5b2:	4b1b      	ldr	r3, [pc, #108]	; (800b620 <_dtoa_r+0x630>)
 800b5b4:	4650      	mov	r0, sl
 800b5b6:	4659      	mov	r1, fp
 800b5b8:	f7f4 fe68 	bl	800028c <__adddf3>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	f7f5 faa8 	bl	8000b18 <__aeabi_dcmpgt>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d173      	bne.n	800b6b4 <_dtoa_r+0x6c4>
 800b5cc:	4652      	mov	r2, sl
 800b5ce:	465b      	mov	r3, fp
 800b5d0:	4913      	ldr	r1, [pc, #76]	; (800b620 <_dtoa_r+0x630>)
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	f7f4 fe58 	bl	8000288 <__aeabi_dsub>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4640      	mov	r0, r8
 800b5de:	4649      	mov	r1, r9
 800b5e0:	f7f5 fa7c 	bl	8000adc <__aeabi_dcmplt>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	f43f af35 	beq.w	800b454 <_dtoa_r+0x464>
 800b5ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5ec:	1e6b      	subs	r3, r5, #1
 800b5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5f4:	2b30      	cmp	r3, #48	; 0x30
 800b5f6:	d0f8      	beq.n	800b5ea <_dtoa_r+0x5fa>
 800b5f8:	9700      	str	r7, [sp, #0]
 800b5fa:	e049      	b.n	800b690 <_dtoa_r+0x6a0>
 800b5fc:	4b05      	ldr	r3, [pc, #20]	; (800b614 <_dtoa_r+0x624>)
 800b5fe:	f7f4 fffb 	bl	80005f8 <__aeabi_dmul>
 800b602:	4680      	mov	r8, r0
 800b604:	4689      	mov	r9, r1
 800b606:	e7bd      	b.n	800b584 <_dtoa_r+0x594>
 800b608:	0800ddf8 	.word	0x0800ddf8
 800b60c:	0800ddd0 	.word	0x0800ddd0
 800b610:	3ff00000 	.word	0x3ff00000
 800b614:	40240000 	.word	0x40240000
 800b618:	401c0000 	.word	0x401c0000
 800b61c:	40140000 	.word	0x40140000
 800b620:	3fe00000 	.word	0x3fe00000
 800b624:	9d01      	ldr	r5, [sp, #4]
 800b626:	4656      	mov	r6, sl
 800b628:	465f      	mov	r7, fp
 800b62a:	4642      	mov	r2, r8
 800b62c:	464b      	mov	r3, r9
 800b62e:	4630      	mov	r0, r6
 800b630:	4639      	mov	r1, r7
 800b632:	f7f5 f90b 	bl	800084c <__aeabi_ddiv>
 800b636:	f7f5 fa8f 	bl	8000b58 <__aeabi_d2iz>
 800b63a:	4682      	mov	sl, r0
 800b63c:	f7f4 ff72 	bl	8000524 <__aeabi_i2d>
 800b640:	4642      	mov	r2, r8
 800b642:	464b      	mov	r3, r9
 800b644:	f7f4 ffd8 	bl	80005f8 <__aeabi_dmul>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4630      	mov	r0, r6
 800b64e:	4639      	mov	r1, r7
 800b650:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b654:	f7f4 fe18 	bl	8000288 <__aeabi_dsub>
 800b658:	f805 6b01 	strb.w	r6, [r5], #1
 800b65c:	9e01      	ldr	r6, [sp, #4]
 800b65e:	9f03      	ldr	r7, [sp, #12]
 800b660:	1bae      	subs	r6, r5, r6
 800b662:	42b7      	cmp	r7, r6
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	d135      	bne.n	800b6d6 <_dtoa_r+0x6e6>
 800b66a:	f7f4 fe0f 	bl	800028c <__adddf3>
 800b66e:	4642      	mov	r2, r8
 800b670:	464b      	mov	r3, r9
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	f7f5 fa4f 	bl	8000b18 <__aeabi_dcmpgt>
 800b67a:	b9d0      	cbnz	r0, 800b6b2 <_dtoa_r+0x6c2>
 800b67c:	4642      	mov	r2, r8
 800b67e:	464b      	mov	r3, r9
 800b680:	4630      	mov	r0, r6
 800b682:	4639      	mov	r1, r7
 800b684:	f7f5 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 800b688:	b110      	cbz	r0, 800b690 <_dtoa_r+0x6a0>
 800b68a:	f01a 0f01 	tst.w	sl, #1
 800b68e:	d110      	bne.n	800b6b2 <_dtoa_r+0x6c2>
 800b690:	4620      	mov	r0, r4
 800b692:	ee18 1a10 	vmov	r1, s16
 800b696:	f000 faf7 	bl	800bc88 <_Bfree>
 800b69a:	2300      	movs	r3, #0
 800b69c:	9800      	ldr	r0, [sp, #0]
 800b69e:	702b      	strb	r3, [r5, #0]
 800b6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	6018      	str	r0, [r3, #0]
 800b6a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f43f acf1 	beq.w	800b090 <_dtoa_r+0xa0>
 800b6ae:	601d      	str	r5, [r3, #0]
 800b6b0:	e4ee      	b.n	800b090 <_dtoa_r+0xa0>
 800b6b2:	9f00      	ldr	r7, [sp, #0]
 800b6b4:	462b      	mov	r3, r5
 800b6b6:	461d      	mov	r5, r3
 800b6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6bc:	2a39      	cmp	r2, #57	; 0x39
 800b6be:	d106      	bne.n	800b6ce <_dtoa_r+0x6de>
 800b6c0:	9a01      	ldr	r2, [sp, #4]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d1f7      	bne.n	800b6b6 <_dtoa_r+0x6c6>
 800b6c6:	9901      	ldr	r1, [sp, #4]
 800b6c8:	2230      	movs	r2, #48	; 0x30
 800b6ca:	3701      	adds	r7, #1
 800b6cc:	700a      	strb	r2, [r1, #0]
 800b6ce:	781a      	ldrb	r2, [r3, #0]
 800b6d0:	3201      	adds	r2, #1
 800b6d2:	701a      	strb	r2, [r3, #0]
 800b6d4:	e790      	b.n	800b5f8 <_dtoa_r+0x608>
 800b6d6:	4ba6      	ldr	r3, [pc, #664]	; (800b970 <_dtoa_r+0x980>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f7f4 ff8d 	bl	80005f8 <__aeabi_dmul>
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	f7f5 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d09d      	beq.n	800b62a <_dtoa_r+0x63a>
 800b6ee:	e7cf      	b.n	800b690 <_dtoa_r+0x6a0>
 800b6f0:	9a08      	ldr	r2, [sp, #32]
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	f000 80d7 	beq.w	800b8a6 <_dtoa_r+0x8b6>
 800b6f8:	9a06      	ldr	r2, [sp, #24]
 800b6fa:	2a01      	cmp	r2, #1
 800b6fc:	f300 80ba 	bgt.w	800b874 <_dtoa_r+0x884>
 800b700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b702:	2a00      	cmp	r2, #0
 800b704:	f000 80b2 	beq.w	800b86c <_dtoa_r+0x87c>
 800b708:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b70c:	9e07      	ldr	r6, [sp, #28]
 800b70e:	9d04      	ldr	r5, [sp, #16]
 800b710:	9a04      	ldr	r2, [sp, #16]
 800b712:	441a      	add	r2, r3
 800b714:	9204      	str	r2, [sp, #16]
 800b716:	9a05      	ldr	r2, [sp, #20]
 800b718:	2101      	movs	r1, #1
 800b71a:	441a      	add	r2, r3
 800b71c:	4620      	mov	r0, r4
 800b71e:	9205      	str	r2, [sp, #20]
 800b720:	f000 fb6a 	bl	800bdf8 <__i2b>
 800b724:	4607      	mov	r7, r0
 800b726:	2d00      	cmp	r5, #0
 800b728:	dd0c      	ble.n	800b744 <_dtoa_r+0x754>
 800b72a:	9b05      	ldr	r3, [sp, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	dd09      	ble.n	800b744 <_dtoa_r+0x754>
 800b730:	42ab      	cmp	r3, r5
 800b732:	9a04      	ldr	r2, [sp, #16]
 800b734:	bfa8      	it	ge
 800b736:	462b      	movge	r3, r5
 800b738:	1ad2      	subs	r2, r2, r3
 800b73a:	9204      	str	r2, [sp, #16]
 800b73c:	9a05      	ldr	r2, [sp, #20]
 800b73e:	1aed      	subs	r5, r5, r3
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	9305      	str	r3, [sp, #20]
 800b744:	9b07      	ldr	r3, [sp, #28]
 800b746:	b31b      	cbz	r3, 800b790 <_dtoa_r+0x7a0>
 800b748:	9b08      	ldr	r3, [sp, #32]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f000 80af 	beq.w	800b8ae <_dtoa_r+0x8be>
 800b750:	2e00      	cmp	r6, #0
 800b752:	dd13      	ble.n	800b77c <_dtoa_r+0x78c>
 800b754:	4639      	mov	r1, r7
 800b756:	4632      	mov	r2, r6
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 fc0d 	bl	800bf78 <__pow5mult>
 800b75e:	ee18 2a10 	vmov	r2, s16
 800b762:	4601      	mov	r1, r0
 800b764:	4607      	mov	r7, r0
 800b766:	4620      	mov	r0, r4
 800b768:	f000 fb5c 	bl	800be24 <__multiply>
 800b76c:	ee18 1a10 	vmov	r1, s16
 800b770:	4680      	mov	r8, r0
 800b772:	4620      	mov	r0, r4
 800b774:	f000 fa88 	bl	800bc88 <_Bfree>
 800b778:	ee08 8a10 	vmov	s16, r8
 800b77c:	9b07      	ldr	r3, [sp, #28]
 800b77e:	1b9a      	subs	r2, r3, r6
 800b780:	d006      	beq.n	800b790 <_dtoa_r+0x7a0>
 800b782:	ee18 1a10 	vmov	r1, s16
 800b786:	4620      	mov	r0, r4
 800b788:	f000 fbf6 	bl	800bf78 <__pow5mult>
 800b78c:	ee08 0a10 	vmov	s16, r0
 800b790:	2101      	movs	r1, #1
 800b792:	4620      	mov	r0, r4
 800b794:	f000 fb30 	bl	800bdf8 <__i2b>
 800b798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	4606      	mov	r6, r0
 800b79e:	f340 8088 	ble.w	800b8b2 <_dtoa_r+0x8c2>
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4601      	mov	r1, r0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 fbe6 	bl	800bf78 <__pow5mult>
 800b7ac:	9b06      	ldr	r3, [sp, #24]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	f340 8081 	ble.w	800b8b8 <_dtoa_r+0x8c8>
 800b7b6:	f04f 0800 	mov.w	r8, #0
 800b7ba:	6933      	ldr	r3, [r6, #16]
 800b7bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7c0:	6918      	ldr	r0, [r3, #16]
 800b7c2:	f000 fac9 	bl	800bd58 <__hi0bits>
 800b7c6:	f1c0 0020 	rsb	r0, r0, #32
 800b7ca:	9b05      	ldr	r3, [sp, #20]
 800b7cc:	4418      	add	r0, r3
 800b7ce:	f010 001f 	ands.w	r0, r0, #31
 800b7d2:	f000 8092 	beq.w	800b8fa <_dtoa_r+0x90a>
 800b7d6:	f1c0 0320 	rsb	r3, r0, #32
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	f340 808a 	ble.w	800b8f4 <_dtoa_r+0x904>
 800b7e0:	f1c0 001c 	rsb	r0, r0, #28
 800b7e4:	9b04      	ldr	r3, [sp, #16]
 800b7e6:	4403      	add	r3, r0
 800b7e8:	9304      	str	r3, [sp, #16]
 800b7ea:	9b05      	ldr	r3, [sp, #20]
 800b7ec:	4403      	add	r3, r0
 800b7ee:	4405      	add	r5, r0
 800b7f0:	9305      	str	r3, [sp, #20]
 800b7f2:	9b04      	ldr	r3, [sp, #16]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dd07      	ble.n	800b808 <_dtoa_r+0x818>
 800b7f8:	ee18 1a10 	vmov	r1, s16
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 fc14 	bl	800c02c <__lshift>
 800b804:	ee08 0a10 	vmov	s16, r0
 800b808:	9b05      	ldr	r3, [sp, #20]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	dd05      	ble.n	800b81a <_dtoa_r+0x82a>
 800b80e:	4631      	mov	r1, r6
 800b810:	461a      	mov	r2, r3
 800b812:	4620      	mov	r0, r4
 800b814:	f000 fc0a 	bl	800c02c <__lshift>
 800b818:	4606      	mov	r6, r0
 800b81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d06e      	beq.n	800b8fe <_dtoa_r+0x90e>
 800b820:	ee18 0a10 	vmov	r0, s16
 800b824:	4631      	mov	r1, r6
 800b826:	f000 fc71 	bl	800c10c <__mcmp>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	da67      	bge.n	800b8fe <_dtoa_r+0x90e>
 800b82e:	9b00      	ldr	r3, [sp, #0]
 800b830:	3b01      	subs	r3, #1
 800b832:	ee18 1a10 	vmov	r1, s16
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	220a      	movs	r2, #10
 800b83a:	2300      	movs	r3, #0
 800b83c:	4620      	mov	r0, r4
 800b83e:	f000 fa45 	bl	800bccc <__multadd>
 800b842:	9b08      	ldr	r3, [sp, #32]
 800b844:	ee08 0a10 	vmov	s16, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f000 81b1 	beq.w	800bbb0 <_dtoa_r+0xbc0>
 800b84e:	2300      	movs	r3, #0
 800b850:	4639      	mov	r1, r7
 800b852:	220a      	movs	r2, #10
 800b854:	4620      	mov	r0, r4
 800b856:	f000 fa39 	bl	800bccc <__multadd>
 800b85a:	9b02      	ldr	r3, [sp, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	4607      	mov	r7, r0
 800b860:	f300 808e 	bgt.w	800b980 <_dtoa_r+0x990>
 800b864:	9b06      	ldr	r3, [sp, #24]
 800b866:	2b02      	cmp	r3, #2
 800b868:	dc51      	bgt.n	800b90e <_dtoa_r+0x91e>
 800b86a:	e089      	b.n	800b980 <_dtoa_r+0x990>
 800b86c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b86e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b872:	e74b      	b.n	800b70c <_dtoa_r+0x71c>
 800b874:	9b03      	ldr	r3, [sp, #12]
 800b876:	1e5e      	subs	r6, r3, #1
 800b878:	9b07      	ldr	r3, [sp, #28]
 800b87a:	42b3      	cmp	r3, r6
 800b87c:	bfbf      	itttt	lt
 800b87e:	9b07      	ldrlt	r3, [sp, #28]
 800b880:	9607      	strlt	r6, [sp, #28]
 800b882:	1af2      	sublt	r2, r6, r3
 800b884:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b886:	bfb6      	itet	lt
 800b888:	189b      	addlt	r3, r3, r2
 800b88a:	1b9e      	subge	r6, r3, r6
 800b88c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b88e:	9b03      	ldr	r3, [sp, #12]
 800b890:	bfb8      	it	lt
 800b892:	2600      	movlt	r6, #0
 800b894:	2b00      	cmp	r3, #0
 800b896:	bfb7      	itett	lt
 800b898:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b89c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b8a0:	1a9d      	sublt	r5, r3, r2
 800b8a2:	2300      	movlt	r3, #0
 800b8a4:	e734      	b.n	800b710 <_dtoa_r+0x720>
 800b8a6:	9e07      	ldr	r6, [sp, #28]
 800b8a8:	9d04      	ldr	r5, [sp, #16]
 800b8aa:	9f08      	ldr	r7, [sp, #32]
 800b8ac:	e73b      	b.n	800b726 <_dtoa_r+0x736>
 800b8ae:	9a07      	ldr	r2, [sp, #28]
 800b8b0:	e767      	b.n	800b782 <_dtoa_r+0x792>
 800b8b2:	9b06      	ldr	r3, [sp, #24]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	dc18      	bgt.n	800b8ea <_dtoa_r+0x8fa>
 800b8b8:	f1ba 0f00 	cmp.w	sl, #0
 800b8bc:	d115      	bne.n	800b8ea <_dtoa_r+0x8fa>
 800b8be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8c2:	b993      	cbnz	r3, 800b8ea <_dtoa_r+0x8fa>
 800b8c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8c8:	0d1b      	lsrs	r3, r3, #20
 800b8ca:	051b      	lsls	r3, r3, #20
 800b8cc:	b183      	cbz	r3, 800b8f0 <_dtoa_r+0x900>
 800b8ce:	9b04      	ldr	r3, [sp, #16]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	9b05      	ldr	r3, [sp, #20]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	9305      	str	r3, [sp, #20]
 800b8da:	f04f 0801 	mov.w	r8, #1
 800b8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f47f af6a 	bne.w	800b7ba <_dtoa_r+0x7ca>
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	e76f      	b.n	800b7ca <_dtoa_r+0x7da>
 800b8ea:	f04f 0800 	mov.w	r8, #0
 800b8ee:	e7f6      	b.n	800b8de <_dtoa_r+0x8ee>
 800b8f0:	4698      	mov	r8, r3
 800b8f2:	e7f4      	b.n	800b8de <_dtoa_r+0x8ee>
 800b8f4:	f43f af7d 	beq.w	800b7f2 <_dtoa_r+0x802>
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	301c      	adds	r0, #28
 800b8fc:	e772      	b.n	800b7e4 <_dtoa_r+0x7f4>
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	dc37      	bgt.n	800b974 <_dtoa_r+0x984>
 800b904:	9b06      	ldr	r3, [sp, #24]
 800b906:	2b02      	cmp	r3, #2
 800b908:	dd34      	ble.n	800b974 <_dtoa_r+0x984>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	9302      	str	r3, [sp, #8]
 800b90e:	9b02      	ldr	r3, [sp, #8]
 800b910:	b96b      	cbnz	r3, 800b92e <_dtoa_r+0x93e>
 800b912:	4631      	mov	r1, r6
 800b914:	2205      	movs	r2, #5
 800b916:	4620      	mov	r0, r4
 800b918:	f000 f9d8 	bl	800bccc <__multadd>
 800b91c:	4601      	mov	r1, r0
 800b91e:	4606      	mov	r6, r0
 800b920:	ee18 0a10 	vmov	r0, s16
 800b924:	f000 fbf2 	bl	800c10c <__mcmp>
 800b928:	2800      	cmp	r0, #0
 800b92a:	f73f adbb 	bgt.w	800b4a4 <_dtoa_r+0x4b4>
 800b92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b930:	9d01      	ldr	r5, [sp, #4]
 800b932:	43db      	mvns	r3, r3
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	f04f 0800 	mov.w	r8, #0
 800b93a:	4631      	mov	r1, r6
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 f9a3 	bl	800bc88 <_Bfree>
 800b942:	2f00      	cmp	r7, #0
 800b944:	f43f aea4 	beq.w	800b690 <_dtoa_r+0x6a0>
 800b948:	f1b8 0f00 	cmp.w	r8, #0
 800b94c:	d005      	beq.n	800b95a <_dtoa_r+0x96a>
 800b94e:	45b8      	cmp	r8, r7
 800b950:	d003      	beq.n	800b95a <_dtoa_r+0x96a>
 800b952:	4641      	mov	r1, r8
 800b954:	4620      	mov	r0, r4
 800b956:	f000 f997 	bl	800bc88 <_Bfree>
 800b95a:	4639      	mov	r1, r7
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 f993 	bl	800bc88 <_Bfree>
 800b962:	e695      	b.n	800b690 <_dtoa_r+0x6a0>
 800b964:	2600      	movs	r6, #0
 800b966:	4637      	mov	r7, r6
 800b968:	e7e1      	b.n	800b92e <_dtoa_r+0x93e>
 800b96a:	9700      	str	r7, [sp, #0]
 800b96c:	4637      	mov	r7, r6
 800b96e:	e599      	b.n	800b4a4 <_dtoa_r+0x4b4>
 800b970:	40240000 	.word	0x40240000
 800b974:	9b08      	ldr	r3, [sp, #32]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 80ca 	beq.w	800bb10 <_dtoa_r+0xb20>
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	2d00      	cmp	r5, #0
 800b982:	dd05      	ble.n	800b990 <_dtoa_r+0x9a0>
 800b984:	4639      	mov	r1, r7
 800b986:	462a      	mov	r2, r5
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 fb4f 	bl	800c02c <__lshift>
 800b98e:	4607      	mov	r7, r0
 800b990:	f1b8 0f00 	cmp.w	r8, #0
 800b994:	d05b      	beq.n	800ba4e <_dtoa_r+0xa5e>
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 f935 	bl	800bc08 <_Balloc>
 800b99e:	4605      	mov	r5, r0
 800b9a0:	b928      	cbnz	r0, 800b9ae <_dtoa_r+0x9be>
 800b9a2:	4b87      	ldr	r3, [pc, #540]	; (800bbc0 <_dtoa_r+0xbd0>)
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b9aa:	f7ff bb3b 	b.w	800b024 <_dtoa_r+0x34>
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	3202      	adds	r2, #2
 800b9b2:	0092      	lsls	r2, r2, #2
 800b9b4:	f107 010c 	add.w	r1, r7, #12
 800b9b8:	300c      	adds	r0, #12
 800b9ba:	f000 f90b 	bl	800bbd4 <memcpy>
 800b9be:	2201      	movs	r2, #1
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f000 fb32 	bl	800c02c <__lshift>
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	f103 0901 	add.w	r9, r3, #1
 800b9ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	9305      	str	r3, [sp, #20]
 800b9d6:	f00a 0301 	and.w	r3, sl, #1
 800b9da:	46b8      	mov	r8, r7
 800b9dc:	9304      	str	r3, [sp, #16]
 800b9de:	4607      	mov	r7, r0
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	ee18 0a10 	vmov	r0, s16
 800b9e6:	f7ff fa75 	bl	800aed4 <quorem>
 800b9ea:	4641      	mov	r1, r8
 800b9ec:	9002      	str	r0, [sp, #8]
 800b9ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9f2:	ee18 0a10 	vmov	r0, s16
 800b9f6:	f000 fb89 	bl	800c10c <__mcmp>
 800b9fa:	463a      	mov	r2, r7
 800b9fc:	9003      	str	r0, [sp, #12]
 800b9fe:	4631      	mov	r1, r6
 800ba00:	4620      	mov	r0, r4
 800ba02:	f000 fb9f 	bl	800c144 <__mdiff>
 800ba06:	68c2      	ldr	r2, [r0, #12]
 800ba08:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	bb02      	cbnz	r2, 800ba52 <_dtoa_r+0xa62>
 800ba10:	4601      	mov	r1, r0
 800ba12:	ee18 0a10 	vmov	r0, s16
 800ba16:	f000 fb79 	bl	800c10c <__mcmp>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4620      	mov	r0, r4
 800ba20:	9207      	str	r2, [sp, #28]
 800ba22:	f000 f931 	bl	800bc88 <_Bfree>
 800ba26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba2a:	ea43 0102 	orr.w	r1, r3, r2
 800ba2e:	9b04      	ldr	r3, [sp, #16]
 800ba30:	430b      	orrs	r3, r1
 800ba32:	464d      	mov	r5, r9
 800ba34:	d10f      	bne.n	800ba56 <_dtoa_r+0xa66>
 800ba36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba3a:	d02a      	beq.n	800ba92 <_dtoa_r+0xaa2>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	dd02      	ble.n	800ba48 <_dtoa_r+0xa58>
 800ba42:	9b02      	ldr	r3, [sp, #8]
 800ba44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba48:	f88b a000 	strb.w	sl, [fp]
 800ba4c:	e775      	b.n	800b93a <_dtoa_r+0x94a>
 800ba4e:	4638      	mov	r0, r7
 800ba50:	e7ba      	b.n	800b9c8 <_dtoa_r+0x9d8>
 800ba52:	2201      	movs	r2, #1
 800ba54:	e7e2      	b.n	800ba1c <_dtoa_r+0xa2c>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	db04      	blt.n	800ba66 <_dtoa_r+0xa76>
 800ba5c:	9906      	ldr	r1, [sp, #24]
 800ba5e:	430b      	orrs	r3, r1
 800ba60:	9904      	ldr	r1, [sp, #16]
 800ba62:	430b      	orrs	r3, r1
 800ba64:	d122      	bne.n	800baac <_dtoa_r+0xabc>
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	ddee      	ble.n	800ba48 <_dtoa_r+0xa58>
 800ba6a:	ee18 1a10 	vmov	r1, s16
 800ba6e:	2201      	movs	r2, #1
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fadb 	bl	800c02c <__lshift>
 800ba76:	4631      	mov	r1, r6
 800ba78:	ee08 0a10 	vmov	s16, r0
 800ba7c:	f000 fb46 	bl	800c10c <__mcmp>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	dc03      	bgt.n	800ba8c <_dtoa_r+0xa9c>
 800ba84:	d1e0      	bne.n	800ba48 <_dtoa_r+0xa58>
 800ba86:	f01a 0f01 	tst.w	sl, #1
 800ba8a:	d0dd      	beq.n	800ba48 <_dtoa_r+0xa58>
 800ba8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba90:	d1d7      	bne.n	800ba42 <_dtoa_r+0xa52>
 800ba92:	2339      	movs	r3, #57	; 0x39
 800ba94:	f88b 3000 	strb.w	r3, [fp]
 800ba98:	462b      	mov	r3, r5
 800ba9a:	461d      	mov	r5, r3
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800baa2:	2a39      	cmp	r2, #57	; 0x39
 800baa4:	d071      	beq.n	800bb8a <_dtoa_r+0xb9a>
 800baa6:	3201      	adds	r2, #1
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	e746      	b.n	800b93a <_dtoa_r+0x94a>
 800baac:	2a00      	cmp	r2, #0
 800baae:	dd07      	ble.n	800bac0 <_dtoa_r+0xad0>
 800bab0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bab4:	d0ed      	beq.n	800ba92 <_dtoa_r+0xaa2>
 800bab6:	f10a 0301 	add.w	r3, sl, #1
 800baba:	f88b 3000 	strb.w	r3, [fp]
 800babe:	e73c      	b.n	800b93a <_dtoa_r+0x94a>
 800bac0:	9b05      	ldr	r3, [sp, #20]
 800bac2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bac6:	4599      	cmp	r9, r3
 800bac8:	d047      	beq.n	800bb5a <_dtoa_r+0xb6a>
 800baca:	ee18 1a10 	vmov	r1, s16
 800bace:	2300      	movs	r3, #0
 800bad0:	220a      	movs	r2, #10
 800bad2:	4620      	mov	r0, r4
 800bad4:	f000 f8fa 	bl	800bccc <__multadd>
 800bad8:	45b8      	cmp	r8, r7
 800bada:	ee08 0a10 	vmov	s16, r0
 800bade:	f04f 0300 	mov.w	r3, #0
 800bae2:	f04f 020a 	mov.w	r2, #10
 800bae6:	4641      	mov	r1, r8
 800bae8:	4620      	mov	r0, r4
 800baea:	d106      	bne.n	800bafa <_dtoa_r+0xb0a>
 800baec:	f000 f8ee 	bl	800bccc <__multadd>
 800baf0:	4680      	mov	r8, r0
 800baf2:	4607      	mov	r7, r0
 800baf4:	f109 0901 	add.w	r9, r9, #1
 800baf8:	e772      	b.n	800b9e0 <_dtoa_r+0x9f0>
 800bafa:	f000 f8e7 	bl	800bccc <__multadd>
 800bafe:	4639      	mov	r1, r7
 800bb00:	4680      	mov	r8, r0
 800bb02:	2300      	movs	r3, #0
 800bb04:	220a      	movs	r2, #10
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 f8e0 	bl	800bccc <__multadd>
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	e7f1      	b.n	800baf4 <_dtoa_r+0xb04>
 800bb10:	9b03      	ldr	r3, [sp, #12]
 800bb12:	9302      	str	r3, [sp, #8]
 800bb14:	9d01      	ldr	r5, [sp, #4]
 800bb16:	ee18 0a10 	vmov	r0, s16
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	f7ff f9da 	bl	800aed4 <quorem>
 800bb20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb24:	9b01      	ldr	r3, [sp, #4]
 800bb26:	f805 ab01 	strb.w	sl, [r5], #1
 800bb2a:	1aea      	subs	r2, r5, r3
 800bb2c:	9b02      	ldr	r3, [sp, #8]
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	dd09      	ble.n	800bb46 <_dtoa_r+0xb56>
 800bb32:	ee18 1a10 	vmov	r1, s16
 800bb36:	2300      	movs	r3, #0
 800bb38:	220a      	movs	r2, #10
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 f8c6 	bl	800bccc <__multadd>
 800bb40:	ee08 0a10 	vmov	s16, r0
 800bb44:	e7e7      	b.n	800bb16 <_dtoa_r+0xb26>
 800bb46:	9b02      	ldr	r3, [sp, #8]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bfc8      	it	gt
 800bb4c:	461d      	movgt	r5, r3
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	bfd8      	it	le
 800bb52:	2501      	movle	r5, #1
 800bb54:	441d      	add	r5, r3
 800bb56:	f04f 0800 	mov.w	r8, #0
 800bb5a:	ee18 1a10 	vmov	r1, s16
 800bb5e:	2201      	movs	r2, #1
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 fa63 	bl	800c02c <__lshift>
 800bb66:	4631      	mov	r1, r6
 800bb68:	ee08 0a10 	vmov	s16, r0
 800bb6c:	f000 face 	bl	800c10c <__mcmp>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	dc91      	bgt.n	800ba98 <_dtoa_r+0xaa8>
 800bb74:	d102      	bne.n	800bb7c <_dtoa_r+0xb8c>
 800bb76:	f01a 0f01 	tst.w	sl, #1
 800bb7a:	d18d      	bne.n	800ba98 <_dtoa_r+0xaa8>
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	461d      	mov	r5, r3
 800bb80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb84:	2a30      	cmp	r2, #48	; 0x30
 800bb86:	d0fa      	beq.n	800bb7e <_dtoa_r+0xb8e>
 800bb88:	e6d7      	b.n	800b93a <_dtoa_r+0x94a>
 800bb8a:	9a01      	ldr	r2, [sp, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d184      	bne.n	800ba9a <_dtoa_r+0xaaa>
 800bb90:	9b00      	ldr	r3, [sp, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	2331      	movs	r3, #49	; 0x31
 800bb98:	7013      	strb	r3, [r2, #0]
 800bb9a:	e6ce      	b.n	800b93a <_dtoa_r+0x94a>
 800bb9c:	4b09      	ldr	r3, [pc, #36]	; (800bbc4 <_dtoa_r+0xbd4>)
 800bb9e:	f7ff ba95 	b.w	800b0cc <_dtoa_r+0xdc>
 800bba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f47f aa6e 	bne.w	800b086 <_dtoa_r+0x96>
 800bbaa:	4b07      	ldr	r3, [pc, #28]	; (800bbc8 <_dtoa_r+0xbd8>)
 800bbac:	f7ff ba8e 	b.w	800b0cc <_dtoa_r+0xdc>
 800bbb0:	9b02      	ldr	r3, [sp, #8]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	dcae      	bgt.n	800bb14 <_dtoa_r+0xb24>
 800bbb6:	9b06      	ldr	r3, [sp, #24]
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	f73f aea8 	bgt.w	800b90e <_dtoa_r+0x91e>
 800bbbe:	e7a9      	b.n	800bb14 <_dtoa_r+0xb24>
 800bbc0:	0800dd63 	.word	0x0800dd63
 800bbc4:	0800dcc0 	.word	0x0800dcc0
 800bbc8:	0800dce4 	.word	0x0800dce4

0800bbcc <_localeconv_r>:
 800bbcc:	4800      	ldr	r0, [pc, #0]	; (800bbd0 <_localeconv_r+0x4>)
 800bbce:	4770      	bx	lr
 800bbd0:	20000170 	.word	0x20000170

0800bbd4 <memcpy>:
 800bbd4:	440a      	add	r2, r1
 800bbd6:	4291      	cmp	r1, r2
 800bbd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bbdc:	d100      	bne.n	800bbe0 <memcpy+0xc>
 800bbde:	4770      	bx	lr
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbea:	4291      	cmp	r1, r2
 800bbec:	d1f9      	bne.n	800bbe2 <memcpy+0xe>
 800bbee:	bd10      	pop	{r4, pc}

0800bbf0 <__malloc_lock>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	; (800bbf8 <__malloc_lock+0x8>)
 800bbf2:	f000 bd30 	b.w	800c656 <__retarget_lock_acquire_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	20000564 	.word	0x20000564

0800bbfc <__malloc_unlock>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	; (800bc04 <__malloc_unlock+0x8>)
 800bbfe:	f000 bd2b 	b.w	800c658 <__retarget_lock_release_recursive>
 800bc02:	bf00      	nop
 800bc04:	20000564 	.word	0x20000564

0800bc08 <_Balloc>:
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	460d      	mov	r5, r1
 800bc10:	b976      	cbnz	r6, 800bc30 <_Balloc+0x28>
 800bc12:	2010      	movs	r0, #16
 800bc14:	f7fe fbd4 	bl	800a3c0 <malloc>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	6260      	str	r0, [r4, #36]	; 0x24
 800bc1c:	b920      	cbnz	r0, 800bc28 <_Balloc+0x20>
 800bc1e:	4b18      	ldr	r3, [pc, #96]	; (800bc80 <_Balloc+0x78>)
 800bc20:	4818      	ldr	r0, [pc, #96]	; (800bc84 <_Balloc+0x7c>)
 800bc22:	2166      	movs	r1, #102	; 0x66
 800bc24:	f000 fce6 	bl	800c5f4 <__assert_func>
 800bc28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc2c:	6006      	str	r6, [r0, #0]
 800bc2e:	60c6      	str	r6, [r0, #12]
 800bc30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc32:	68f3      	ldr	r3, [r6, #12]
 800bc34:	b183      	cbz	r3, 800bc58 <_Balloc+0x50>
 800bc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc3e:	b9b8      	cbnz	r0, 800bc70 <_Balloc+0x68>
 800bc40:	2101      	movs	r1, #1
 800bc42:	fa01 f605 	lsl.w	r6, r1, r5
 800bc46:	1d72      	adds	r2, r6, #5
 800bc48:	0092      	lsls	r2, r2, #2
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 fb60 	bl	800c310 <_calloc_r>
 800bc50:	b160      	cbz	r0, 800bc6c <_Balloc+0x64>
 800bc52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc56:	e00e      	b.n	800bc76 <_Balloc+0x6e>
 800bc58:	2221      	movs	r2, #33	; 0x21
 800bc5a:	2104      	movs	r1, #4
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 fb57 	bl	800c310 <_calloc_r>
 800bc62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc64:	60f0      	str	r0, [r6, #12]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1e4      	bne.n	800bc36 <_Balloc+0x2e>
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	6802      	ldr	r2, [r0, #0]
 800bc72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc76:	2300      	movs	r3, #0
 800bc78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc7c:	e7f7      	b.n	800bc6e <_Balloc+0x66>
 800bc7e:	bf00      	nop
 800bc80:	0800dcf1 	.word	0x0800dcf1
 800bc84:	0800dd74 	.word	0x0800dd74

0800bc88 <_Bfree>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	b976      	cbnz	r6, 800bcb0 <_Bfree+0x28>
 800bc92:	2010      	movs	r0, #16
 800bc94:	f7fe fb94 	bl	800a3c0 <malloc>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	6268      	str	r0, [r5, #36]	; 0x24
 800bc9c:	b920      	cbnz	r0, 800bca8 <_Bfree+0x20>
 800bc9e:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <_Bfree+0x3c>)
 800bca0:	4809      	ldr	r0, [pc, #36]	; (800bcc8 <_Bfree+0x40>)
 800bca2:	218a      	movs	r1, #138	; 0x8a
 800bca4:	f000 fca6 	bl	800c5f4 <__assert_func>
 800bca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcac:	6006      	str	r6, [r0, #0]
 800bcae:	60c6      	str	r6, [r0, #12]
 800bcb0:	b13c      	cbz	r4, 800bcc2 <_Bfree+0x3a>
 800bcb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcb4:	6862      	ldr	r2, [r4, #4]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcbc:	6021      	str	r1, [r4, #0]
 800bcbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	0800dcf1 	.word	0x0800dcf1
 800bcc8:	0800dd74 	.word	0x0800dd74

0800bccc <__multadd>:
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	690d      	ldr	r5, [r1, #16]
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	461e      	mov	r6, r3
 800bcd8:	f101 0c14 	add.w	ip, r1, #20
 800bcdc:	2000      	movs	r0, #0
 800bcde:	f8dc 3000 	ldr.w	r3, [ip]
 800bce2:	b299      	uxth	r1, r3
 800bce4:	fb02 6101 	mla	r1, r2, r1, r6
 800bce8:	0c1e      	lsrs	r6, r3, #16
 800bcea:	0c0b      	lsrs	r3, r1, #16
 800bcec:	fb02 3306 	mla	r3, r2, r6, r3
 800bcf0:	b289      	uxth	r1, r1
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcf8:	4285      	cmp	r5, r0
 800bcfa:	f84c 1b04 	str.w	r1, [ip], #4
 800bcfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd02:	dcec      	bgt.n	800bcde <__multadd+0x12>
 800bd04:	b30e      	cbz	r6, 800bd4a <__multadd+0x7e>
 800bd06:	68a3      	ldr	r3, [r4, #8]
 800bd08:	42ab      	cmp	r3, r5
 800bd0a:	dc19      	bgt.n	800bd40 <__multadd+0x74>
 800bd0c:	6861      	ldr	r1, [r4, #4]
 800bd0e:	4638      	mov	r0, r7
 800bd10:	3101      	adds	r1, #1
 800bd12:	f7ff ff79 	bl	800bc08 <_Balloc>
 800bd16:	4680      	mov	r8, r0
 800bd18:	b928      	cbnz	r0, 800bd26 <__multadd+0x5a>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <__multadd+0x84>)
 800bd1e:	480d      	ldr	r0, [pc, #52]	; (800bd54 <__multadd+0x88>)
 800bd20:	21b5      	movs	r1, #181	; 0xb5
 800bd22:	f000 fc67 	bl	800c5f4 <__assert_func>
 800bd26:	6922      	ldr	r2, [r4, #16]
 800bd28:	3202      	adds	r2, #2
 800bd2a:	f104 010c 	add.w	r1, r4, #12
 800bd2e:	0092      	lsls	r2, r2, #2
 800bd30:	300c      	adds	r0, #12
 800bd32:	f7ff ff4f 	bl	800bbd4 <memcpy>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff ffa5 	bl	800bc88 <_Bfree>
 800bd3e:	4644      	mov	r4, r8
 800bd40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd44:	3501      	adds	r5, #1
 800bd46:	615e      	str	r6, [r3, #20]
 800bd48:	6125      	str	r5, [r4, #16]
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	0800dd63 	.word	0x0800dd63
 800bd54:	0800dd74 	.word	0x0800dd74

0800bd58 <__hi0bits>:
 800bd58:	0c03      	lsrs	r3, r0, #16
 800bd5a:	041b      	lsls	r3, r3, #16
 800bd5c:	b9d3      	cbnz	r3, 800bd94 <__hi0bits+0x3c>
 800bd5e:	0400      	lsls	r0, r0, #16
 800bd60:	2310      	movs	r3, #16
 800bd62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd66:	bf04      	itt	eq
 800bd68:	0200      	lsleq	r0, r0, #8
 800bd6a:	3308      	addeq	r3, #8
 800bd6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd70:	bf04      	itt	eq
 800bd72:	0100      	lsleq	r0, r0, #4
 800bd74:	3304      	addeq	r3, #4
 800bd76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd7a:	bf04      	itt	eq
 800bd7c:	0080      	lsleq	r0, r0, #2
 800bd7e:	3302      	addeq	r3, #2
 800bd80:	2800      	cmp	r0, #0
 800bd82:	db05      	blt.n	800bd90 <__hi0bits+0x38>
 800bd84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd88:	f103 0301 	add.w	r3, r3, #1
 800bd8c:	bf08      	it	eq
 800bd8e:	2320      	moveq	r3, #32
 800bd90:	4618      	mov	r0, r3
 800bd92:	4770      	bx	lr
 800bd94:	2300      	movs	r3, #0
 800bd96:	e7e4      	b.n	800bd62 <__hi0bits+0xa>

0800bd98 <__lo0bits>:
 800bd98:	6803      	ldr	r3, [r0, #0]
 800bd9a:	f013 0207 	ands.w	r2, r3, #7
 800bd9e:	4601      	mov	r1, r0
 800bda0:	d00b      	beq.n	800bdba <__lo0bits+0x22>
 800bda2:	07da      	lsls	r2, r3, #31
 800bda4:	d423      	bmi.n	800bdee <__lo0bits+0x56>
 800bda6:	0798      	lsls	r0, r3, #30
 800bda8:	bf49      	itett	mi
 800bdaa:	085b      	lsrmi	r3, r3, #1
 800bdac:	089b      	lsrpl	r3, r3, #2
 800bdae:	2001      	movmi	r0, #1
 800bdb0:	600b      	strmi	r3, [r1, #0]
 800bdb2:	bf5c      	itt	pl
 800bdb4:	600b      	strpl	r3, [r1, #0]
 800bdb6:	2002      	movpl	r0, #2
 800bdb8:	4770      	bx	lr
 800bdba:	b298      	uxth	r0, r3
 800bdbc:	b9a8      	cbnz	r0, 800bdea <__lo0bits+0x52>
 800bdbe:	0c1b      	lsrs	r3, r3, #16
 800bdc0:	2010      	movs	r0, #16
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	b90a      	cbnz	r2, 800bdca <__lo0bits+0x32>
 800bdc6:	3008      	adds	r0, #8
 800bdc8:	0a1b      	lsrs	r3, r3, #8
 800bdca:	071a      	lsls	r2, r3, #28
 800bdcc:	bf04      	itt	eq
 800bdce:	091b      	lsreq	r3, r3, #4
 800bdd0:	3004      	addeq	r0, #4
 800bdd2:	079a      	lsls	r2, r3, #30
 800bdd4:	bf04      	itt	eq
 800bdd6:	089b      	lsreq	r3, r3, #2
 800bdd8:	3002      	addeq	r0, #2
 800bdda:	07da      	lsls	r2, r3, #31
 800bddc:	d403      	bmi.n	800bde6 <__lo0bits+0x4e>
 800bdde:	085b      	lsrs	r3, r3, #1
 800bde0:	f100 0001 	add.w	r0, r0, #1
 800bde4:	d005      	beq.n	800bdf2 <__lo0bits+0x5a>
 800bde6:	600b      	str	r3, [r1, #0]
 800bde8:	4770      	bx	lr
 800bdea:	4610      	mov	r0, r2
 800bdec:	e7e9      	b.n	800bdc2 <__lo0bits+0x2a>
 800bdee:	2000      	movs	r0, #0
 800bdf0:	4770      	bx	lr
 800bdf2:	2020      	movs	r0, #32
 800bdf4:	4770      	bx	lr
	...

0800bdf8 <__i2b>:
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	460c      	mov	r4, r1
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	f7ff ff03 	bl	800bc08 <_Balloc>
 800be02:	4602      	mov	r2, r0
 800be04:	b928      	cbnz	r0, 800be12 <__i2b+0x1a>
 800be06:	4b05      	ldr	r3, [pc, #20]	; (800be1c <__i2b+0x24>)
 800be08:	4805      	ldr	r0, [pc, #20]	; (800be20 <__i2b+0x28>)
 800be0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be0e:	f000 fbf1 	bl	800c5f4 <__assert_func>
 800be12:	2301      	movs	r3, #1
 800be14:	6144      	str	r4, [r0, #20]
 800be16:	6103      	str	r3, [r0, #16]
 800be18:	bd10      	pop	{r4, pc}
 800be1a:	bf00      	nop
 800be1c:	0800dd63 	.word	0x0800dd63
 800be20:	0800dd74 	.word	0x0800dd74

0800be24 <__multiply>:
 800be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be28:	4691      	mov	r9, r2
 800be2a:	690a      	ldr	r2, [r1, #16]
 800be2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be30:	429a      	cmp	r2, r3
 800be32:	bfb8      	it	lt
 800be34:	460b      	movlt	r3, r1
 800be36:	460c      	mov	r4, r1
 800be38:	bfbc      	itt	lt
 800be3a:	464c      	movlt	r4, r9
 800be3c:	4699      	movlt	r9, r3
 800be3e:	6927      	ldr	r7, [r4, #16]
 800be40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be44:	68a3      	ldr	r3, [r4, #8]
 800be46:	6861      	ldr	r1, [r4, #4]
 800be48:	eb07 060a 	add.w	r6, r7, sl
 800be4c:	42b3      	cmp	r3, r6
 800be4e:	b085      	sub	sp, #20
 800be50:	bfb8      	it	lt
 800be52:	3101      	addlt	r1, #1
 800be54:	f7ff fed8 	bl	800bc08 <_Balloc>
 800be58:	b930      	cbnz	r0, 800be68 <__multiply+0x44>
 800be5a:	4602      	mov	r2, r0
 800be5c:	4b44      	ldr	r3, [pc, #272]	; (800bf70 <__multiply+0x14c>)
 800be5e:	4845      	ldr	r0, [pc, #276]	; (800bf74 <__multiply+0x150>)
 800be60:	f240 115d 	movw	r1, #349	; 0x15d
 800be64:	f000 fbc6 	bl	800c5f4 <__assert_func>
 800be68:	f100 0514 	add.w	r5, r0, #20
 800be6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be70:	462b      	mov	r3, r5
 800be72:	2200      	movs	r2, #0
 800be74:	4543      	cmp	r3, r8
 800be76:	d321      	bcc.n	800bebc <__multiply+0x98>
 800be78:	f104 0314 	add.w	r3, r4, #20
 800be7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be80:	f109 0314 	add.w	r3, r9, #20
 800be84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be88:	9202      	str	r2, [sp, #8]
 800be8a:	1b3a      	subs	r2, r7, r4
 800be8c:	3a15      	subs	r2, #21
 800be8e:	f022 0203 	bic.w	r2, r2, #3
 800be92:	3204      	adds	r2, #4
 800be94:	f104 0115 	add.w	r1, r4, #21
 800be98:	428f      	cmp	r7, r1
 800be9a:	bf38      	it	cc
 800be9c:	2204      	movcc	r2, #4
 800be9e:	9201      	str	r2, [sp, #4]
 800bea0:	9a02      	ldr	r2, [sp, #8]
 800bea2:	9303      	str	r3, [sp, #12]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d80c      	bhi.n	800bec2 <__multiply+0x9e>
 800bea8:	2e00      	cmp	r6, #0
 800beaa:	dd03      	ble.n	800beb4 <__multiply+0x90>
 800beac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d05a      	beq.n	800bf6a <__multiply+0x146>
 800beb4:	6106      	str	r6, [r0, #16]
 800beb6:	b005      	add	sp, #20
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	f843 2b04 	str.w	r2, [r3], #4
 800bec0:	e7d8      	b.n	800be74 <__multiply+0x50>
 800bec2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bec6:	f1ba 0f00 	cmp.w	sl, #0
 800beca:	d024      	beq.n	800bf16 <__multiply+0xf2>
 800becc:	f104 0e14 	add.w	lr, r4, #20
 800bed0:	46a9      	mov	r9, r5
 800bed2:	f04f 0c00 	mov.w	ip, #0
 800bed6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800beda:	f8d9 1000 	ldr.w	r1, [r9]
 800bede:	fa1f fb82 	uxth.w	fp, r2
 800bee2:	b289      	uxth	r1, r1
 800bee4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bee8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800beec:	f8d9 2000 	ldr.w	r2, [r9]
 800bef0:	4461      	add	r1, ip
 800bef2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bef6:	fb0a c20b 	mla	r2, sl, fp, ip
 800befa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800befe:	b289      	uxth	r1, r1
 800bf00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf04:	4577      	cmp	r7, lr
 800bf06:	f849 1b04 	str.w	r1, [r9], #4
 800bf0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf0e:	d8e2      	bhi.n	800bed6 <__multiply+0xb2>
 800bf10:	9a01      	ldr	r2, [sp, #4]
 800bf12:	f845 c002 	str.w	ip, [r5, r2]
 800bf16:	9a03      	ldr	r2, [sp, #12]
 800bf18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	f1b9 0f00 	cmp.w	r9, #0
 800bf22:	d020      	beq.n	800bf66 <__multiply+0x142>
 800bf24:	6829      	ldr	r1, [r5, #0]
 800bf26:	f104 0c14 	add.w	ip, r4, #20
 800bf2a:	46ae      	mov	lr, r5
 800bf2c:	f04f 0a00 	mov.w	sl, #0
 800bf30:	f8bc b000 	ldrh.w	fp, [ip]
 800bf34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf38:	fb09 220b 	mla	r2, r9, fp, r2
 800bf3c:	4492      	add	sl, r2
 800bf3e:	b289      	uxth	r1, r1
 800bf40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf44:	f84e 1b04 	str.w	r1, [lr], #4
 800bf48:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf4c:	f8be 1000 	ldrh.w	r1, [lr]
 800bf50:	0c12      	lsrs	r2, r2, #16
 800bf52:	fb09 1102 	mla	r1, r9, r2, r1
 800bf56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bf5a:	4567      	cmp	r7, ip
 800bf5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf60:	d8e6      	bhi.n	800bf30 <__multiply+0x10c>
 800bf62:	9a01      	ldr	r2, [sp, #4]
 800bf64:	50a9      	str	r1, [r5, r2]
 800bf66:	3504      	adds	r5, #4
 800bf68:	e79a      	b.n	800bea0 <__multiply+0x7c>
 800bf6a:	3e01      	subs	r6, #1
 800bf6c:	e79c      	b.n	800bea8 <__multiply+0x84>
 800bf6e:	bf00      	nop
 800bf70:	0800dd63 	.word	0x0800dd63
 800bf74:	0800dd74 	.word	0x0800dd74

0800bf78 <__pow5mult>:
 800bf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf7c:	4615      	mov	r5, r2
 800bf7e:	f012 0203 	ands.w	r2, r2, #3
 800bf82:	4606      	mov	r6, r0
 800bf84:	460f      	mov	r7, r1
 800bf86:	d007      	beq.n	800bf98 <__pow5mult+0x20>
 800bf88:	4c25      	ldr	r4, [pc, #148]	; (800c020 <__pow5mult+0xa8>)
 800bf8a:	3a01      	subs	r2, #1
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf92:	f7ff fe9b 	bl	800bccc <__multadd>
 800bf96:	4607      	mov	r7, r0
 800bf98:	10ad      	asrs	r5, r5, #2
 800bf9a:	d03d      	beq.n	800c018 <__pow5mult+0xa0>
 800bf9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bf9e:	b97c      	cbnz	r4, 800bfc0 <__pow5mult+0x48>
 800bfa0:	2010      	movs	r0, #16
 800bfa2:	f7fe fa0d 	bl	800a3c0 <malloc>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	6270      	str	r0, [r6, #36]	; 0x24
 800bfaa:	b928      	cbnz	r0, 800bfb8 <__pow5mult+0x40>
 800bfac:	4b1d      	ldr	r3, [pc, #116]	; (800c024 <__pow5mult+0xac>)
 800bfae:	481e      	ldr	r0, [pc, #120]	; (800c028 <__pow5mult+0xb0>)
 800bfb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bfb4:	f000 fb1e 	bl	800c5f4 <__assert_func>
 800bfb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfbc:	6004      	str	r4, [r0, #0]
 800bfbe:	60c4      	str	r4, [r0, #12]
 800bfc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bfc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfc8:	b94c      	cbnz	r4, 800bfde <__pow5mult+0x66>
 800bfca:	f240 2171 	movw	r1, #625	; 0x271
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f7ff ff12 	bl	800bdf8 <__i2b>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfda:	4604      	mov	r4, r0
 800bfdc:	6003      	str	r3, [r0, #0]
 800bfde:	f04f 0900 	mov.w	r9, #0
 800bfe2:	07eb      	lsls	r3, r5, #31
 800bfe4:	d50a      	bpl.n	800bffc <__pow5mult+0x84>
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	4622      	mov	r2, r4
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7ff ff1a 	bl	800be24 <__multiply>
 800bff0:	4639      	mov	r1, r7
 800bff2:	4680      	mov	r8, r0
 800bff4:	4630      	mov	r0, r6
 800bff6:	f7ff fe47 	bl	800bc88 <_Bfree>
 800bffa:	4647      	mov	r7, r8
 800bffc:	106d      	asrs	r5, r5, #1
 800bffe:	d00b      	beq.n	800c018 <__pow5mult+0xa0>
 800c000:	6820      	ldr	r0, [r4, #0]
 800c002:	b938      	cbnz	r0, 800c014 <__pow5mult+0x9c>
 800c004:	4622      	mov	r2, r4
 800c006:	4621      	mov	r1, r4
 800c008:	4630      	mov	r0, r6
 800c00a:	f7ff ff0b 	bl	800be24 <__multiply>
 800c00e:	6020      	str	r0, [r4, #0]
 800c010:	f8c0 9000 	str.w	r9, [r0]
 800c014:	4604      	mov	r4, r0
 800c016:	e7e4      	b.n	800bfe2 <__pow5mult+0x6a>
 800c018:	4638      	mov	r0, r7
 800c01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c01e:	bf00      	nop
 800c020:	0800dec0 	.word	0x0800dec0
 800c024:	0800dcf1 	.word	0x0800dcf1
 800c028:	0800dd74 	.word	0x0800dd74

0800c02c <__lshift>:
 800c02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c030:	460c      	mov	r4, r1
 800c032:	6849      	ldr	r1, [r1, #4]
 800c034:	6923      	ldr	r3, [r4, #16]
 800c036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c03a:	68a3      	ldr	r3, [r4, #8]
 800c03c:	4607      	mov	r7, r0
 800c03e:	4691      	mov	r9, r2
 800c040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c044:	f108 0601 	add.w	r6, r8, #1
 800c048:	42b3      	cmp	r3, r6
 800c04a:	db0b      	blt.n	800c064 <__lshift+0x38>
 800c04c:	4638      	mov	r0, r7
 800c04e:	f7ff fddb 	bl	800bc08 <_Balloc>
 800c052:	4605      	mov	r5, r0
 800c054:	b948      	cbnz	r0, 800c06a <__lshift+0x3e>
 800c056:	4602      	mov	r2, r0
 800c058:	4b2a      	ldr	r3, [pc, #168]	; (800c104 <__lshift+0xd8>)
 800c05a:	482b      	ldr	r0, [pc, #172]	; (800c108 <__lshift+0xdc>)
 800c05c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c060:	f000 fac8 	bl	800c5f4 <__assert_func>
 800c064:	3101      	adds	r1, #1
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	e7ee      	b.n	800c048 <__lshift+0x1c>
 800c06a:	2300      	movs	r3, #0
 800c06c:	f100 0114 	add.w	r1, r0, #20
 800c070:	f100 0210 	add.w	r2, r0, #16
 800c074:	4618      	mov	r0, r3
 800c076:	4553      	cmp	r3, sl
 800c078:	db37      	blt.n	800c0ea <__lshift+0xbe>
 800c07a:	6920      	ldr	r0, [r4, #16]
 800c07c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c080:	f104 0314 	add.w	r3, r4, #20
 800c084:	f019 091f 	ands.w	r9, r9, #31
 800c088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c08c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c090:	d02f      	beq.n	800c0f2 <__lshift+0xc6>
 800c092:	f1c9 0e20 	rsb	lr, r9, #32
 800c096:	468a      	mov	sl, r1
 800c098:	f04f 0c00 	mov.w	ip, #0
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	fa02 f209 	lsl.w	r2, r2, r9
 800c0a2:	ea42 020c 	orr.w	r2, r2, ip
 800c0a6:	f84a 2b04 	str.w	r2, [sl], #4
 800c0aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ae:	4298      	cmp	r0, r3
 800c0b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c0b4:	d8f2      	bhi.n	800c09c <__lshift+0x70>
 800c0b6:	1b03      	subs	r3, r0, r4
 800c0b8:	3b15      	subs	r3, #21
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	3304      	adds	r3, #4
 800c0c0:	f104 0215 	add.w	r2, r4, #21
 800c0c4:	4290      	cmp	r0, r2
 800c0c6:	bf38      	it	cc
 800c0c8:	2304      	movcc	r3, #4
 800c0ca:	f841 c003 	str.w	ip, [r1, r3]
 800c0ce:	f1bc 0f00 	cmp.w	ip, #0
 800c0d2:	d001      	beq.n	800c0d8 <__lshift+0xac>
 800c0d4:	f108 0602 	add.w	r6, r8, #2
 800c0d8:	3e01      	subs	r6, #1
 800c0da:	4638      	mov	r0, r7
 800c0dc:	612e      	str	r6, [r5, #16]
 800c0de:	4621      	mov	r1, r4
 800c0e0:	f7ff fdd2 	bl	800bc88 <_Bfree>
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	e7c1      	b.n	800c076 <__lshift+0x4a>
 800c0f2:	3904      	subs	r1, #4
 800c0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0fc:	4298      	cmp	r0, r3
 800c0fe:	d8f9      	bhi.n	800c0f4 <__lshift+0xc8>
 800c100:	e7ea      	b.n	800c0d8 <__lshift+0xac>
 800c102:	bf00      	nop
 800c104:	0800dd63 	.word	0x0800dd63
 800c108:	0800dd74 	.word	0x0800dd74

0800c10c <__mcmp>:
 800c10c:	b530      	push	{r4, r5, lr}
 800c10e:	6902      	ldr	r2, [r0, #16]
 800c110:	690c      	ldr	r4, [r1, #16]
 800c112:	1b12      	subs	r2, r2, r4
 800c114:	d10e      	bne.n	800c134 <__mcmp+0x28>
 800c116:	f100 0314 	add.w	r3, r0, #20
 800c11a:	3114      	adds	r1, #20
 800c11c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c120:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c124:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c128:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c12c:	42a5      	cmp	r5, r4
 800c12e:	d003      	beq.n	800c138 <__mcmp+0x2c>
 800c130:	d305      	bcc.n	800c13e <__mcmp+0x32>
 800c132:	2201      	movs	r2, #1
 800c134:	4610      	mov	r0, r2
 800c136:	bd30      	pop	{r4, r5, pc}
 800c138:	4283      	cmp	r3, r0
 800c13a:	d3f3      	bcc.n	800c124 <__mcmp+0x18>
 800c13c:	e7fa      	b.n	800c134 <__mcmp+0x28>
 800c13e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c142:	e7f7      	b.n	800c134 <__mcmp+0x28>

0800c144 <__mdiff>:
 800c144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	460c      	mov	r4, r1
 800c14a:	4606      	mov	r6, r0
 800c14c:	4611      	mov	r1, r2
 800c14e:	4620      	mov	r0, r4
 800c150:	4690      	mov	r8, r2
 800c152:	f7ff ffdb 	bl	800c10c <__mcmp>
 800c156:	1e05      	subs	r5, r0, #0
 800c158:	d110      	bne.n	800c17c <__mdiff+0x38>
 800c15a:	4629      	mov	r1, r5
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7ff fd53 	bl	800bc08 <_Balloc>
 800c162:	b930      	cbnz	r0, 800c172 <__mdiff+0x2e>
 800c164:	4b3a      	ldr	r3, [pc, #232]	; (800c250 <__mdiff+0x10c>)
 800c166:	4602      	mov	r2, r0
 800c168:	f240 2132 	movw	r1, #562	; 0x232
 800c16c:	4839      	ldr	r0, [pc, #228]	; (800c254 <__mdiff+0x110>)
 800c16e:	f000 fa41 	bl	800c5f4 <__assert_func>
 800c172:	2301      	movs	r3, #1
 800c174:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17c:	bfa4      	itt	ge
 800c17e:	4643      	movge	r3, r8
 800c180:	46a0      	movge	r8, r4
 800c182:	4630      	mov	r0, r6
 800c184:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c188:	bfa6      	itte	ge
 800c18a:	461c      	movge	r4, r3
 800c18c:	2500      	movge	r5, #0
 800c18e:	2501      	movlt	r5, #1
 800c190:	f7ff fd3a 	bl	800bc08 <_Balloc>
 800c194:	b920      	cbnz	r0, 800c1a0 <__mdiff+0x5c>
 800c196:	4b2e      	ldr	r3, [pc, #184]	; (800c250 <__mdiff+0x10c>)
 800c198:	4602      	mov	r2, r0
 800c19a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c19e:	e7e5      	b.n	800c16c <__mdiff+0x28>
 800c1a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1a4:	6926      	ldr	r6, [r4, #16]
 800c1a6:	60c5      	str	r5, [r0, #12]
 800c1a8:	f104 0914 	add.w	r9, r4, #20
 800c1ac:	f108 0514 	add.w	r5, r8, #20
 800c1b0:	f100 0e14 	add.w	lr, r0, #20
 800c1b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c1b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c1bc:	f108 0210 	add.w	r2, r8, #16
 800c1c0:	46f2      	mov	sl, lr
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1cc:	fa1f f883 	uxth.w	r8, r3
 800c1d0:	fa11 f18b 	uxtah	r1, r1, fp
 800c1d4:	0c1b      	lsrs	r3, r3, #16
 800c1d6:	eba1 0808 	sub.w	r8, r1, r8
 800c1da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c1e2:	fa1f f888 	uxth.w	r8, r8
 800c1e6:	1419      	asrs	r1, r3, #16
 800c1e8:	454e      	cmp	r6, r9
 800c1ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c1ee:	f84a 3b04 	str.w	r3, [sl], #4
 800c1f2:	d8e7      	bhi.n	800c1c4 <__mdiff+0x80>
 800c1f4:	1b33      	subs	r3, r6, r4
 800c1f6:	3b15      	subs	r3, #21
 800c1f8:	f023 0303 	bic.w	r3, r3, #3
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	3415      	adds	r4, #21
 800c200:	42a6      	cmp	r6, r4
 800c202:	bf38      	it	cc
 800c204:	2304      	movcc	r3, #4
 800c206:	441d      	add	r5, r3
 800c208:	4473      	add	r3, lr
 800c20a:	469e      	mov	lr, r3
 800c20c:	462e      	mov	r6, r5
 800c20e:	4566      	cmp	r6, ip
 800c210:	d30e      	bcc.n	800c230 <__mdiff+0xec>
 800c212:	f10c 0203 	add.w	r2, ip, #3
 800c216:	1b52      	subs	r2, r2, r5
 800c218:	f022 0203 	bic.w	r2, r2, #3
 800c21c:	3d03      	subs	r5, #3
 800c21e:	45ac      	cmp	ip, r5
 800c220:	bf38      	it	cc
 800c222:	2200      	movcc	r2, #0
 800c224:	441a      	add	r2, r3
 800c226:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c22a:	b17b      	cbz	r3, 800c24c <__mdiff+0x108>
 800c22c:	6107      	str	r7, [r0, #16]
 800c22e:	e7a3      	b.n	800c178 <__mdiff+0x34>
 800c230:	f856 8b04 	ldr.w	r8, [r6], #4
 800c234:	fa11 f288 	uxtah	r2, r1, r8
 800c238:	1414      	asrs	r4, r2, #16
 800c23a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c23e:	b292      	uxth	r2, r2
 800c240:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c244:	f84e 2b04 	str.w	r2, [lr], #4
 800c248:	1421      	asrs	r1, r4, #16
 800c24a:	e7e0      	b.n	800c20e <__mdiff+0xca>
 800c24c:	3f01      	subs	r7, #1
 800c24e:	e7ea      	b.n	800c226 <__mdiff+0xe2>
 800c250:	0800dd63 	.word	0x0800dd63
 800c254:	0800dd74 	.word	0x0800dd74

0800c258 <__d2b>:
 800c258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c25c:	4689      	mov	r9, r1
 800c25e:	2101      	movs	r1, #1
 800c260:	ec57 6b10 	vmov	r6, r7, d0
 800c264:	4690      	mov	r8, r2
 800c266:	f7ff fccf 	bl	800bc08 <_Balloc>
 800c26a:	4604      	mov	r4, r0
 800c26c:	b930      	cbnz	r0, 800c27c <__d2b+0x24>
 800c26e:	4602      	mov	r2, r0
 800c270:	4b25      	ldr	r3, [pc, #148]	; (800c308 <__d2b+0xb0>)
 800c272:	4826      	ldr	r0, [pc, #152]	; (800c30c <__d2b+0xb4>)
 800c274:	f240 310a 	movw	r1, #778	; 0x30a
 800c278:	f000 f9bc 	bl	800c5f4 <__assert_func>
 800c27c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c284:	bb35      	cbnz	r5, 800c2d4 <__d2b+0x7c>
 800c286:	2e00      	cmp	r6, #0
 800c288:	9301      	str	r3, [sp, #4]
 800c28a:	d028      	beq.n	800c2de <__d2b+0x86>
 800c28c:	4668      	mov	r0, sp
 800c28e:	9600      	str	r6, [sp, #0]
 800c290:	f7ff fd82 	bl	800bd98 <__lo0bits>
 800c294:	9900      	ldr	r1, [sp, #0]
 800c296:	b300      	cbz	r0, 800c2da <__d2b+0x82>
 800c298:	9a01      	ldr	r2, [sp, #4]
 800c29a:	f1c0 0320 	rsb	r3, r0, #32
 800c29e:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a2:	430b      	orrs	r3, r1
 800c2a4:	40c2      	lsrs	r2, r0
 800c2a6:	6163      	str	r3, [r4, #20]
 800c2a8:	9201      	str	r2, [sp, #4]
 800c2aa:	9b01      	ldr	r3, [sp, #4]
 800c2ac:	61a3      	str	r3, [r4, #24]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bf14      	ite	ne
 800c2b2:	2202      	movne	r2, #2
 800c2b4:	2201      	moveq	r2, #1
 800c2b6:	6122      	str	r2, [r4, #16]
 800c2b8:	b1d5      	cbz	r5, 800c2f0 <__d2b+0x98>
 800c2ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2be:	4405      	add	r5, r0
 800c2c0:	f8c9 5000 	str.w	r5, [r9]
 800c2c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2c8:	f8c8 0000 	str.w	r0, [r8]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	b003      	add	sp, #12
 800c2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2d8:	e7d5      	b.n	800c286 <__d2b+0x2e>
 800c2da:	6161      	str	r1, [r4, #20]
 800c2dc:	e7e5      	b.n	800c2aa <__d2b+0x52>
 800c2de:	a801      	add	r0, sp, #4
 800c2e0:	f7ff fd5a 	bl	800bd98 <__lo0bits>
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	6163      	str	r3, [r4, #20]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	6122      	str	r2, [r4, #16]
 800c2ec:	3020      	adds	r0, #32
 800c2ee:	e7e3      	b.n	800c2b8 <__d2b+0x60>
 800c2f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2f8:	f8c9 0000 	str.w	r0, [r9]
 800c2fc:	6918      	ldr	r0, [r3, #16]
 800c2fe:	f7ff fd2b 	bl	800bd58 <__hi0bits>
 800c302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c306:	e7df      	b.n	800c2c8 <__d2b+0x70>
 800c308:	0800dd63 	.word	0x0800dd63
 800c30c:	0800dd74 	.word	0x0800dd74

0800c310 <_calloc_r>:
 800c310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c312:	fba1 2402 	umull	r2, r4, r1, r2
 800c316:	b94c      	cbnz	r4, 800c32c <_calloc_r+0x1c>
 800c318:	4611      	mov	r1, r2
 800c31a:	9201      	str	r2, [sp, #4]
 800c31c:	f7fe f8cc 	bl	800a4b8 <_malloc_r>
 800c320:	9a01      	ldr	r2, [sp, #4]
 800c322:	4605      	mov	r5, r0
 800c324:	b930      	cbnz	r0, 800c334 <_calloc_r+0x24>
 800c326:	4628      	mov	r0, r5
 800c328:	b003      	add	sp, #12
 800c32a:	bd30      	pop	{r4, r5, pc}
 800c32c:	220c      	movs	r2, #12
 800c32e:	6002      	str	r2, [r0, #0]
 800c330:	2500      	movs	r5, #0
 800c332:	e7f8      	b.n	800c326 <_calloc_r+0x16>
 800c334:	4621      	mov	r1, r4
 800c336:	f7fe f84b 	bl	800a3d0 <memset>
 800c33a:	e7f4      	b.n	800c326 <_calloc_r+0x16>

0800c33c <__ssputs_r>:
 800c33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c340:	688e      	ldr	r6, [r1, #8]
 800c342:	429e      	cmp	r6, r3
 800c344:	4682      	mov	sl, r0
 800c346:	460c      	mov	r4, r1
 800c348:	4690      	mov	r8, r2
 800c34a:	461f      	mov	r7, r3
 800c34c:	d838      	bhi.n	800c3c0 <__ssputs_r+0x84>
 800c34e:	898a      	ldrh	r2, [r1, #12]
 800c350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c354:	d032      	beq.n	800c3bc <__ssputs_r+0x80>
 800c356:	6825      	ldr	r5, [r4, #0]
 800c358:	6909      	ldr	r1, [r1, #16]
 800c35a:	eba5 0901 	sub.w	r9, r5, r1
 800c35e:	6965      	ldr	r5, [r4, #20]
 800c360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c368:	3301      	adds	r3, #1
 800c36a:	444b      	add	r3, r9
 800c36c:	106d      	asrs	r5, r5, #1
 800c36e:	429d      	cmp	r5, r3
 800c370:	bf38      	it	cc
 800c372:	461d      	movcc	r5, r3
 800c374:	0553      	lsls	r3, r2, #21
 800c376:	d531      	bpl.n	800c3dc <__ssputs_r+0xa0>
 800c378:	4629      	mov	r1, r5
 800c37a:	f7fe f89d 	bl	800a4b8 <_malloc_r>
 800c37e:	4606      	mov	r6, r0
 800c380:	b950      	cbnz	r0, 800c398 <__ssputs_r+0x5c>
 800c382:	230c      	movs	r3, #12
 800c384:	f8ca 3000 	str.w	r3, [sl]
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c398:	6921      	ldr	r1, [r4, #16]
 800c39a:	464a      	mov	r2, r9
 800c39c:	f7ff fc1a 	bl	800bbd4 <memcpy>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	6126      	str	r6, [r4, #16]
 800c3ae:	6165      	str	r5, [r4, #20]
 800c3b0:	444e      	add	r6, r9
 800c3b2:	eba5 0509 	sub.w	r5, r5, r9
 800c3b6:	6026      	str	r6, [r4, #0]
 800c3b8:	60a5      	str	r5, [r4, #8]
 800c3ba:	463e      	mov	r6, r7
 800c3bc:	42be      	cmp	r6, r7
 800c3be:	d900      	bls.n	800c3c2 <__ssputs_r+0x86>
 800c3c0:	463e      	mov	r6, r7
 800c3c2:	6820      	ldr	r0, [r4, #0]
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	4641      	mov	r1, r8
 800c3c8:	f000 f959 	bl	800c67e <memmove>
 800c3cc:	68a3      	ldr	r3, [r4, #8]
 800c3ce:	1b9b      	subs	r3, r3, r6
 800c3d0:	60a3      	str	r3, [r4, #8]
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	4433      	add	r3, r6
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	2000      	movs	r0, #0
 800c3da:	e7db      	b.n	800c394 <__ssputs_r+0x58>
 800c3dc:	462a      	mov	r2, r5
 800c3de:	f000 f968 	bl	800c6b2 <_realloc_r>
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d1e1      	bne.n	800c3ac <__ssputs_r+0x70>
 800c3e8:	6921      	ldr	r1, [r4, #16]
 800c3ea:	4650      	mov	r0, sl
 800c3ec:	f7fd fff8 	bl	800a3e0 <_free_r>
 800c3f0:	e7c7      	b.n	800c382 <__ssputs_r+0x46>
	...

0800c3f4 <_svfiprintf_r>:
 800c3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f8:	4698      	mov	r8, r3
 800c3fa:	898b      	ldrh	r3, [r1, #12]
 800c3fc:	061b      	lsls	r3, r3, #24
 800c3fe:	b09d      	sub	sp, #116	; 0x74
 800c400:	4607      	mov	r7, r0
 800c402:	460d      	mov	r5, r1
 800c404:	4614      	mov	r4, r2
 800c406:	d50e      	bpl.n	800c426 <_svfiprintf_r+0x32>
 800c408:	690b      	ldr	r3, [r1, #16]
 800c40a:	b963      	cbnz	r3, 800c426 <_svfiprintf_r+0x32>
 800c40c:	2140      	movs	r1, #64	; 0x40
 800c40e:	f7fe f853 	bl	800a4b8 <_malloc_r>
 800c412:	6028      	str	r0, [r5, #0]
 800c414:	6128      	str	r0, [r5, #16]
 800c416:	b920      	cbnz	r0, 800c422 <_svfiprintf_r+0x2e>
 800c418:	230c      	movs	r3, #12
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c420:	e0d1      	b.n	800c5c6 <_svfiprintf_r+0x1d2>
 800c422:	2340      	movs	r3, #64	; 0x40
 800c424:	616b      	str	r3, [r5, #20]
 800c426:	2300      	movs	r3, #0
 800c428:	9309      	str	r3, [sp, #36]	; 0x24
 800c42a:	2320      	movs	r3, #32
 800c42c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c430:	f8cd 800c 	str.w	r8, [sp, #12]
 800c434:	2330      	movs	r3, #48	; 0x30
 800c436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c5e0 <_svfiprintf_r+0x1ec>
 800c43a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c43e:	f04f 0901 	mov.w	r9, #1
 800c442:	4623      	mov	r3, r4
 800c444:	469a      	mov	sl, r3
 800c446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c44a:	b10a      	cbz	r2, 800c450 <_svfiprintf_r+0x5c>
 800c44c:	2a25      	cmp	r2, #37	; 0x25
 800c44e:	d1f9      	bne.n	800c444 <_svfiprintf_r+0x50>
 800c450:	ebba 0b04 	subs.w	fp, sl, r4
 800c454:	d00b      	beq.n	800c46e <_svfiprintf_r+0x7a>
 800c456:	465b      	mov	r3, fp
 800c458:	4622      	mov	r2, r4
 800c45a:	4629      	mov	r1, r5
 800c45c:	4638      	mov	r0, r7
 800c45e:	f7ff ff6d 	bl	800c33c <__ssputs_r>
 800c462:	3001      	adds	r0, #1
 800c464:	f000 80aa 	beq.w	800c5bc <_svfiprintf_r+0x1c8>
 800c468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c46a:	445a      	add	r2, fp
 800c46c:	9209      	str	r2, [sp, #36]	; 0x24
 800c46e:	f89a 3000 	ldrb.w	r3, [sl]
 800c472:	2b00      	cmp	r3, #0
 800c474:	f000 80a2 	beq.w	800c5bc <_svfiprintf_r+0x1c8>
 800c478:	2300      	movs	r3, #0
 800c47a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c47e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c482:	f10a 0a01 	add.w	sl, sl, #1
 800c486:	9304      	str	r3, [sp, #16]
 800c488:	9307      	str	r3, [sp, #28]
 800c48a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c48e:	931a      	str	r3, [sp, #104]	; 0x68
 800c490:	4654      	mov	r4, sl
 800c492:	2205      	movs	r2, #5
 800c494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c498:	4851      	ldr	r0, [pc, #324]	; (800c5e0 <_svfiprintf_r+0x1ec>)
 800c49a:	f7f3 fea1 	bl	80001e0 <memchr>
 800c49e:	9a04      	ldr	r2, [sp, #16]
 800c4a0:	b9d8      	cbnz	r0, 800c4da <_svfiprintf_r+0xe6>
 800c4a2:	06d0      	lsls	r0, r2, #27
 800c4a4:	bf44      	itt	mi
 800c4a6:	2320      	movmi	r3, #32
 800c4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ac:	0711      	lsls	r1, r2, #28
 800c4ae:	bf44      	itt	mi
 800c4b0:	232b      	movmi	r3, #43	; 0x2b
 800c4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c4bc:	d015      	beq.n	800c4ea <_svfiprintf_r+0xf6>
 800c4be:	9a07      	ldr	r2, [sp, #28]
 800c4c0:	4654      	mov	r4, sl
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	f04f 0c0a 	mov.w	ip, #10
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ce:	3b30      	subs	r3, #48	; 0x30
 800c4d0:	2b09      	cmp	r3, #9
 800c4d2:	d94e      	bls.n	800c572 <_svfiprintf_r+0x17e>
 800c4d4:	b1b0      	cbz	r0, 800c504 <_svfiprintf_r+0x110>
 800c4d6:	9207      	str	r2, [sp, #28]
 800c4d8:	e014      	b.n	800c504 <_svfiprintf_r+0x110>
 800c4da:	eba0 0308 	sub.w	r3, r0, r8
 800c4de:	fa09 f303 	lsl.w	r3, r9, r3
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	9304      	str	r3, [sp, #16]
 800c4e6:	46a2      	mov	sl, r4
 800c4e8:	e7d2      	b.n	800c490 <_svfiprintf_r+0x9c>
 800c4ea:	9b03      	ldr	r3, [sp, #12]
 800c4ec:	1d19      	adds	r1, r3, #4
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	9103      	str	r1, [sp, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	bfbb      	ittet	lt
 800c4f6:	425b      	neglt	r3, r3
 800c4f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c4fc:	9307      	strge	r3, [sp, #28]
 800c4fe:	9307      	strlt	r3, [sp, #28]
 800c500:	bfb8      	it	lt
 800c502:	9204      	strlt	r2, [sp, #16]
 800c504:	7823      	ldrb	r3, [r4, #0]
 800c506:	2b2e      	cmp	r3, #46	; 0x2e
 800c508:	d10c      	bne.n	800c524 <_svfiprintf_r+0x130>
 800c50a:	7863      	ldrb	r3, [r4, #1]
 800c50c:	2b2a      	cmp	r3, #42	; 0x2a
 800c50e:	d135      	bne.n	800c57c <_svfiprintf_r+0x188>
 800c510:	9b03      	ldr	r3, [sp, #12]
 800c512:	1d1a      	adds	r2, r3, #4
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	9203      	str	r2, [sp, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	bfb8      	it	lt
 800c51c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c520:	3402      	adds	r4, #2
 800c522:	9305      	str	r3, [sp, #20]
 800c524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c5f0 <_svfiprintf_r+0x1fc>
 800c528:	7821      	ldrb	r1, [r4, #0]
 800c52a:	2203      	movs	r2, #3
 800c52c:	4650      	mov	r0, sl
 800c52e:	f7f3 fe57 	bl	80001e0 <memchr>
 800c532:	b140      	cbz	r0, 800c546 <_svfiprintf_r+0x152>
 800c534:	2340      	movs	r3, #64	; 0x40
 800c536:	eba0 000a 	sub.w	r0, r0, sl
 800c53a:	fa03 f000 	lsl.w	r0, r3, r0
 800c53e:	9b04      	ldr	r3, [sp, #16]
 800c540:	4303      	orrs	r3, r0
 800c542:	3401      	adds	r4, #1
 800c544:	9304      	str	r3, [sp, #16]
 800c546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c54a:	4826      	ldr	r0, [pc, #152]	; (800c5e4 <_svfiprintf_r+0x1f0>)
 800c54c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c550:	2206      	movs	r2, #6
 800c552:	f7f3 fe45 	bl	80001e0 <memchr>
 800c556:	2800      	cmp	r0, #0
 800c558:	d038      	beq.n	800c5cc <_svfiprintf_r+0x1d8>
 800c55a:	4b23      	ldr	r3, [pc, #140]	; (800c5e8 <_svfiprintf_r+0x1f4>)
 800c55c:	bb1b      	cbnz	r3, 800c5a6 <_svfiprintf_r+0x1b2>
 800c55e:	9b03      	ldr	r3, [sp, #12]
 800c560:	3307      	adds	r3, #7
 800c562:	f023 0307 	bic.w	r3, r3, #7
 800c566:	3308      	adds	r3, #8
 800c568:	9303      	str	r3, [sp, #12]
 800c56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c56c:	4433      	add	r3, r6
 800c56e:	9309      	str	r3, [sp, #36]	; 0x24
 800c570:	e767      	b.n	800c442 <_svfiprintf_r+0x4e>
 800c572:	fb0c 3202 	mla	r2, ip, r2, r3
 800c576:	460c      	mov	r4, r1
 800c578:	2001      	movs	r0, #1
 800c57a:	e7a5      	b.n	800c4c8 <_svfiprintf_r+0xd4>
 800c57c:	2300      	movs	r3, #0
 800c57e:	3401      	adds	r4, #1
 800c580:	9305      	str	r3, [sp, #20]
 800c582:	4619      	mov	r1, r3
 800c584:	f04f 0c0a 	mov.w	ip, #10
 800c588:	4620      	mov	r0, r4
 800c58a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c58e:	3a30      	subs	r2, #48	; 0x30
 800c590:	2a09      	cmp	r2, #9
 800c592:	d903      	bls.n	800c59c <_svfiprintf_r+0x1a8>
 800c594:	2b00      	cmp	r3, #0
 800c596:	d0c5      	beq.n	800c524 <_svfiprintf_r+0x130>
 800c598:	9105      	str	r1, [sp, #20]
 800c59a:	e7c3      	b.n	800c524 <_svfiprintf_r+0x130>
 800c59c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e7f0      	b.n	800c588 <_svfiprintf_r+0x194>
 800c5a6:	ab03      	add	r3, sp, #12
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	462a      	mov	r2, r5
 800c5ac:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <_svfiprintf_r+0x1f8>)
 800c5ae:	a904      	add	r1, sp, #16
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	f7fe f895 	bl	800a6e0 <_printf_float>
 800c5b6:	1c42      	adds	r2, r0, #1
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	d1d6      	bne.n	800c56a <_svfiprintf_r+0x176>
 800c5bc:	89ab      	ldrh	r3, [r5, #12]
 800c5be:	065b      	lsls	r3, r3, #25
 800c5c0:	f53f af2c 	bmi.w	800c41c <_svfiprintf_r+0x28>
 800c5c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5c6:	b01d      	add	sp, #116	; 0x74
 800c5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5cc:	ab03      	add	r3, sp, #12
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	462a      	mov	r2, r5
 800c5d2:	4b06      	ldr	r3, [pc, #24]	; (800c5ec <_svfiprintf_r+0x1f8>)
 800c5d4:	a904      	add	r1, sp, #16
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	f7fe fb26 	bl	800ac28 <_printf_i>
 800c5dc:	e7eb      	b.n	800c5b6 <_svfiprintf_r+0x1c2>
 800c5de:	bf00      	nop
 800c5e0:	0800decc 	.word	0x0800decc
 800c5e4:	0800ded6 	.word	0x0800ded6
 800c5e8:	0800a6e1 	.word	0x0800a6e1
 800c5ec:	0800c33d 	.word	0x0800c33d
 800c5f0:	0800ded2 	.word	0x0800ded2

0800c5f4 <__assert_func>:
 800c5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5f6:	4614      	mov	r4, r2
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	4b09      	ldr	r3, [pc, #36]	; (800c620 <__assert_func+0x2c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4605      	mov	r5, r0
 800c600:	68d8      	ldr	r0, [r3, #12]
 800c602:	b14c      	cbz	r4, 800c618 <__assert_func+0x24>
 800c604:	4b07      	ldr	r3, [pc, #28]	; (800c624 <__assert_func+0x30>)
 800c606:	9100      	str	r1, [sp, #0]
 800c608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c60c:	4906      	ldr	r1, [pc, #24]	; (800c628 <__assert_func+0x34>)
 800c60e:	462b      	mov	r3, r5
 800c610:	f000 f80e 	bl	800c630 <fiprintf>
 800c614:	f000 faa4 	bl	800cb60 <abort>
 800c618:	4b04      	ldr	r3, [pc, #16]	; (800c62c <__assert_func+0x38>)
 800c61a:	461c      	mov	r4, r3
 800c61c:	e7f3      	b.n	800c606 <__assert_func+0x12>
 800c61e:	bf00      	nop
 800c620:	2000001c 	.word	0x2000001c
 800c624:	0800dedd 	.word	0x0800dedd
 800c628:	0800deea 	.word	0x0800deea
 800c62c:	0800df18 	.word	0x0800df18

0800c630 <fiprintf>:
 800c630:	b40e      	push	{r1, r2, r3}
 800c632:	b503      	push	{r0, r1, lr}
 800c634:	4601      	mov	r1, r0
 800c636:	ab03      	add	r3, sp, #12
 800c638:	4805      	ldr	r0, [pc, #20]	; (800c650 <fiprintf+0x20>)
 800c63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c63e:	6800      	ldr	r0, [r0, #0]
 800c640:	9301      	str	r3, [sp, #4]
 800c642:	f000 f88f 	bl	800c764 <_vfiprintf_r>
 800c646:	b002      	add	sp, #8
 800c648:	f85d eb04 	ldr.w	lr, [sp], #4
 800c64c:	b003      	add	sp, #12
 800c64e:	4770      	bx	lr
 800c650:	2000001c 	.word	0x2000001c

0800c654 <__retarget_lock_init_recursive>:
 800c654:	4770      	bx	lr

0800c656 <__retarget_lock_acquire_recursive>:
 800c656:	4770      	bx	lr

0800c658 <__retarget_lock_release_recursive>:
 800c658:	4770      	bx	lr

0800c65a <__ascii_mbtowc>:
 800c65a:	b082      	sub	sp, #8
 800c65c:	b901      	cbnz	r1, 800c660 <__ascii_mbtowc+0x6>
 800c65e:	a901      	add	r1, sp, #4
 800c660:	b142      	cbz	r2, 800c674 <__ascii_mbtowc+0x1a>
 800c662:	b14b      	cbz	r3, 800c678 <__ascii_mbtowc+0x1e>
 800c664:	7813      	ldrb	r3, [r2, #0]
 800c666:	600b      	str	r3, [r1, #0]
 800c668:	7812      	ldrb	r2, [r2, #0]
 800c66a:	1e10      	subs	r0, r2, #0
 800c66c:	bf18      	it	ne
 800c66e:	2001      	movne	r0, #1
 800c670:	b002      	add	sp, #8
 800c672:	4770      	bx	lr
 800c674:	4610      	mov	r0, r2
 800c676:	e7fb      	b.n	800c670 <__ascii_mbtowc+0x16>
 800c678:	f06f 0001 	mvn.w	r0, #1
 800c67c:	e7f8      	b.n	800c670 <__ascii_mbtowc+0x16>

0800c67e <memmove>:
 800c67e:	4288      	cmp	r0, r1
 800c680:	b510      	push	{r4, lr}
 800c682:	eb01 0402 	add.w	r4, r1, r2
 800c686:	d902      	bls.n	800c68e <memmove+0x10>
 800c688:	4284      	cmp	r4, r0
 800c68a:	4623      	mov	r3, r4
 800c68c:	d807      	bhi.n	800c69e <memmove+0x20>
 800c68e:	1e43      	subs	r3, r0, #1
 800c690:	42a1      	cmp	r1, r4
 800c692:	d008      	beq.n	800c6a6 <memmove+0x28>
 800c694:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c698:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c69c:	e7f8      	b.n	800c690 <memmove+0x12>
 800c69e:	4402      	add	r2, r0
 800c6a0:	4601      	mov	r1, r0
 800c6a2:	428a      	cmp	r2, r1
 800c6a4:	d100      	bne.n	800c6a8 <memmove+0x2a>
 800c6a6:	bd10      	pop	{r4, pc}
 800c6a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6b0:	e7f7      	b.n	800c6a2 <memmove+0x24>

0800c6b2 <_realloc_r>:
 800c6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	460e      	mov	r6, r1
 800c6bc:	b921      	cbnz	r1, 800c6c8 <_realloc_r+0x16>
 800c6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	f7fd bef8 	b.w	800a4b8 <_malloc_r>
 800c6c8:	b92a      	cbnz	r2, 800c6d6 <_realloc_r+0x24>
 800c6ca:	f7fd fe89 	bl	800a3e0 <_free_r>
 800c6ce:	4625      	mov	r5, r4
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d6:	f000 fc67 	bl	800cfa8 <_malloc_usable_size_r>
 800c6da:	4284      	cmp	r4, r0
 800c6dc:	4607      	mov	r7, r0
 800c6de:	d802      	bhi.n	800c6e6 <_realloc_r+0x34>
 800c6e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6e4:	d812      	bhi.n	800c70c <_realloc_r+0x5a>
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4640      	mov	r0, r8
 800c6ea:	f7fd fee5 	bl	800a4b8 <_malloc_r>
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d0ed      	beq.n	800c6d0 <_realloc_r+0x1e>
 800c6f4:	42bc      	cmp	r4, r7
 800c6f6:	4622      	mov	r2, r4
 800c6f8:	4631      	mov	r1, r6
 800c6fa:	bf28      	it	cs
 800c6fc:	463a      	movcs	r2, r7
 800c6fe:	f7ff fa69 	bl	800bbd4 <memcpy>
 800c702:	4631      	mov	r1, r6
 800c704:	4640      	mov	r0, r8
 800c706:	f7fd fe6b 	bl	800a3e0 <_free_r>
 800c70a:	e7e1      	b.n	800c6d0 <_realloc_r+0x1e>
 800c70c:	4635      	mov	r5, r6
 800c70e:	e7df      	b.n	800c6d0 <_realloc_r+0x1e>

0800c710 <__sfputc_r>:
 800c710:	6893      	ldr	r3, [r2, #8]
 800c712:	3b01      	subs	r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	b410      	push	{r4}
 800c718:	6093      	str	r3, [r2, #8]
 800c71a:	da08      	bge.n	800c72e <__sfputc_r+0x1e>
 800c71c:	6994      	ldr	r4, [r2, #24]
 800c71e:	42a3      	cmp	r3, r4
 800c720:	db01      	blt.n	800c726 <__sfputc_r+0x16>
 800c722:	290a      	cmp	r1, #10
 800c724:	d103      	bne.n	800c72e <__sfputc_r+0x1e>
 800c726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c72a:	f000 b94b 	b.w	800c9c4 <__swbuf_r>
 800c72e:	6813      	ldr	r3, [r2, #0]
 800c730:	1c58      	adds	r0, r3, #1
 800c732:	6010      	str	r0, [r2, #0]
 800c734:	7019      	strb	r1, [r3, #0]
 800c736:	4608      	mov	r0, r1
 800c738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <__sfputs_r>:
 800c73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c740:	4606      	mov	r6, r0
 800c742:	460f      	mov	r7, r1
 800c744:	4614      	mov	r4, r2
 800c746:	18d5      	adds	r5, r2, r3
 800c748:	42ac      	cmp	r4, r5
 800c74a:	d101      	bne.n	800c750 <__sfputs_r+0x12>
 800c74c:	2000      	movs	r0, #0
 800c74e:	e007      	b.n	800c760 <__sfputs_r+0x22>
 800c750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c754:	463a      	mov	r2, r7
 800c756:	4630      	mov	r0, r6
 800c758:	f7ff ffda 	bl	800c710 <__sfputc_r>
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	d1f3      	bne.n	800c748 <__sfputs_r+0xa>
 800c760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c764 <_vfiprintf_r>:
 800c764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c768:	460d      	mov	r5, r1
 800c76a:	b09d      	sub	sp, #116	; 0x74
 800c76c:	4614      	mov	r4, r2
 800c76e:	4698      	mov	r8, r3
 800c770:	4606      	mov	r6, r0
 800c772:	b118      	cbz	r0, 800c77c <_vfiprintf_r+0x18>
 800c774:	6983      	ldr	r3, [r0, #24]
 800c776:	b90b      	cbnz	r3, 800c77c <_vfiprintf_r+0x18>
 800c778:	f000 fb14 	bl	800cda4 <__sinit>
 800c77c:	4b89      	ldr	r3, [pc, #548]	; (800c9a4 <_vfiprintf_r+0x240>)
 800c77e:	429d      	cmp	r5, r3
 800c780:	d11b      	bne.n	800c7ba <_vfiprintf_r+0x56>
 800c782:	6875      	ldr	r5, [r6, #4]
 800c784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c786:	07d9      	lsls	r1, r3, #31
 800c788:	d405      	bmi.n	800c796 <_vfiprintf_r+0x32>
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	059a      	lsls	r2, r3, #22
 800c78e:	d402      	bmi.n	800c796 <_vfiprintf_r+0x32>
 800c790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c792:	f7ff ff60 	bl	800c656 <__retarget_lock_acquire_recursive>
 800c796:	89ab      	ldrh	r3, [r5, #12]
 800c798:	071b      	lsls	r3, r3, #28
 800c79a:	d501      	bpl.n	800c7a0 <_vfiprintf_r+0x3c>
 800c79c:	692b      	ldr	r3, [r5, #16]
 800c79e:	b9eb      	cbnz	r3, 800c7dc <_vfiprintf_r+0x78>
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f000 f96e 	bl	800ca84 <__swsetup_r>
 800c7a8:	b1c0      	cbz	r0, 800c7dc <_vfiprintf_r+0x78>
 800c7aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7ac:	07dc      	lsls	r4, r3, #31
 800c7ae:	d50e      	bpl.n	800c7ce <_vfiprintf_r+0x6a>
 800c7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7b4:	b01d      	add	sp, #116	; 0x74
 800c7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ba:	4b7b      	ldr	r3, [pc, #492]	; (800c9a8 <_vfiprintf_r+0x244>)
 800c7bc:	429d      	cmp	r5, r3
 800c7be:	d101      	bne.n	800c7c4 <_vfiprintf_r+0x60>
 800c7c0:	68b5      	ldr	r5, [r6, #8]
 800c7c2:	e7df      	b.n	800c784 <_vfiprintf_r+0x20>
 800c7c4:	4b79      	ldr	r3, [pc, #484]	; (800c9ac <_vfiprintf_r+0x248>)
 800c7c6:	429d      	cmp	r5, r3
 800c7c8:	bf08      	it	eq
 800c7ca:	68f5      	ldreq	r5, [r6, #12]
 800c7cc:	e7da      	b.n	800c784 <_vfiprintf_r+0x20>
 800c7ce:	89ab      	ldrh	r3, [r5, #12]
 800c7d0:	0598      	lsls	r0, r3, #22
 800c7d2:	d4ed      	bmi.n	800c7b0 <_vfiprintf_r+0x4c>
 800c7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7d6:	f7ff ff3f 	bl	800c658 <__retarget_lock_release_recursive>
 800c7da:	e7e9      	b.n	800c7b0 <_vfiprintf_r+0x4c>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e0:	2320      	movs	r3, #32
 800c7e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ea:	2330      	movs	r3, #48	; 0x30
 800c7ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c9b0 <_vfiprintf_r+0x24c>
 800c7f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7f4:	f04f 0901 	mov.w	r9, #1
 800c7f8:	4623      	mov	r3, r4
 800c7fa:	469a      	mov	sl, r3
 800c7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c800:	b10a      	cbz	r2, 800c806 <_vfiprintf_r+0xa2>
 800c802:	2a25      	cmp	r2, #37	; 0x25
 800c804:	d1f9      	bne.n	800c7fa <_vfiprintf_r+0x96>
 800c806:	ebba 0b04 	subs.w	fp, sl, r4
 800c80a:	d00b      	beq.n	800c824 <_vfiprintf_r+0xc0>
 800c80c:	465b      	mov	r3, fp
 800c80e:	4622      	mov	r2, r4
 800c810:	4629      	mov	r1, r5
 800c812:	4630      	mov	r0, r6
 800c814:	f7ff ff93 	bl	800c73e <__sfputs_r>
 800c818:	3001      	adds	r0, #1
 800c81a:	f000 80aa 	beq.w	800c972 <_vfiprintf_r+0x20e>
 800c81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c820:	445a      	add	r2, fp
 800c822:	9209      	str	r2, [sp, #36]	; 0x24
 800c824:	f89a 3000 	ldrb.w	r3, [sl]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 80a2 	beq.w	800c972 <_vfiprintf_r+0x20e>
 800c82e:	2300      	movs	r3, #0
 800c830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c838:	f10a 0a01 	add.w	sl, sl, #1
 800c83c:	9304      	str	r3, [sp, #16]
 800c83e:	9307      	str	r3, [sp, #28]
 800c840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c844:	931a      	str	r3, [sp, #104]	; 0x68
 800c846:	4654      	mov	r4, sl
 800c848:	2205      	movs	r2, #5
 800c84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c84e:	4858      	ldr	r0, [pc, #352]	; (800c9b0 <_vfiprintf_r+0x24c>)
 800c850:	f7f3 fcc6 	bl	80001e0 <memchr>
 800c854:	9a04      	ldr	r2, [sp, #16]
 800c856:	b9d8      	cbnz	r0, 800c890 <_vfiprintf_r+0x12c>
 800c858:	06d1      	lsls	r1, r2, #27
 800c85a:	bf44      	itt	mi
 800c85c:	2320      	movmi	r3, #32
 800c85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c862:	0713      	lsls	r3, r2, #28
 800c864:	bf44      	itt	mi
 800c866:	232b      	movmi	r3, #43	; 0x2b
 800c868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c86c:	f89a 3000 	ldrb.w	r3, [sl]
 800c870:	2b2a      	cmp	r3, #42	; 0x2a
 800c872:	d015      	beq.n	800c8a0 <_vfiprintf_r+0x13c>
 800c874:	9a07      	ldr	r2, [sp, #28]
 800c876:	4654      	mov	r4, sl
 800c878:	2000      	movs	r0, #0
 800c87a:	f04f 0c0a 	mov.w	ip, #10
 800c87e:	4621      	mov	r1, r4
 800c880:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c884:	3b30      	subs	r3, #48	; 0x30
 800c886:	2b09      	cmp	r3, #9
 800c888:	d94e      	bls.n	800c928 <_vfiprintf_r+0x1c4>
 800c88a:	b1b0      	cbz	r0, 800c8ba <_vfiprintf_r+0x156>
 800c88c:	9207      	str	r2, [sp, #28]
 800c88e:	e014      	b.n	800c8ba <_vfiprintf_r+0x156>
 800c890:	eba0 0308 	sub.w	r3, r0, r8
 800c894:	fa09 f303 	lsl.w	r3, r9, r3
 800c898:	4313      	orrs	r3, r2
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	46a2      	mov	sl, r4
 800c89e:	e7d2      	b.n	800c846 <_vfiprintf_r+0xe2>
 800c8a0:	9b03      	ldr	r3, [sp, #12]
 800c8a2:	1d19      	adds	r1, r3, #4
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	9103      	str	r1, [sp, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	bfbb      	ittet	lt
 800c8ac:	425b      	neglt	r3, r3
 800c8ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c8b2:	9307      	strge	r3, [sp, #28]
 800c8b4:	9307      	strlt	r3, [sp, #28]
 800c8b6:	bfb8      	it	lt
 800c8b8:	9204      	strlt	r2, [sp, #16]
 800c8ba:	7823      	ldrb	r3, [r4, #0]
 800c8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c8be:	d10c      	bne.n	800c8da <_vfiprintf_r+0x176>
 800c8c0:	7863      	ldrb	r3, [r4, #1]
 800c8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c4:	d135      	bne.n	800c932 <_vfiprintf_r+0x1ce>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	1d1a      	adds	r2, r3, #4
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	9203      	str	r2, [sp, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bfb8      	it	lt
 800c8d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8d6:	3402      	adds	r4, #2
 800c8d8:	9305      	str	r3, [sp, #20]
 800c8da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c9c0 <_vfiprintf_r+0x25c>
 800c8de:	7821      	ldrb	r1, [r4, #0]
 800c8e0:	2203      	movs	r2, #3
 800c8e2:	4650      	mov	r0, sl
 800c8e4:	f7f3 fc7c 	bl	80001e0 <memchr>
 800c8e8:	b140      	cbz	r0, 800c8fc <_vfiprintf_r+0x198>
 800c8ea:	2340      	movs	r3, #64	; 0x40
 800c8ec:	eba0 000a 	sub.w	r0, r0, sl
 800c8f0:	fa03 f000 	lsl.w	r0, r3, r0
 800c8f4:	9b04      	ldr	r3, [sp, #16]
 800c8f6:	4303      	orrs	r3, r0
 800c8f8:	3401      	adds	r4, #1
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c900:	482c      	ldr	r0, [pc, #176]	; (800c9b4 <_vfiprintf_r+0x250>)
 800c902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c906:	2206      	movs	r2, #6
 800c908:	f7f3 fc6a 	bl	80001e0 <memchr>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d03f      	beq.n	800c990 <_vfiprintf_r+0x22c>
 800c910:	4b29      	ldr	r3, [pc, #164]	; (800c9b8 <_vfiprintf_r+0x254>)
 800c912:	bb1b      	cbnz	r3, 800c95c <_vfiprintf_r+0x1f8>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	3307      	adds	r3, #7
 800c918:	f023 0307 	bic.w	r3, r3, #7
 800c91c:	3308      	adds	r3, #8
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c922:	443b      	add	r3, r7
 800c924:	9309      	str	r3, [sp, #36]	; 0x24
 800c926:	e767      	b.n	800c7f8 <_vfiprintf_r+0x94>
 800c928:	fb0c 3202 	mla	r2, ip, r2, r3
 800c92c:	460c      	mov	r4, r1
 800c92e:	2001      	movs	r0, #1
 800c930:	e7a5      	b.n	800c87e <_vfiprintf_r+0x11a>
 800c932:	2300      	movs	r3, #0
 800c934:	3401      	adds	r4, #1
 800c936:	9305      	str	r3, [sp, #20]
 800c938:	4619      	mov	r1, r3
 800c93a:	f04f 0c0a 	mov.w	ip, #10
 800c93e:	4620      	mov	r0, r4
 800c940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c944:	3a30      	subs	r2, #48	; 0x30
 800c946:	2a09      	cmp	r2, #9
 800c948:	d903      	bls.n	800c952 <_vfiprintf_r+0x1ee>
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0c5      	beq.n	800c8da <_vfiprintf_r+0x176>
 800c94e:	9105      	str	r1, [sp, #20]
 800c950:	e7c3      	b.n	800c8da <_vfiprintf_r+0x176>
 800c952:	fb0c 2101 	mla	r1, ip, r1, r2
 800c956:	4604      	mov	r4, r0
 800c958:	2301      	movs	r3, #1
 800c95a:	e7f0      	b.n	800c93e <_vfiprintf_r+0x1da>
 800c95c:	ab03      	add	r3, sp, #12
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	462a      	mov	r2, r5
 800c962:	4b16      	ldr	r3, [pc, #88]	; (800c9bc <_vfiprintf_r+0x258>)
 800c964:	a904      	add	r1, sp, #16
 800c966:	4630      	mov	r0, r6
 800c968:	f7fd feba 	bl	800a6e0 <_printf_float>
 800c96c:	4607      	mov	r7, r0
 800c96e:	1c78      	adds	r0, r7, #1
 800c970:	d1d6      	bne.n	800c920 <_vfiprintf_r+0x1bc>
 800c972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c974:	07d9      	lsls	r1, r3, #31
 800c976:	d405      	bmi.n	800c984 <_vfiprintf_r+0x220>
 800c978:	89ab      	ldrh	r3, [r5, #12]
 800c97a:	059a      	lsls	r2, r3, #22
 800c97c:	d402      	bmi.n	800c984 <_vfiprintf_r+0x220>
 800c97e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c980:	f7ff fe6a 	bl	800c658 <__retarget_lock_release_recursive>
 800c984:	89ab      	ldrh	r3, [r5, #12]
 800c986:	065b      	lsls	r3, r3, #25
 800c988:	f53f af12 	bmi.w	800c7b0 <_vfiprintf_r+0x4c>
 800c98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c98e:	e711      	b.n	800c7b4 <_vfiprintf_r+0x50>
 800c990:	ab03      	add	r3, sp, #12
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	462a      	mov	r2, r5
 800c996:	4b09      	ldr	r3, [pc, #36]	; (800c9bc <_vfiprintf_r+0x258>)
 800c998:	a904      	add	r1, sp, #16
 800c99a:	4630      	mov	r0, r6
 800c99c:	f7fe f944 	bl	800ac28 <_printf_i>
 800c9a0:	e7e4      	b.n	800c96c <_vfiprintf_r+0x208>
 800c9a2:	bf00      	nop
 800c9a4:	0800e044 	.word	0x0800e044
 800c9a8:	0800e064 	.word	0x0800e064
 800c9ac:	0800e024 	.word	0x0800e024
 800c9b0:	0800decc 	.word	0x0800decc
 800c9b4:	0800ded6 	.word	0x0800ded6
 800c9b8:	0800a6e1 	.word	0x0800a6e1
 800c9bc:	0800c73f 	.word	0x0800c73f
 800c9c0:	0800ded2 	.word	0x0800ded2

0800c9c4 <__swbuf_r>:
 800c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c6:	460e      	mov	r6, r1
 800c9c8:	4614      	mov	r4, r2
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	b118      	cbz	r0, 800c9d6 <__swbuf_r+0x12>
 800c9ce:	6983      	ldr	r3, [r0, #24]
 800c9d0:	b90b      	cbnz	r3, 800c9d6 <__swbuf_r+0x12>
 800c9d2:	f000 f9e7 	bl	800cda4 <__sinit>
 800c9d6:	4b21      	ldr	r3, [pc, #132]	; (800ca5c <__swbuf_r+0x98>)
 800c9d8:	429c      	cmp	r4, r3
 800c9da:	d12b      	bne.n	800ca34 <__swbuf_r+0x70>
 800c9dc:	686c      	ldr	r4, [r5, #4]
 800c9de:	69a3      	ldr	r3, [r4, #24]
 800c9e0:	60a3      	str	r3, [r4, #8]
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	071a      	lsls	r2, r3, #28
 800c9e6:	d52f      	bpl.n	800ca48 <__swbuf_r+0x84>
 800c9e8:	6923      	ldr	r3, [r4, #16]
 800c9ea:	b36b      	cbz	r3, 800ca48 <__swbuf_r+0x84>
 800c9ec:	6923      	ldr	r3, [r4, #16]
 800c9ee:	6820      	ldr	r0, [r4, #0]
 800c9f0:	1ac0      	subs	r0, r0, r3
 800c9f2:	6963      	ldr	r3, [r4, #20]
 800c9f4:	b2f6      	uxtb	r6, r6
 800c9f6:	4283      	cmp	r3, r0
 800c9f8:	4637      	mov	r7, r6
 800c9fa:	dc04      	bgt.n	800ca06 <__swbuf_r+0x42>
 800c9fc:	4621      	mov	r1, r4
 800c9fe:	4628      	mov	r0, r5
 800ca00:	f000 f93c 	bl	800cc7c <_fflush_r>
 800ca04:	bb30      	cbnz	r0, 800ca54 <__swbuf_r+0x90>
 800ca06:	68a3      	ldr	r3, [r4, #8]
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	60a3      	str	r3, [r4, #8]
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	1c5a      	adds	r2, r3, #1
 800ca10:	6022      	str	r2, [r4, #0]
 800ca12:	701e      	strb	r6, [r3, #0]
 800ca14:	6963      	ldr	r3, [r4, #20]
 800ca16:	3001      	adds	r0, #1
 800ca18:	4283      	cmp	r3, r0
 800ca1a:	d004      	beq.n	800ca26 <__swbuf_r+0x62>
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	07db      	lsls	r3, r3, #31
 800ca20:	d506      	bpl.n	800ca30 <__swbuf_r+0x6c>
 800ca22:	2e0a      	cmp	r6, #10
 800ca24:	d104      	bne.n	800ca30 <__swbuf_r+0x6c>
 800ca26:	4621      	mov	r1, r4
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f000 f927 	bl	800cc7c <_fflush_r>
 800ca2e:	b988      	cbnz	r0, 800ca54 <__swbuf_r+0x90>
 800ca30:	4638      	mov	r0, r7
 800ca32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca34:	4b0a      	ldr	r3, [pc, #40]	; (800ca60 <__swbuf_r+0x9c>)
 800ca36:	429c      	cmp	r4, r3
 800ca38:	d101      	bne.n	800ca3e <__swbuf_r+0x7a>
 800ca3a:	68ac      	ldr	r4, [r5, #8]
 800ca3c:	e7cf      	b.n	800c9de <__swbuf_r+0x1a>
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <__swbuf_r+0xa0>)
 800ca40:	429c      	cmp	r4, r3
 800ca42:	bf08      	it	eq
 800ca44:	68ec      	ldreq	r4, [r5, #12]
 800ca46:	e7ca      	b.n	800c9de <__swbuf_r+0x1a>
 800ca48:	4621      	mov	r1, r4
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f000 f81a 	bl	800ca84 <__swsetup_r>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d0cb      	beq.n	800c9ec <__swbuf_r+0x28>
 800ca54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ca58:	e7ea      	b.n	800ca30 <__swbuf_r+0x6c>
 800ca5a:	bf00      	nop
 800ca5c:	0800e044 	.word	0x0800e044
 800ca60:	0800e064 	.word	0x0800e064
 800ca64:	0800e024 	.word	0x0800e024

0800ca68 <__ascii_wctomb>:
 800ca68:	b149      	cbz	r1, 800ca7e <__ascii_wctomb+0x16>
 800ca6a:	2aff      	cmp	r2, #255	; 0xff
 800ca6c:	bf85      	ittet	hi
 800ca6e:	238a      	movhi	r3, #138	; 0x8a
 800ca70:	6003      	strhi	r3, [r0, #0]
 800ca72:	700a      	strbls	r2, [r1, #0]
 800ca74:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ca78:	bf98      	it	ls
 800ca7a:	2001      	movls	r0, #1
 800ca7c:	4770      	bx	lr
 800ca7e:	4608      	mov	r0, r1
 800ca80:	4770      	bx	lr
	...

0800ca84 <__swsetup_r>:
 800ca84:	4b32      	ldr	r3, [pc, #200]	; (800cb50 <__swsetup_r+0xcc>)
 800ca86:	b570      	push	{r4, r5, r6, lr}
 800ca88:	681d      	ldr	r5, [r3, #0]
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	b125      	cbz	r5, 800ca9a <__swsetup_r+0x16>
 800ca90:	69ab      	ldr	r3, [r5, #24]
 800ca92:	b913      	cbnz	r3, 800ca9a <__swsetup_r+0x16>
 800ca94:	4628      	mov	r0, r5
 800ca96:	f000 f985 	bl	800cda4 <__sinit>
 800ca9a:	4b2e      	ldr	r3, [pc, #184]	; (800cb54 <__swsetup_r+0xd0>)
 800ca9c:	429c      	cmp	r4, r3
 800ca9e:	d10f      	bne.n	800cac0 <__swsetup_r+0x3c>
 800caa0:	686c      	ldr	r4, [r5, #4]
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caa8:	0719      	lsls	r1, r3, #28
 800caaa:	d42c      	bmi.n	800cb06 <__swsetup_r+0x82>
 800caac:	06dd      	lsls	r5, r3, #27
 800caae:	d411      	bmi.n	800cad4 <__swsetup_r+0x50>
 800cab0:	2309      	movs	r3, #9
 800cab2:	6033      	str	r3, [r6, #0]
 800cab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cab8:	81a3      	strh	r3, [r4, #12]
 800caba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cabe:	e03e      	b.n	800cb3e <__swsetup_r+0xba>
 800cac0:	4b25      	ldr	r3, [pc, #148]	; (800cb58 <__swsetup_r+0xd4>)
 800cac2:	429c      	cmp	r4, r3
 800cac4:	d101      	bne.n	800caca <__swsetup_r+0x46>
 800cac6:	68ac      	ldr	r4, [r5, #8]
 800cac8:	e7eb      	b.n	800caa2 <__swsetup_r+0x1e>
 800caca:	4b24      	ldr	r3, [pc, #144]	; (800cb5c <__swsetup_r+0xd8>)
 800cacc:	429c      	cmp	r4, r3
 800cace:	bf08      	it	eq
 800cad0:	68ec      	ldreq	r4, [r5, #12]
 800cad2:	e7e6      	b.n	800caa2 <__swsetup_r+0x1e>
 800cad4:	0758      	lsls	r0, r3, #29
 800cad6:	d512      	bpl.n	800cafe <__swsetup_r+0x7a>
 800cad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cada:	b141      	cbz	r1, 800caee <__swsetup_r+0x6a>
 800cadc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cae0:	4299      	cmp	r1, r3
 800cae2:	d002      	beq.n	800caea <__swsetup_r+0x66>
 800cae4:	4630      	mov	r0, r6
 800cae6:	f7fd fc7b 	bl	800a3e0 <_free_r>
 800caea:	2300      	movs	r3, #0
 800caec:	6363      	str	r3, [r4, #52]	; 0x34
 800caee:	89a3      	ldrh	r3, [r4, #12]
 800caf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800caf4:	81a3      	strh	r3, [r4, #12]
 800caf6:	2300      	movs	r3, #0
 800caf8:	6063      	str	r3, [r4, #4]
 800cafa:	6923      	ldr	r3, [r4, #16]
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	89a3      	ldrh	r3, [r4, #12]
 800cb00:	f043 0308 	orr.w	r3, r3, #8
 800cb04:	81a3      	strh	r3, [r4, #12]
 800cb06:	6923      	ldr	r3, [r4, #16]
 800cb08:	b94b      	cbnz	r3, 800cb1e <__swsetup_r+0x9a>
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb14:	d003      	beq.n	800cb1e <__swsetup_r+0x9a>
 800cb16:	4621      	mov	r1, r4
 800cb18:	4630      	mov	r0, r6
 800cb1a:	f000 fa05 	bl	800cf28 <__smakebuf_r>
 800cb1e:	89a0      	ldrh	r0, [r4, #12]
 800cb20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb24:	f010 0301 	ands.w	r3, r0, #1
 800cb28:	d00a      	beq.n	800cb40 <__swsetup_r+0xbc>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60a3      	str	r3, [r4, #8]
 800cb2e:	6963      	ldr	r3, [r4, #20]
 800cb30:	425b      	negs	r3, r3
 800cb32:	61a3      	str	r3, [r4, #24]
 800cb34:	6923      	ldr	r3, [r4, #16]
 800cb36:	b943      	cbnz	r3, 800cb4a <__swsetup_r+0xc6>
 800cb38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb3c:	d1ba      	bne.n	800cab4 <__swsetup_r+0x30>
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	0781      	lsls	r1, r0, #30
 800cb42:	bf58      	it	pl
 800cb44:	6963      	ldrpl	r3, [r4, #20]
 800cb46:	60a3      	str	r3, [r4, #8]
 800cb48:	e7f4      	b.n	800cb34 <__swsetup_r+0xb0>
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	e7f7      	b.n	800cb3e <__swsetup_r+0xba>
 800cb4e:	bf00      	nop
 800cb50:	2000001c 	.word	0x2000001c
 800cb54:	0800e044 	.word	0x0800e044
 800cb58:	0800e064 	.word	0x0800e064
 800cb5c:	0800e024 	.word	0x0800e024

0800cb60 <abort>:
 800cb60:	b508      	push	{r3, lr}
 800cb62:	2006      	movs	r0, #6
 800cb64:	f000 fa50 	bl	800d008 <raise>
 800cb68:	2001      	movs	r0, #1
 800cb6a:	f7f6 fe87 	bl	800387c <_exit>
	...

0800cb70 <__sflush_r>:
 800cb70:	898a      	ldrh	r2, [r1, #12]
 800cb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb76:	4605      	mov	r5, r0
 800cb78:	0710      	lsls	r0, r2, #28
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	d458      	bmi.n	800cc30 <__sflush_r+0xc0>
 800cb7e:	684b      	ldr	r3, [r1, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	dc05      	bgt.n	800cb90 <__sflush_r+0x20>
 800cb84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	dc02      	bgt.n	800cb90 <__sflush_r+0x20>
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb92:	2e00      	cmp	r6, #0
 800cb94:	d0f9      	beq.n	800cb8a <__sflush_r+0x1a>
 800cb96:	2300      	movs	r3, #0
 800cb98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb9c:	682f      	ldr	r7, [r5, #0]
 800cb9e:	602b      	str	r3, [r5, #0]
 800cba0:	d032      	beq.n	800cc08 <__sflush_r+0x98>
 800cba2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	075a      	lsls	r2, r3, #29
 800cba8:	d505      	bpl.n	800cbb6 <__sflush_r+0x46>
 800cbaa:	6863      	ldr	r3, [r4, #4]
 800cbac:	1ac0      	subs	r0, r0, r3
 800cbae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbb0:	b10b      	cbz	r3, 800cbb6 <__sflush_r+0x46>
 800cbb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbb4:	1ac0      	subs	r0, r0, r3
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	4602      	mov	r2, r0
 800cbba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbbc:	6a21      	ldr	r1, [r4, #32]
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	47b0      	blx	r6
 800cbc2:	1c43      	adds	r3, r0, #1
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	d106      	bne.n	800cbd6 <__sflush_r+0x66>
 800cbc8:	6829      	ldr	r1, [r5, #0]
 800cbca:	291d      	cmp	r1, #29
 800cbcc:	d82c      	bhi.n	800cc28 <__sflush_r+0xb8>
 800cbce:	4a2a      	ldr	r2, [pc, #168]	; (800cc78 <__sflush_r+0x108>)
 800cbd0:	40ca      	lsrs	r2, r1
 800cbd2:	07d6      	lsls	r6, r2, #31
 800cbd4:	d528      	bpl.n	800cc28 <__sflush_r+0xb8>
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	6062      	str	r2, [r4, #4]
 800cbda:	04d9      	lsls	r1, r3, #19
 800cbdc:	6922      	ldr	r2, [r4, #16]
 800cbde:	6022      	str	r2, [r4, #0]
 800cbe0:	d504      	bpl.n	800cbec <__sflush_r+0x7c>
 800cbe2:	1c42      	adds	r2, r0, #1
 800cbe4:	d101      	bne.n	800cbea <__sflush_r+0x7a>
 800cbe6:	682b      	ldr	r3, [r5, #0]
 800cbe8:	b903      	cbnz	r3, 800cbec <__sflush_r+0x7c>
 800cbea:	6560      	str	r0, [r4, #84]	; 0x54
 800cbec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbee:	602f      	str	r7, [r5, #0]
 800cbf0:	2900      	cmp	r1, #0
 800cbf2:	d0ca      	beq.n	800cb8a <__sflush_r+0x1a>
 800cbf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbf8:	4299      	cmp	r1, r3
 800cbfa:	d002      	beq.n	800cc02 <__sflush_r+0x92>
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	f7fd fbef 	bl	800a3e0 <_free_r>
 800cc02:	2000      	movs	r0, #0
 800cc04:	6360      	str	r0, [r4, #52]	; 0x34
 800cc06:	e7c1      	b.n	800cb8c <__sflush_r+0x1c>
 800cc08:	6a21      	ldr	r1, [r4, #32]
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	47b0      	blx	r6
 800cc10:	1c41      	adds	r1, r0, #1
 800cc12:	d1c7      	bne.n	800cba4 <__sflush_r+0x34>
 800cc14:	682b      	ldr	r3, [r5, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d0c4      	beq.n	800cba4 <__sflush_r+0x34>
 800cc1a:	2b1d      	cmp	r3, #29
 800cc1c:	d001      	beq.n	800cc22 <__sflush_r+0xb2>
 800cc1e:	2b16      	cmp	r3, #22
 800cc20:	d101      	bne.n	800cc26 <__sflush_r+0xb6>
 800cc22:	602f      	str	r7, [r5, #0]
 800cc24:	e7b1      	b.n	800cb8a <__sflush_r+0x1a>
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc2c:	81a3      	strh	r3, [r4, #12]
 800cc2e:	e7ad      	b.n	800cb8c <__sflush_r+0x1c>
 800cc30:	690f      	ldr	r7, [r1, #16]
 800cc32:	2f00      	cmp	r7, #0
 800cc34:	d0a9      	beq.n	800cb8a <__sflush_r+0x1a>
 800cc36:	0793      	lsls	r3, r2, #30
 800cc38:	680e      	ldr	r6, [r1, #0]
 800cc3a:	bf08      	it	eq
 800cc3c:	694b      	ldreq	r3, [r1, #20]
 800cc3e:	600f      	str	r7, [r1, #0]
 800cc40:	bf18      	it	ne
 800cc42:	2300      	movne	r3, #0
 800cc44:	eba6 0807 	sub.w	r8, r6, r7
 800cc48:	608b      	str	r3, [r1, #8]
 800cc4a:	f1b8 0f00 	cmp.w	r8, #0
 800cc4e:	dd9c      	ble.n	800cb8a <__sflush_r+0x1a>
 800cc50:	6a21      	ldr	r1, [r4, #32]
 800cc52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc54:	4643      	mov	r3, r8
 800cc56:	463a      	mov	r2, r7
 800cc58:	4628      	mov	r0, r5
 800cc5a:	47b0      	blx	r6
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	dc06      	bgt.n	800cc6e <__sflush_r+0xfe>
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc66:	81a3      	strh	r3, [r4, #12]
 800cc68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc6c:	e78e      	b.n	800cb8c <__sflush_r+0x1c>
 800cc6e:	4407      	add	r7, r0
 800cc70:	eba8 0800 	sub.w	r8, r8, r0
 800cc74:	e7e9      	b.n	800cc4a <__sflush_r+0xda>
 800cc76:	bf00      	nop
 800cc78:	20400001 	.word	0x20400001

0800cc7c <_fflush_r>:
 800cc7c:	b538      	push	{r3, r4, r5, lr}
 800cc7e:	690b      	ldr	r3, [r1, #16]
 800cc80:	4605      	mov	r5, r0
 800cc82:	460c      	mov	r4, r1
 800cc84:	b913      	cbnz	r3, 800cc8c <_fflush_r+0x10>
 800cc86:	2500      	movs	r5, #0
 800cc88:	4628      	mov	r0, r5
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	b118      	cbz	r0, 800cc96 <_fflush_r+0x1a>
 800cc8e:	6983      	ldr	r3, [r0, #24]
 800cc90:	b90b      	cbnz	r3, 800cc96 <_fflush_r+0x1a>
 800cc92:	f000 f887 	bl	800cda4 <__sinit>
 800cc96:	4b14      	ldr	r3, [pc, #80]	; (800cce8 <_fflush_r+0x6c>)
 800cc98:	429c      	cmp	r4, r3
 800cc9a:	d11b      	bne.n	800ccd4 <_fflush_r+0x58>
 800cc9c:	686c      	ldr	r4, [r5, #4]
 800cc9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0ef      	beq.n	800cc86 <_fflush_r+0xa>
 800cca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cca8:	07d0      	lsls	r0, r2, #31
 800ccaa:	d404      	bmi.n	800ccb6 <_fflush_r+0x3a>
 800ccac:	0599      	lsls	r1, r3, #22
 800ccae:	d402      	bmi.n	800ccb6 <_fflush_r+0x3a>
 800ccb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccb2:	f7ff fcd0 	bl	800c656 <__retarget_lock_acquire_recursive>
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	4621      	mov	r1, r4
 800ccba:	f7ff ff59 	bl	800cb70 <__sflush_r>
 800ccbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccc0:	07da      	lsls	r2, r3, #31
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	d4e0      	bmi.n	800cc88 <_fflush_r+0xc>
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	059b      	lsls	r3, r3, #22
 800ccca:	d4dd      	bmi.n	800cc88 <_fflush_r+0xc>
 800cccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccce:	f7ff fcc3 	bl	800c658 <__retarget_lock_release_recursive>
 800ccd2:	e7d9      	b.n	800cc88 <_fflush_r+0xc>
 800ccd4:	4b05      	ldr	r3, [pc, #20]	; (800ccec <_fflush_r+0x70>)
 800ccd6:	429c      	cmp	r4, r3
 800ccd8:	d101      	bne.n	800ccde <_fflush_r+0x62>
 800ccda:	68ac      	ldr	r4, [r5, #8]
 800ccdc:	e7df      	b.n	800cc9e <_fflush_r+0x22>
 800ccde:	4b04      	ldr	r3, [pc, #16]	; (800ccf0 <_fflush_r+0x74>)
 800cce0:	429c      	cmp	r4, r3
 800cce2:	bf08      	it	eq
 800cce4:	68ec      	ldreq	r4, [r5, #12]
 800cce6:	e7da      	b.n	800cc9e <_fflush_r+0x22>
 800cce8:	0800e044 	.word	0x0800e044
 800ccec:	0800e064 	.word	0x0800e064
 800ccf0:	0800e024 	.word	0x0800e024

0800ccf4 <std>:
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	b510      	push	{r4, lr}
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	e9c0 3300 	strd	r3, r3, [r0]
 800ccfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd02:	6083      	str	r3, [r0, #8]
 800cd04:	8181      	strh	r1, [r0, #12]
 800cd06:	6643      	str	r3, [r0, #100]	; 0x64
 800cd08:	81c2      	strh	r2, [r0, #14]
 800cd0a:	6183      	str	r3, [r0, #24]
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	2208      	movs	r2, #8
 800cd10:	305c      	adds	r0, #92	; 0x5c
 800cd12:	f7fd fb5d 	bl	800a3d0 <memset>
 800cd16:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <std+0x38>)
 800cd18:	6263      	str	r3, [r4, #36]	; 0x24
 800cd1a:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <std+0x3c>)
 800cd1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd1e:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <std+0x40>)
 800cd20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd22:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <std+0x44>)
 800cd24:	6224      	str	r4, [r4, #32]
 800cd26:	6323      	str	r3, [r4, #48]	; 0x30
 800cd28:	bd10      	pop	{r4, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0800d041 	.word	0x0800d041
 800cd30:	0800d063 	.word	0x0800d063
 800cd34:	0800d09b 	.word	0x0800d09b
 800cd38:	0800d0bf 	.word	0x0800d0bf

0800cd3c <_cleanup_r>:
 800cd3c:	4901      	ldr	r1, [pc, #4]	; (800cd44 <_cleanup_r+0x8>)
 800cd3e:	f000 b8af 	b.w	800cea0 <_fwalk_reent>
 800cd42:	bf00      	nop
 800cd44:	0800cc7d 	.word	0x0800cc7d

0800cd48 <__sfmoreglue>:
 800cd48:	b570      	push	{r4, r5, r6, lr}
 800cd4a:	2268      	movs	r2, #104	; 0x68
 800cd4c:	1e4d      	subs	r5, r1, #1
 800cd4e:	4355      	muls	r5, r2
 800cd50:	460e      	mov	r6, r1
 800cd52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd56:	f7fd fbaf 	bl	800a4b8 <_malloc_r>
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	b140      	cbz	r0, 800cd70 <__sfmoreglue+0x28>
 800cd5e:	2100      	movs	r1, #0
 800cd60:	e9c0 1600 	strd	r1, r6, [r0]
 800cd64:	300c      	adds	r0, #12
 800cd66:	60a0      	str	r0, [r4, #8]
 800cd68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd6c:	f7fd fb30 	bl	800a3d0 <memset>
 800cd70:	4620      	mov	r0, r4
 800cd72:	bd70      	pop	{r4, r5, r6, pc}

0800cd74 <__sfp_lock_acquire>:
 800cd74:	4801      	ldr	r0, [pc, #4]	; (800cd7c <__sfp_lock_acquire+0x8>)
 800cd76:	f7ff bc6e 	b.w	800c656 <__retarget_lock_acquire_recursive>
 800cd7a:	bf00      	nop
 800cd7c:	20000565 	.word	0x20000565

0800cd80 <__sfp_lock_release>:
 800cd80:	4801      	ldr	r0, [pc, #4]	; (800cd88 <__sfp_lock_release+0x8>)
 800cd82:	f7ff bc69 	b.w	800c658 <__retarget_lock_release_recursive>
 800cd86:	bf00      	nop
 800cd88:	20000565 	.word	0x20000565

0800cd8c <__sinit_lock_acquire>:
 800cd8c:	4801      	ldr	r0, [pc, #4]	; (800cd94 <__sinit_lock_acquire+0x8>)
 800cd8e:	f7ff bc62 	b.w	800c656 <__retarget_lock_acquire_recursive>
 800cd92:	bf00      	nop
 800cd94:	20000566 	.word	0x20000566

0800cd98 <__sinit_lock_release>:
 800cd98:	4801      	ldr	r0, [pc, #4]	; (800cda0 <__sinit_lock_release+0x8>)
 800cd9a:	f7ff bc5d 	b.w	800c658 <__retarget_lock_release_recursive>
 800cd9e:	bf00      	nop
 800cda0:	20000566 	.word	0x20000566

0800cda4 <__sinit>:
 800cda4:	b510      	push	{r4, lr}
 800cda6:	4604      	mov	r4, r0
 800cda8:	f7ff fff0 	bl	800cd8c <__sinit_lock_acquire>
 800cdac:	69a3      	ldr	r3, [r4, #24]
 800cdae:	b11b      	cbz	r3, 800cdb8 <__sinit+0x14>
 800cdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdb4:	f7ff bff0 	b.w	800cd98 <__sinit_lock_release>
 800cdb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cdbc:	6523      	str	r3, [r4, #80]	; 0x50
 800cdbe:	4b13      	ldr	r3, [pc, #76]	; (800ce0c <__sinit+0x68>)
 800cdc0:	4a13      	ldr	r2, [pc, #76]	; (800ce10 <__sinit+0x6c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cdc6:	42a3      	cmp	r3, r4
 800cdc8:	bf04      	itt	eq
 800cdca:	2301      	moveq	r3, #1
 800cdcc:	61a3      	streq	r3, [r4, #24]
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 f820 	bl	800ce14 <__sfp>
 800cdd4:	6060      	str	r0, [r4, #4]
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 f81c 	bl	800ce14 <__sfp>
 800cddc:	60a0      	str	r0, [r4, #8]
 800cdde:	4620      	mov	r0, r4
 800cde0:	f000 f818 	bl	800ce14 <__sfp>
 800cde4:	2200      	movs	r2, #0
 800cde6:	60e0      	str	r0, [r4, #12]
 800cde8:	2104      	movs	r1, #4
 800cdea:	6860      	ldr	r0, [r4, #4]
 800cdec:	f7ff ff82 	bl	800ccf4 <std>
 800cdf0:	68a0      	ldr	r0, [r4, #8]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	2109      	movs	r1, #9
 800cdf6:	f7ff ff7d 	bl	800ccf4 <std>
 800cdfa:	68e0      	ldr	r0, [r4, #12]
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	2112      	movs	r1, #18
 800ce00:	f7ff ff78 	bl	800ccf4 <std>
 800ce04:	2301      	movs	r3, #1
 800ce06:	61a3      	str	r3, [r4, #24]
 800ce08:	e7d2      	b.n	800cdb0 <__sinit+0xc>
 800ce0a:	bf00      	nop
 800ce0c:	0800dcac 	.word	0x0800dcac
 800ce10:	0800cd3d 	.word	0x0800cd3d

0800ce14 <__sfp>:
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce16:	4607      	mov	r7, r0
 800ce18:	f7ff ffac 	bl	800cd74 <__sfp_lock_acquire>
 800ce1c:	4b1e      	ldr	r3, [pc, #120]	; (800ce98 <__sfp+0x84>)
 800ce1e:	681e      	ldr	r6, [r3, #0]
 800ce20:	69b3      	ldr	r3, [r6, #24]
 800ce22:	b913      	cbnz	r3, 800ce2a <__sfp+0x16>
 800ce24:	4630      	mov	r0, r6
 800ce26:	f7ff ffbd 	bl	800cda4 <__sinit>
 800ce2a:	3648      	adds	r6, #72	; 0x48
 800ce2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	d503      	bpl.n	800ce3c <__sfp+0x28>
 800ce34:	6833      	ldr	r3, [r6, #0]
 800ce36:	b30b      	cbz	r3, 800ce7c <__sfp+0x68>
 800ce38:	6836      	ldr	r6, [r6, #0]
 800ce3a:	e7f7      	b.n	800ce2c <__sfp+0x18>
 800ce3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce40:	b9d5      	cbnz	r5, 800ce78 <__sfp+0x64>
 800ce42:	4b16      	ldr	r3, [pc, #88]	; (800ce9c <__sfp+0x88>)
 800ce44:	60e3      	str	r3, [r4, #12]
 800ce46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce4a:	6665      	str	r5, [r4, #100]	; 0x64
 800ce4c:	f7ff fc02 	bl	800c654 <__retarget_lock_init_recursive>
 800ce50:	f7ff ff96 	bl	800cd80 <__sfp_lock_release>
 800ce54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce5c:	6025      	str	r5, [r4, #0]
 800ce5e:	61a5      	str	r5, [r4, #24]
 800ce60:	2208      	movs	r2, #8
 800ce62:	4629      	mov	r1, r5
 800ce64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce68:	f7fd fab2 	bl	800a3d0 <memset>
 800ce6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce74:	4620      	mov	r0, r4
 800ce76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce78:	3468      	adds	r4, #104	; 0x68
 800ce7a:	e7d9      	b.n	800ce30 <__sfp+0x1c>
 800ce7c:	2104      	movs	r1, #4
 800ce7e:	4638      	mov	r0, r7
 800ce80:	f7ff ff62 	bl	800cd48 <__sfmoreglue>
 800ce84:	4604      	mov	r4, r0
 800ce86:	6030      	str	r0, [r6, #0]
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d1d5      	bne.n	800ce38 <__sfp+0x24>
 800ce8c:	f7ff ff78 	bl	800cd80 <__sfp_lock_release>
 800ce90:	230c      	movs	r3, #12
 800ce92:	603b      	str	r3, [r7, #0]
 800ce94:	e7ee      	b.n	800ce74 <__sfp+0x60>
 800ce96:	bf00      	nop
 800ce98:	0800dcac 	.word	0x0800dcac
 800ce9c:	ffff0001 	.word	0xffff0001

0800cea0 <_fwalk_reent>:
 800cea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cea4:	4606      	mov	r6, r0
 800cea6:	4688      	mov	r8, r1
 800cea8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ceac:	2700      	movs	r7, #0
 800ceae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ceb2:	f1b9 0901 	subs.w	r9, r9, #1
 800ceb6:	d505      	bpl.n	800cec4 <_fwalk_reent+0x24>
 800ceb8:	6824      	ldr	r4, [r4, #0]
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	d1f7      	bne.n	800ceae <_fwalk_reent+0xe>
 800cebe:	4638      	mov	r0, r7
 800cec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cec4:	89ab      	ldrh	r3, [r5, #12]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d907      	bls.n	800ceda <_fwalk_reent+0x3a>
 800ceca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cece:	3301      	adds	r3, #1
 800ced0:	d003      	beq.n	800ceda <_fwalk_reent+0x3a>
 800ced2:	4629      	mov	r1, r5
 800ced4:	4630      	mov	r0, r6
 800ced6:	47c0      	blx	r8
 800ced8:	4307      	orrs	r7, r0
 800ceda:	3568      	adds	r5, #104	; 0x68
 800cedc:	e7e9      	b.n	800ceb2 <_fwalk_reent+0x12>

0800cede <__swhatbuf_r>:
 800cede:	b570      	push	{r4, r5, r6, lr}
 800cee0:	460e      	mov	r6, r1
 800cee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee6:	2900      	cmp	r1, #0
 800cee8:	b096      	sub	sp, #88	; 0x58
 800ceea:	4614      	mov	r4, r2
 800ceec:	461d      	mov	r5, r3
 800ceee:	da08      	bge.n	800cf02 <__swhatbuf_r+0x24>
 800cef0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	602a      	str	r2, [r5, #0]
 800cef8:	061a      	lsls	r2, r3, #24
 800cefa:	d410      	bmi.n	800cf1e <__swhatbuf_r+0x40>
 800cefc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf00:	e00e      	b.n	800cf20 <__swhatbuf_r+0x42>
 800cf02:	466a      	mov	r2, sp
 800cf04:	f000 f902 	bl	800d10c <_fstat_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	dbf1      	blt.n	800cef0 <__swhatbuf_r+0x12>
 800cf0c:	9a01      	ldr	r2, [sp, #4]
 800cf0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf16:	425a      	negs	r2, r3
 800cf18:	415a      	adcs	r2, r3
 800cf1a:	602a      	str	r2, [r5, #0]
 800cf1c:	e7ee      	b.n	800cefc <__swhatbuf_r+0x1e>
 800cf1e:	2340      	movs	r3, #64	; 0x40
 800cf20:	2000      	movs	r0, #0
 800cf22:	6023      	str	r3, [r4, #0]
 800cf24:	b016      	add	sp, #88	; 0x58
 800cf26:	bd70      	pop	{r4, r5, r6, pc}

0800cf28 <__smakebuf_r>:
 800cf28:	898b      	ldrh	r3, [r1, #12]
 800cf2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf2c:	079d      	lsls	r5, r3, #30
 800cf2e:	4606      	mov	r6, r0
 800cf30:	460c      	mov	r4, r1
 800cf32:	d507      	bpl.n	800cf44 <__smakebuf_r+0x1c>
 800cf34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	6123      	str	r3, [r4, #16]
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	6163      	str	r3, [r4, #20]
 800cf40:	b002      	add	sp, #8
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	ab01      	add	r3, sp, #4
 800cf46:	466a      	mov	r2, sp
 800cf48:	f7ff ffc9 	bl	800cede <__swhatbuf_r>
 800cf4c:	9900      	ldr	r1, [sp, #0]
 800cf4e:	4605      	mov	r5, r0
 800cf50:	4630      	mov	r0, r6
 800cf52:	f7fd fab1 	bl	800a4b8 <_malloc_r>
 800cf56:	b948      	cbnz	r0, 800cf6c <__smakebuf_r+0x44>
 800cf58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf5c:	059a      	lsls	r2, r3, #22
 800cf5e:	d4ef      	bmi.n	800cf40 <__smakebuf_r+0x18>
 800cf60:	f023 0303 	bic.w	r3, r3, #3
 800cf64:	f043 0302 	orr.w	r3, r3, #2
 800cf68:	81a3      	strh	r3, [r4, #12]
 800cf6a:	e7e3      	b.n	800cf34 <__smakebuf_r+0xc>
 800cf6c:	4b0d      	ldr	r3, [pc, #52]	; (800cfa4 <__smakebuf_r+0x7c>)
 800cf6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	6020      	str	r0, [r4, #0]
 800cf74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf78:	81a3      	strh	r3, [r4, #12]
 800cf7a:	9b00      	ldr	r3, [sp, #0]
 800cf7c:	6163      	str	r3, [r4, #20]
 800cf7e:	9b01      	ldr	r3, [sp, #4]
 800cf80:	6120      	str	r0, [r4, #16]
 800cf82:	b15b      	cbz	r3, 800cf9c <__smakebuf_r+0x74>
 800cf84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f000 f8d1 	bl	800d130 <_isatty_r>
 800cf8e:	b128      	cbz	r0, 800cf9c <__smakebuf_r+0x74>
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	f023 0303 	bic.w	r3, r3, #3
 800cf96:	f043 0301 	orr.w	r3, r3, #1
 800cf9a:	81a3      	strh	r3, [r4, #12]
 800cf9c:	89a0      	ldrh	r0, [r4, #12]
 800cf9e:	4305      	orrs	r5, r0
 800cfa0:	81a5      	strh	r5, [r4, #12]
 800cfa2:	e7cd      	b.n	800cf40 <__smakebuf_r+0x18>
 800cfa4:	0800cd3d 	.word	0x0800cd3d

0800cfa8 <_malloc_usable_size_r>:
 800cfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfac:	1f18      	subs	r0, r3, #4
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfbc      	itt	lt
 800cfb2:	580b      	ldrlt	r3, [r1, r0]
 800cfb4:	18c0      	addlt	r0, r0, r3
 800cfb6:	4770      	bx	lr

0800cfb8 <_raise_r>:
 800cfb8:	291f      	cmp	r1, #31
 800cfba:	b538      	push	{r3, r4, r5, lr}
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	460d      	mov	r5, r1
 800cfc0:	d904      	bls.n	800cfcc <_raise_r+0x14>
 800cfc2:	2316      	movs	r3, #22
 800cfc4:	6003      	str	r3, [r0, #0]
 800cfc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cfce:	b112      	cbz	r2, 800cfd6 <_raise_r+0x1e>
 800cfd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfd4:	b94b      	cbnz	r3, 800cfea <_raise_r+0x32>
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f000 f830 	bl	800d03c <_getpid_r>
 800cfdc:	462a      	mov	r2, r5
 800cfde:	4601      	mov	r1, r0
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfe6:	f000 b817 	b.w	800d018 <_kill_r>
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d00a      	beq.n	800d004 <_raise_r+0x4c>
 800cfee:	1c59      	adds	r1, r3, #1
 800cff0:	d103      	bne.n	800cffa <_raise_r+0x42>
 800cff2:	2316      	movs	r3, #22
 800cff4:	6003      	str	r3, [r0, #0]
 800cff6:	2001      	movs	r0, #1
 800cff8:	e7e7      	b.n	800cfca <_raise_r+0x12>
 800cffa:	2400      	movs	r4, #0
 800cffc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d000:	4628      	mov	r0, r5
 800d002:	4798      	blx	r3
 800d004:	2000      	movs	r0, #0
 800d006:	e7e0      	b.n	800cfca <_raise_r+0x12>

0800d008 <raise>:
 800d008:	4b02      	ldr	r3, [pc, #8]	; (800d014 <raise+0xc>)
 800d00a:	4601      	mov	r1, r0
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	f7ff bfd3 	b.w	800cfb8 <_raise_r>
 800d012:	bf00      	nop
 800d014:	2000001c 	.word	0x2000001c

0800d018 <_kill_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4d07      	ldr	r5, [pc, #28]	; (800d038 <_kill_r+0x20>)
 800d01c:	2300      	movs	r3, #0
 800d01e:	4604      	mov	r4, r0
 800d020:	4608      	mov	r0, r1
 800d022:	4611      	mov	r1, r2
 800d024:	602b      	str	r3, [r5, #0]
 800d026:	f7f6 fc19 	bl	800385c <_kill>
 800d02a:	1c43      	adds	r3, r0, #1
 800d02c:	d102      	bne.n	800d034 <_kill_r+0x1c>
 800d02e:	682b      	ldr	r3, [r5, #0]
 800d030:	b103      	cbz	r3, 800d034 <_kill_r+0x1c>
 800d032:	6023      	str	r3, [r4, #0]
 800d034:	bd38      	pop	{r3, r4, r5, pc}
 800d036:	bf00      	nop
 800d038:	20000560 	.word	0x20000560

0800d03c <_getpid_r>:
 800d03c:	f7f6 bc06 	b.w	800384c <_getpid>

0800d040 <__sread>:
 800d040:	b510      	push	{r4, lr}
 800d042:	460c      	mov	r4, r1
 800d044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d048:	f000 f894 	bl	800d174 <_read_r>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	bfab      	itete	ge
 800d050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d052:	89a3      	ldrhlt	r3, [r4, #12]
 800d054:	181b      	addge	r3, r3, r0
 800d056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d05a:	bfac      	ite	ge
 800d05c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d05e:	81a3      	strhlt	r3, [r4, #12]
 800d060:	bd10      	pop	{r4, pc}

0800d062 <__swrite>:
 800d062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d066:	461f      	mov	r7, r3
 800d068:	898b      	ldrh	r3, [r1, #12]
 800d06a:	05db      	lsls	r3, r3, #23
 800d06c:	4605      	mov	r5, r0
 800d06e:	460c      	mov	r4, r1
 800d070:	4616      	mov	r6, r2
 800d072:	d505      	bpl.n	800d080 <__swrite+0x1e>
 800d074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d078:	2302      	movs	r3, #2
 800d07a:	2200      	movs	r2, #0
 800d07c:	f000 f868 	bl	800d150 <_lseek_r>
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d08a:	81a3      	strh	r3, [r4, #12]
 800d08c:	4632      	mov	r2, r6
 800d08e:	463b      	mov	r3, r7
 800d090:	4628      	mov	r0, r5
 800d092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d096:	f000 b817 	b.w	800d0c8 <_write_r>

0800d09a <__sseek>:
 800d09a:	b510      	push	{r4, lr}
 800d09c:	460c      	mov	r4, r1
 800d09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a2:	f000 f855 	bl	800d150 <_lseek_r>
 800d0a6:	1c43      	adds	r3, r0, #1
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	bf15      	itete	ne
 800d0ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0b6:	81a3      	strheq	r3, [r4, #12]
 800d0b8:	bf18      	it	ne
 800d0ba:	81a3      	strhne	r3, [r4, #12]
 800d0bc:	bd10      	pop	{r4, pc}

0800d0be <__sclose>:
 800d0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c2:	f000 b813 	b.w	800d0ec <_close_r>
	...

0800d0c8 <_write_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	4d07      	ldr	r5, [pc, #28]	; (800d0e8 <_write_r+0x20>)
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	4608      	mov	r0, r1
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	602a      	str	r2, [r5, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	f7f6 fbf7 	bl	80038ca <_write>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d102      	bne.n	800d0e6 <_write_r+0x1e>
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	b103      	cbz	r3, 800d0e6 <_write_r+0x1e>
 800d0e4:	6023      	str	r3, [r4, #0]
 800d0e6:	bd38      	pop	{r3, r4, r5, pc}
 800d0e8:	20000560 	.word	0x20000560

0800d0ec <_close_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d06      	ldr	r5, [pc, #24]	; (800d108 <_close_r+0x1c>)
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	602b      	str	r3, [r5, #0]
 800d0f8:	f7f6 fc03 	bl	8003902 <_close>
 800d0fc:	1c43      	adds	r3, r0, #1
 800d0fe:	d102      	bne.n	800d106 <_close_r+0x1a>
 800d100:	682b      	ldr	r3, [r5, #0]
 800d102:	b103      	cbz	r3, 800d106 <_close_r+0x1a>
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	bd38      	pop	{r3, r4, r5, pc}
 800d108:	20000560 	.word	0x20000560

0800d10c <_fstat_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	4d07      	ldr	r5, [pc, #28]	; (800d12c <_fstat_r+0x20>)
 800d110:	2300      	movs	r3, #0
 800d112:	4604      	mov	r4, r0
 800d114:	4608      	mov	r0, r1
 800d116:	4611      	mov	r1, r2
 800d118:	602b      	str	r3, [r5, #0]
 800d11a:	f7f6 fbfe 	bl	800391a <_fstat>
 800d11e:	1c43      	adds	r3, r0, #1
 800d120:	d102      	bne.n	800d128 <_fstat_r+0x1c>
 800d122:	682b      	ldr	r3, [r5, #0]
 800d124:	b103      	cbz	r3, 800d128 <_fstat_r+0x1c>
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	bd38      	pop	{r3, r4, r5, pc}
 800d12a:	bf00      	nop
 800d12c:	20000560 	.word	0x20000560

0800d130 <_isatty_r>:
 800d130:	b538      	push	{r3, r4, r5, lr}
 800d132:	4d06      	ldr	r5, [pc, #24]	; (800d14c <_isatty_r+0x1c>)
 800d134:	2300      	movs	r3, #0
 800d136:	4604      	mov	r4, r0
 800d138:	4608      	mov	r0, r1
 800d13a:	602b      	str	r3, [r5, #0]
 800d13c:	f7f6 fbfd 	bl	800393a <_isatty>
 800d140:	1c43      	adds	r3, r0, #1
 800d142:	d102      	bne.n	800d14a <_isatty_r+0x1a>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	b103      	cbz	r3, 800d14a <_isatty_r+0x1a>
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	20000560 	.word	0x20000560

0800d150 <_lseek_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d07      	ldr	r5, [pc, #28]	; (800d170 <_lseek_r+0x20>)
 800d154:	4604      	mov	r4, r0
 800d156:	4608      	mov	r0, r1
 800d158:	4611      	mov	r1, r2
 800d15a:	2200      	movs	r2, #0
 800d15c:	602a      	str	r2, [r5, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	f7f6 fbf6 	bl	8003950 <_lseek>
 800d164:	1c43      	adds	r3, r0, #1
 800d166:	d102      	bne.n	800d16e <_lseek_r+0x1e>
 800d168:	682b      	ldr	r3, [r5, #0]
 800d16a:	b103      	cbz	r3, 800d16e <_lseek_r+0x1e>
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	bd38      	pop	{r3, r4, r5, pc}
 800d170:	20000560 	.word	0x20000560

0800d174 <_read_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4d07      	ldr	r5, [pc, #28]	; (800d194 <_read_r+0x20>)
 800d178:	4604      	mov	r4, r0
 800d17a:	4608      	mov	r0, r1
 800d17c:	4611      	mov	r1, r2
 800d17e:	2200      	movs	r2, #0
 800d180:	602a      	str	r2, [r5, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	f7f6 fb84 	bl	8003890 <_read>
 800d188:	1c43      	adds	r3, r0, #1
 800d18a:	d102      	bne.n	800d192 <_read_r+0x1e>
 800d18c:	682b      	ldr	r3, [r5, #0]
 800d18e:	b103      	cbz	r3, 800d192 <_read_r+0x1e>
 800d190:	6023      	str	r3, [r4, #0]
 800d192:	bd38      	pop	{r3, r4, r5, pc}
 800d194:	20000560 	.word	0x20000560

0800d198 <sqrt>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	ed2d 8b02 	vpush	{d8}
 800d19e:	ec55 4b10 	vmov	r4, r5, d0
 800d1a2:	f000 f825 	bl	800d1f0 <__ieee754_sqrt>
 800d1a6:	4622      	mov	r2, r4
 800d1a8:	462b      	mov	r3, r5
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	eeb0 8a40 	vmov.f32	s16, s0
 800d1b2:	eef0 8a60 	vmov.f32	s17, s1
 800d1b6:	f7f3 fcb9 	bl	8000b2c <__aeabi_dcmpun>
 800d1ba:	b990      	cbnz	r0, 800d1e2 <sqrt+0x4a>
 800d1bc:	2200      	movs	r2, #0
 800d1be:	2300      	movs	r3, #0
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	4629      	mov	r1, r5
 800d1c4:	f7f3 fc8a 	bl	8000adc <__aeabi_dcmplt>
 800d1c8:	b158      	cbz	r0, 800d1e2 <sqrt+0x4a>
 800d1ca:	f7fd f8cf 	bl	800a36c <__errno>
 800d1ce:	2321      	movs	r3, #33	; 0x21
 800d1d0:	6003      	str	r3, [r0, #0]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	4619      	mov	r1, r3
 800d1da:	f7f3 fb37 	bl	800084c <__aeabi_ddiv>
 800d1de:	ec41 0b18 	vmov	d8, r0, r1
 800d1e2:	eeb0 0a48 	vmov.f32	s0, s16
 800d1e6:	eef0 0a68 	vmov.f32	s1, s17
 800d1ea:	ecbd 8b02 	vpop	{d8}
 800d1ee:	bd38      	pop	{r3, r4, r5, pc}

0800d1f0 <__ieee754_sqrt>:
 800d1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f4:	ec55 4b10 	vmov	r4, r5, d0
 800d1f8:	4e55      	ldr	r6, [pc, #340]	; (800d350 <__ieee754_sqrt+0x160>)
 800d1fa:	43ae      	bics	r6, r5
 800d1fc:	ee10 0a10 	vmov	r0, s0
 800d200:	ee10 3a10 	vmov	r3, s0
 800d204:	462a      	mov	r2, r5
 800d206:	4629      	mov	r1, r5
 800d208:	d110      	bne.n	800d22c <__ieee754_sqrt+0x3c>
 800d20a:	ee10 2a10 	vmov	r2, s0
 800d20e:	462b      	mov	r3, r5
 800d210:	f7f3 f9f2 	bl	80005f8 <__aeabi_dmul>
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	4620      	mov	r0, r4
 800d21a:	4629      	mov	r1, r5
 800d21c:	f7f3 f836 	bl	800028c <__adddf3>
 800d220:	4604      	mov	r4, r0
 800d222:	460d      	mov	r5, r1
 800d224:	ec45 4b10 	vmov	d0, r4, r5
 800d228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d22c:	2d00      	cmp	r5, #0
 800d22e:	dc10      	bgt.n	800d252 <__ieee754_sqrt+0x62>
 800d230:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d234:	4330      	orrs	r0, r6
 800d236:	d0f5      	beq.n	800d224 <__ieee754_sqrt+0x34>
 800d238:	b15d      	cbz	r5, 800d252 <__ieee754_sqrt+0x62>
 800d23a:	ee10 2a10 	vmov	r2, s0
 800d23e:	462b      	mov	r3, r5
 800d240:	ee10 0a10 	vmov	r0, s0
 800d244:	f7f3 f820 	bl	8000288 <__aeabi_dsub>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	f7f3 fafe 	bl	800084c <__aeabi_ddiv>
 800d250:	e7e6      	b.n	800d220 <__ieee754_sqrt+0x30>
 800d252:	1512      	asrs	r2, r2, #20
 800d254:	d074      	beq.n	800d340 <__ieee754_sqrt+0x150>
 800d256:	07d4      	lsls	r4, r2, #31
 800d258:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d25c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d264:	bf5e      	ittt	pl
 800d266:	0fda      	lsrpl	r2, r3, #31
 800d268:	005b      	lslpl	r3, r3, #1
 800d26a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d26e:	2400      	movs	r4, #0
 800d270:	0fda      	lsrs	r2, r3, #31
 800d272:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d276:	107f      	asrs	r7, r7, #1
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	2516      	movs	r5, #22
 800d27c:	4620      	mov	r0, r4
 800d27e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d282:	1886      	adds	r6, r0, r2
 800d284:	428e      	cmp	r6, r1
 800d286:	bfde      	ittt	le
 800d288:	1b89      	suble	r1, r1, r6
 800d28a:	18b0      	addle	r0, r6, r2
 800d28c:	18a4      	addle	r4, r4, r2
 800d28e:	0049      	lsls	r1, r1, #1
 800d290:	3d01      	subs	r5, #1
 800d292:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d296:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d29a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d29e:	d1f0      	bne.n	800d282 <__ieee754_sqrt+0x92>
 800d2a0:	462a      	mov	r2, r5
 800d2a2:	f04f 0e20 	mov.w	lr, #32
 800d2a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d2aa:	4281      	cmp	r1, r0
 800d2ac:	eb06 0c05 	add.w	ip, r6, r5
 800d2b0:	dc02      	bgt.n	800d2b8 <__ieee754_sqrt+0xc8>
 800d2b2:	d113      	bne.n	800d2dc <__ieee754_sqrt+0xec>
 800d2b4:	459c      	cmp	ip, r3
 800d2b6:	d811      	bhi.n	800d2dc <__ieee754_sqrt+0xec>
 800d2b8:	f1bc 0f00 	cmp.w	ip, #0
 800d2bc:	eb0c 0506 	add.w	r5, ip, r6
 800d2c0:	da43      	bge.n	800d34a <__ieee754_sqrt+0x15a>
 800d2c2:	2d00      	cmp	r5, #0
 800d2c4:	db41      	blt.n	800d34a <__ieee754_sqrt+0x15a>
 800d2c6:	f100 0801 	add.w	r8, r0, #1
 800d2ca:	1a09      	subs	r1, r1, r0
 800d2cc:	459c      	cmp	ip, r3
 800d2ce:	bf88      	it	hi
 800d2d0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800d2d4:	eba3 030c 	sub.w	r3, r3, ip
 800d2d8:	4432      	add	r2, r6
 800d2da:	4640      	mov	r0, r8
 800d2dc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d2e0:	f1be 0e01 	subs.w	lr, lr, #1
 800d2e4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d2e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d2ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d2f0:	d1db      	bne.n	800d2aa <__ieee754_sqrt+0xba>
 800d2f2:	430b      	orrs	r3, r1
 800d2f4:	d006      	beq.n	800d304 <__ieee754_sqrt+0x114>
 800d2f6:	1c50      	adds	r0, r2, #1
 800d2f8:	bf13      	iteet	ne
 800d2fa:	3201      	addne	r2, #1
 800d2fc:	3401      	addeq	r4, #1
 800d2fe:	4672      	moveq	r2, lr
 800d300:	f022 0201 	bicne.w	r2, r2, #1
 800d304:	1063      	asrs	r3, r4, #1
 800d306:	0852      	lsrs	r2, r2, #1
 800d308:	07e1      	lsls	r1, r4, #31
 800d30a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d30e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d312:	bf48      	it	mi
 800d314:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d318:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d31c:	4614      	mov	r4, r2
 800d31e:	e781      	b.n	800d224 <__ieee754_sqrt+0x34>
 800d320:	0ad9      	lsrs	r1, r3, #11
 800d322:	3815      	subs	r0, #21
 800d324:	055b      	lsls	r3, r3, #21
 800d326:	2900      	cmp	r1, #0
 800d328:	d0fa      	beq.n	800d320 <__ieee754_sqrt+0x130>
 800d32a:	02cd      	lsls	r5, r1, #11
 800d32c:	d50a      	bpl.n	800d344 <__ieee754_sqrt+0x154>
 800d32e:	f1c2 0420 	rsb	r4, r2, #32
 800d332:	fa23 f404 	lsr.w	r4, r3, r4
 800d336:	1e55      	subs	r5, r2, #1
 800d338:	4093      	lsls	r3, r2
 800d33a:	4321      	orrs	r1, r4
 800d33c:	1b42      	subs	r2, r0, r5
 800d33e:	e78a      	b.n	800d256 <__ieee754_sqrt+0x66>
 800d340:	4610      	mov	r0, r2
 800d342:	e7f0      	b.n	800d326 <__ieee754_sqrt+0x136>
 800d344:	0049      	lsls	r1, r1, #1
 800d346:	3201      	adds	r2, #1
 800d348:	e7ef      	b.n	800d32a <__ieee754_sqrt+0x13a>
 800d34a:	4680      	mov	r8, r0
 800d34c:	e7bd      	b.n	800d2ca <__ieee754_sqrt+0xda>
 800d34e:	bf00      	nop
 800d350:	7ff00000 	.word	0x7ff00000

0800d354 <_init>:
 800d354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d356:	bf00      	nop
 800d358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d35a:	bc08      	pop	{r3}
 800d35c:	469e      	mov	lr, r3
 800d35e:	4770      	bx	lr

0800d360 <_fini>:
 800d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d362:	bf00      	nop
 800d364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d366:	bc08      	pop	{r3}
 800d368:	469e      	mov	lr, r3
 800d36a:	4770      	bx	lr
